{"version":3,"sources":["../src/obniz/ObnizComponents.ts"],"names":[],"mappings":"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","file":"ObnizComponents.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore\n */\n\nimport semver from \"semver\";\nimport ObnizHciBLE from \"./libs/embeds/bleHci/ble\";\nimport Display from \"./libs/embeds/display\";\nimport ObnizSwitch from \"./libs/embeds/switch\";\n\nimport PeripheralAD from \"./libs/io_peripherals/ad\";\nimport { DriveType } from \"./libs/io_peripherals/common\";\nimport PeripheralDirective from \"./libs/io_peripherals/directive\";\nimport PeripheralI2C from \"./libs/io_peripherals/i2c\";\nimport PeripheralIO from \"./libs/io_peripherals/io\";\nimport PeripheralPWM from \"./libs/io_peripherals/pwm\";\nimport PeripheralSPI from \"./libs/io_peripherals/spi\";\nimport PeripheralUART from \"./libs/io_peripherals/uart\";\nimport LogicAnalyzer from \"./libs/measurements/logicanalyzer\";\nimport ObnizMeasure from \"./libs/measurements/measure\";\nimport WiFi from \"./libs/network/wifi\";\nimport Plugin from \"./libs/plugin/plugin\";\n\nimport TCP from \"./libs/protocol/tcp\";\n\nimport ObnizParts from \"./ObnizParts\";\n\nimport { ComponentAbstract } from \"./libs/ComponentAbstact\";\nimport HW from \"./libs/hw\";\nimport PeripheralGrove from \"./libs/io_peripherals/grove\";\nimport { ObnizOptions } from \"./ObnizOptions\";\n\nexport default abstract class ObnizComponents extends ObnizParts {\n  /* board peripherals */\n\n  /**\n   * @category Peripherals\n   */\n  public io?: PeripheralDirective;\n\n  /**\n   * @category Peripherals\n   */\n  public io0?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io1?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io2?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io3?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io4?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io5?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io6?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io7?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io8?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io9?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io10?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public io11?: PeripheralIO;\n\n  /**\n   * @category Peripherals\n   */\n  public ad0?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad1?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad2?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad3?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad4?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad5?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad6?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad7?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad8?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad9?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad10?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public ad11?: PeripheralAD;\n\n  /**\n   * @category Peripherals\n   */\n  public pwm0?: PeripheralPWM;\n\n  /**\n   * @category Peripherals\n   */\n  public pwm1?: PeripheralPWM;\n\n  /**\n   * @category Peripherals\n   */\n  public pwm2?: PeripheralPWM;\n\n  /**\n   * @category Peripherals\n   */\n  public pwm3?: PeripheralPWM;\n\n  /**\n   * @category Peripherals\n   */\n  public pwm4?: PeripheralPWM;\n\n  /**\n   * @category Peripherals\n   */\n  public pwm5?: PeripheralPWM;\n\n  /**\n   * @category Peripherals\n   */\n  public uart0?: PeripheralUART;\n\n  /**\n   * @category Peripherals\n   */\n  public uart1?: PeripheralUART;\n\n  /**\n   * @category Peripherals\n   */\n  public spi0?: PeripheralSPI;\n\n  /**\n   * @category Peripherals\n   */\n  public spi1?: PeripheralSPI;\n\n  /**\n   * @category Peripherals\n   */\n  public i2c0?: PeripheralI2C;\n\n  /**\n   * @category Measurement\n   */\n  public logicAnalyzer?: LogicAnalyzer;\n\n  /**\n   * @category Measurement\n   */\n  public measure?: ObnizMeasure;\n\n  /**\n   * @category Embeds\n   */\n  public display?: Display;\n\n  /**\n   * @category Embeds\n   */\n  public switch?: ObnizSwitch;\n\n  /**\n   * If obnizOS ver >= 3.0.0, automatically load [[ObnizCore.Components.Ble.Hci.ObnizBLE|ObnizHciBLE]],\n   * and obnizOS ver < 3.0.0 throw unsupported Error,\n   * @category Embeds\n   */\n  public ble?: ObnizHciBLE;\n\n  /**\n   * @category plugin\n   */\n  public plugin?: Plugin;\n\n  protected _hwDefinition: any;\n\n  protected pongObservers: any;\n  protected _allComponentKeys: any;\n  protected _hw_peripherals: any;\n\n  constructor(id: string, options?: ObnizOptions) {\n    super(id, options);\n    this.pongObservers = [];\n    this._allComponentKeys = [];\n  }\n\n  public close() {\n    super.close();\n    if (this.options.reset_obniz_on_ws_disconnection) {\n      this._resetComponents();\n    }\n  }\n\n  /**\n   * Output pin Vcc and Gnd\n   * @param vcc\n   * @param gnd\n   * @param drive\n   */\n  public setVccGnd(vcc: number | null | undefined, gnd: number | null | undefined, drive: DriveType) {\n    if (this.isValidIO(vcc)) {\n      if (drive) {\n        this.getIO(vcc!).drive(drive);\n      }\n      this.getIO(vcc!).output(true);\n    }\n\n    if (this.isValidIO(gnd)) {\n      if (drive) {\n        this.getIO(gnd!).drive(drive);\n      }\n      this.getIO(gnd!).output(false);\n    }\n  }\n\n  /**\n   * Get IO module from pin no\n   * @param io\n   */\n  public getIO(io: number): PeripheralIO {\n    if (!this.isValidIO(io)) {\n      throw new Error(\"io \" + io + \" is not valid io\");\n    }\n    return (this as any)[\"io\" + io];\n  }\n\n  /**\n   * GET AD module from pin no\n   * @param io\n   */\n  public getAD(io: number): PeripheralAD {\n    if (!this.isValidIO(io)) {\n      throw new Error(\"ad \" + io + \" is not valid io\");\n    }\n    return (this as any)[\"ad\" + io];\n  }\n\n  /**\n   * It returns unused PWM module.\n   */\n  public getFreePwm(): PeripheralPWM {\n    return this._getFreePeripheralUnit(\"pwm\");\n  }\n\n  /**\n   * It returns unused I2C module.\n   */\n  public getFreeI2C(): PeripheralI2C {\n    return this._getFreePeripheralUnit(\"i2c\");\n  }\n\n  /**\n   * It returns setuped I2C module .\n   * @param config\n   */\n  public getI2CWithConfig(config: any): PeripheralI2C {\n    if (typeof config !== \"object\") {\n      throw new Error(\"getI2CWithConfig need config arg\");\n    }\n    if (config.i2c) {\n      return config.i2c;\n    }\n    const i2c: PeripheralI2C = this.getFreeI2C();\n    i2c.start(config);\n    return i2c;\n  }\n\n  /**\n   * It returns unused SPI module.\n   */\n  public getFreeSpi(): PeripheralSPI {\n    return this._getFreePeripheralUnit(\"spi\");\n  }\n\n  /**\n   * It returns setuped SPI module.\n   * @param config\n   */\n  public getSpiWithConfig(config: any): PeripheralSPI {\n    if (typeof config !== \"object\") {\n      throw new Error(\"getSpiWithConfig need config arg\");\n    }\n    if (config.spi) {\n      return config.spi;\n    }\n    const spi: any = this.getFreeSpi();\n    spi.start(config);\n    return spi;\n  }\n\n  /**\n   * It returns unused UART module.\n   */\n  public getFreeUart(): PeripheralUART {\n    return this._getFreePeripheralUnit(\"uart\");\n  }\n\n  /**\n   * It returns unused TCP module.\n   */\n  public getFreeTcp() {\n    return this._getFreePeripheralUnit(\"tcp\");\n  }\n\n  public hasExtraInterface(interfaceName: string): boolean {\n    return !!this.getExtraInterface(interfaceName);\n  }\n\n  public getExtraInterface(interfaceName: string): any {\n    if (this._hwDefinition.extraInterface && this._hwDefinition.extraInterface[interfaceName]) {\n      return this._hwDefinition.extraInterface[interfaceName];\n    }\n    return null;\n  }\n\n  protected _callOnConnect() {\n    this._prepareComponents();\n    super._callOnConnect();\n  }\n\n  protected _prepareComponents() {\n    if (this._allComponentKeys.length !== 0) {\n      return;\n    }\n\n    this._hwDefinition = HW.getDefinitionFor(this.hw);\n    if (!this._hwDefinition) {\n      throw new Error(`unkown hw ${this.hw}`);\n    }\n\n    const hw_peripherals: any = this._hwDefinition.peripherals;\n    this._hw_peripherals = hw_peripherals;\n    const hw_embeds: any = this._hwDefinition.embeds;\n    const hw_protocol: any = this._hwDefinition.protocol;\n    const hw_network: any = this._hwDefinition.network;\n\n    const shared_map: any = {\n      io: PeripheralDirective,\n      logicAnalyzer: LogicAnalyzer,\n      measure: ObnizMeasure,\n      plugin: Plugin,\n    };\n\n    const peripheral_map: any = {\n      io: PeripheralIO,\n      ad: PeripheralAD,\n      uart: PeripheralUART,\n      spi: PeripheralSPI,\n      i2c: PeripheralI2C,\n      pwm: PeripheralPWM,\n      grove: PeripheralGrove,\n    };\n\n    const ble: any = ObnizHciBLE;\n\n    const embeds_map: any = {\n      display: Display,\n      switch: ObnizSwitch,\n      ble,\n    };\n\n    const protocol_map: any = {\n      tcp: TCP,\n    };\n\n    const network_map: any = {\n      wifi: WiFi,\n    };\n\n    for (const key in shared_map) {\n      const Class: any = shared_map[key];\n      (this as any)[key] = new Class(this);\n      this._allComponentKeys.push(key);\n    }\n\n    if (hw_peripherals) {\n      for (const key in peripheral_map) {\n        if (hw_peripherals[key]) {\n          const units: any = hw_peripherals[key].units;\n          const Class: any = peripheral_map[key];\n          for (const unitId in units) {\n            const unitIdNumber = parseInt(unitId);\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber, units[unitId]);\n            this._allComponentKeys.push(key + unitIdNumber);\n          }\n        }\n      }\n    }\n\n    if (hw_embeds) {\n      for (const key in embeds_map) {\n        if (hw_embeds[key]) {\n          const Class: any = embeds_map[key];\n          (this as any)[key] = new Class(this, hw_embeds[key]);\n          this._allComponentKeys.push(key);\n          if (typeof (this as any)[key].debugHandler === \"function\") {\n            (this as any)[key].debugHandler = (text: any) => {\n              this.print_debug(text);\n            };\n          }\n        }\n      }\n    }\n\n    if (hw_protocol) {\n      for (const key in protocol_map) {\n        if (hw_protocol[key]) {\n          const units: any = hw_protocol[key].units;\n          const Class: any = protocol_map[key];\n          for (const unitId in units) {\n            const unitIdNumber = parseInt(unitId);\n            (this as any)[key + unitIdNumber] = new Class(this, unitIdNumber);\n            this._allComponentKeys.push(key + unitIdNumber);\n          }\n        }\n      }\n    }\n\n    if (hw_network) {\n      for (const key in network_map) {\n        if (hw_network[key]) {\n          const Class: any = network_map[key];\n          (this as any)[key] = new Class(this, hw_embeds[key]);\n          this._allComponentKeys.push(key);\n        }\n      }\n    }\n  }\n\n  protected _resetComponents() {\n    this.print_debug(\"components state resets\");\n    for (const key of this._allComponentKeys) {\n      (this as any)[key]._reset();\n    }\n  }\n\n  protected notifyToModule(obj: any) {\n    super.notifyToModule(obj);\n    for (const key of this._allComponentKeys) {\n      const targetComponent = (this as any)[key];\n      if (targetComponent instanceof ComponentAbstract) {\n        const basePath = targetComponent.schemaBasePath();\n        if (basePath && obj.hasOwnProperty(basePath)) {\n          targetComponent.notifyFromObniz(obj[basePath]);\n        }\n      } else {\n        if (key === \"logicAnalyzer\") {\n          if (obj.hasOwnProperty(\"logic_analyzer\")) {\n            (this as any).logicAnalyzer.notified(obj.logic_analyzer);\n          }\n          continue;\n        }\n        if (obj.hasOwnProperty(key)) {\n          /* because of nullable */\n          targetComponent.notified(obj[key]);\n        }\n      }\n    }\n  }\n\n  protected handleSystemCommand(wsObj: any) {\n    super.handleSystemCommand(wsObj);\n    // ping pong\n    if (wsObj.pong) {\n      for (const callback of this.pongObservers) {\n        callback(wsObj);\n      }\n    }\n  }\n\n  protected addPongObserver(callback: any) {\n    if (callback) {\n      this.pongObservers.push(callback);\n    }\n  }\n\n  protected removePongObserver(callback: any) {\n    if (this.pongObservers.includes(callback)) {\n      const index: any = this.pongObservers.indexOf(callback);\n      this.pongObservers.splice(index, 1);\n    }\n  }\n\n  protected _getFreePeripheralUnit(peripheral: any): any {\n    for (const key of this._allComponentKeys) {\n      if (key.indexOf(peripheral) === 0) {\n        /* \"io\" for \"io0\" */\n        const obj: any = (this as any)[key];\n        if (typeof obj === \"object\" && !obj.isUsed()) {\n          obj.used = true;\n          return obj;\n        }\n      }\n    }\n    throw new Error(`No More ${peripheral} Available.`);\n  }\n}\n"]}