{"version":3,"sources":["../src/obniz/ObnizUIs.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,kBAAkB;IACtD;;OAEG;IACH,OAAc,YAAY,EAAE,GAAG,EAAE,CAAM;IAEvC;;OAEG;IACH,OAAc,cAAc,EAAE,OAAO,CAAS;IAE9C;;OAEG;IACH,OAAc,YAAY,EAAE,MAAM,CAAK;gBAE3B,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,YAAY;IAI9C;;;;;;;;;;;;;;;;OAgBG;IACI,KAAK;IAKZ,SAAS,CAAC,cAAc,CAAC,GAAG,EAAE,MAAM;IAYpC,SAAS,CAAC,SAAS,CAAC,cAAc,EAAE,GAAG;IAiBvC,SAAS,CAAC,MAAM,CAAC,MAAM,oBAAa,EAAE,QAAQ,EAAE,GAAG;IAKnD,SAAS,CAAC,WAAW;IAiBrB,SAAS,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAuG/C,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG;IAS9B,SAAS,CAAC,YAAY;;;;;IAoBtB,SAAS,CAAC,cAAc;IAKxB,SAAS,CAAC,gBAAgB;IAK1B,SAAS,CAAC,cAAc;IAgBxB,SAAS,CAAC,UAAU,CAAC,kBAAkB,EAAE,GAAG;IAgB5C,SAAS,CAAC,WAAW;CAetB","file":"ObnizUIs.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore\n */\n\nimport dialogPolyfill from \"./libs/webpackReplace/dialogPollyfill\";\nimport { ObnizOptions } from \"./ObnizOptions\";\nimport ObnizSystemMethods from \"./ObnizSystemMethods\";\n\nexport default class ObnizUIs extends ObnizSystemMethods {\n  /**\n   * @ignore\n   */\n  public static _promptQueue: any[] = [];\n\n  /**\n   * @ignore\n   */\n  public static _promptWaiting: boolean = false;\n\n  /**\n   * @ignore\n   */\n  public static _promptCount: number = 0;\n\n  constructor(id: string, options?: ObnizOptions) {\n    super(id, options);\n  }\n\n  /**\n   * This closes the current connection.\n   * You need to set auto_connect to false. Otherwise the connection will be recovered.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678', {\n   *   auto_connect: false,\n   *   reset_obniz_on_ws_disconnection: false\n   * });\n   *\n   * obniz.connect();\n   * obniz.onconnect = async function() {\n   *   obniz.io0.output(true);\n   *   obniz.close();\n   * }\n   * ```\n   */\n  public close() {\n    super.close();\n    this.updateOnlineUI();\n  }\n\n  protected isValidObnizId(str: string) {\n    if (typeof str !== \"string\" || str.length < 8) {\n      return null;\n    }\n    str = str.replace(\"-\", \"\");\n    let id: any = parseInt(str);\n    if (isNaN(id)) {\n      id = null;\n    }\n    return id !== null;\n  }\n\n  protected wsconnect(desired_server: any) {\n    this.showOffLine();\n    if (!this.isValidObnizId(this.id)) {\n      if (this.isNode) {\n        this.error(\"invalid obniz id\");\n      } else {\n        const filled: any = _ReadCookie(\"obniz-last-used\") || \"\";\n        this.prompt(filled, (obnizid: any) => {\n          this.id = obnizid;\n          this.wsconnect(desired_server);\n        });\n      }\n      return;\n    }\n    super.wsconnect(desired_server);\n  }\n\n  protected prompt(filled: string = \"\", callback: any) {\n    ObnizUIs._promptQueue.push({ filled, callback });\n    this._promptNext();\n  }\n\n  protected _promptNext() {\n    if (ObnizUIs._promptWaiting) {\n      return;\n    }\n    const next = ObnizUIs._promptQueue.shift();\n    if (next) {\n      ObnizUIs._promptWaiting = true;\n      if (document.readyState !== \"loading\") {\n        this._promptOne(next.filled, next.callback);\n      } else {\n        document.addEventListener(\"DOMContentLoaded\", () => {\n          this._promptOne(next.filled, next.callback);\n        });\n      }\n    }\n  }\n\n  protected _promptOne(filled: any, callback: any) {\n    ObnizUIs._promptCount++;\n    let result = \"\";\n    new Promise((resolve: any) => {\n      const text = filled;\n      const selectorId = `obniz-id-prompt${ObnizUIs._promptCount}`;\n      let css: string = dialogPolyfill.css;\n      css +=\n        `dialog#${selectorId}::backdrop {\\n` +\n        \"  background: rgba(0, 0, 0, 0.5);\\n\" +\n        \"  animation: modal-open .4s ease;\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        `dialog#${selectorId}[open] {\\n` +\n        \"    position: fixed;\\n\" +\n        \"    bottom: auto;\\n\" +\n        \"    top: 10px;\" +\n        \"    animation: modal-slide .5s ease;\\n\" +\n        \"    border: none;\" +\n        \"    padding: 0;\" +\n        \"}\\n\" +\n        `dialog#${selectorId} .contents {\\n` +\n        \"    padding: 1em;\" +\n        \"}\\n\" +\n        `dialog#${selectorId} button {\\n` +\n        \"    background-color: #00a4e3;\\n\" +\n        \"    border-color: #00a4e3;\\n\" +\n        \"    color: white;\\n\" +\n        \"}\" +\n        \"@keyframes modal-open {\\n\" +\n        \"  0% {\\n\" +\n        \"    opacity: 0;\\n\" +\n        \"  }\\n\" +\n        \"  100%{\\n\" +\n        \"    opacity: 1;\\n\" +\n        \"  }\\n\" +\n        \"}\\n\" +\n        \"\\n\" +\n        \"@keyframes modal-slide {\\n\" +\n        \"  0% {\\n\" +\n        \"    transform: translateY(-20px);\\n\" +\n        \"  }\\n\" +\n        \"  100%{\\n\" +\n        \"    transform: translateY(0);\\n\" +\n        \"  }\\n\" +\n        \"}\";\n\n      let html = \"\";\n      html += `<dialog id='${selectorId}'><div class=\"contents\">`;\n      html += `Connect obniz device`;\n      if (ObnizUIs._promptCount > 1) {\n        html += `(${ObnizUIs._promptCount})`;\n      }\n      html += `<br/>`;\n      html += ` <form method=\"dialog\">`;\n      html += ` <input type=\"text\" name=\"obniz-id\" id=\"return_value\" value=\"${text}\" placeholder=\"obniz id\">`;\n      html += '  <button id=\"close\">Connect</button>';\n      html += \"</form>\";\n      html += \"</div></dialog>\";\n      html += \"<style>\";\n      html += css;\n      html += \"</style>\";\n\n      const div = document.createElement(\"div\");\n      div.innerHTML = html;\n      const dialog: HTMLDialogElement = div.querySelector(\"dialog\") as HTMLDialogElement;\n      dialog.addEventListener(\"click\", () => {\n        // cancel\n        (dialog.querySelector(\"#return_value\") as HTMLInputElement).value = \"\";\n        dialog.close();\n        resolve();\n      });\n      (dialog.querySelector(\".contents\") as HTMLElement).addEventListener(\"click\", (event) => {\n        event.stopPropagation();\n      });\n\n      dialog.addEventListener(\"close\", (param) => {\n        const inputValue = (dialog.querySelector(\"#return_value\") as HTMLInputElement).value;\n        div.parentElement!.removeChild(div);\n        result = inputValue;\n        resolve();\n      });\n\n      dialog.addEventListener(\"cancel\", (param) => {\n        // escape key\n        const inputValue = (dialog.querySelector(\"#return_value\") as HTMLInputElement).value;\n        div.parentElement!.removeChild(div);\n        resolve();\n      });\n      document.body.appendChild(div);\n      dialogPolyfill.dialogPolyfill.registerDialog(dialog);\n      dialog.showModal();\n    }).then(() => {\n      ObnizUIs._promptWaiting = false;\n\n      if (result && result.length > 0) {\n        // @ts-ignore\n        callback(result);\n      }\n      this._promptNext();\n    });\n  }\n\n  protected showAlertUI(obj: any) {\n    if (this.isNode || !document.getElementById(this.options.debug_dom_id)) {\n      return;\n    }\n    const dom: any = `\n    <div style=\"background-color:${obj.alert === \"warning\" ? \"#ffee35\" : \"#ff7b34\"}\">${obj.message}</div>`;\n    document.getElementById(this.options.debug_dom_id)!.insertAdjacentHTML(\"beforeend\", dom);\n  }\n\n  protected getDebugDoms() {\n    if (this.isNode) {\n      return;\n    }\n    const loaderDom: any = document.querySelector(\"#loader\");\n    const debugDom: any = document.querySelector(\"#\" + this.options.debug_dom_id);\n    let statusDom: any = document.querySelector(\"#\" + this.options.debug_dom_id + \" #online-status\");\n    if (debugDom && !statusDom) {\n      statusDom = document.createElement(\"div\");\n      statusDom.id = \"online-status\";\n      statusDom.style.color = \"#FFF\";\n      statusDom.style.padding = \"5px\";\n      statusDom.style.textAlign = \"center\";\n      debugDom.insertBefore(statusDom, debugDom.firstChild);\n    }\n    return { loaderDom, debugDom, statusDom };\n  }\n\n  /* online offline */\n\n  protected _callOnConnect() {\n    this.updateOnlineUI();\n    super._callOnConnect();\n  }\n\n  protected _disconnectLocal() {\n    super._disconnectLocal();\n    this.updateOnlineUI();\n  }\n\n  protected updateOnlineUI() {\n    if (this.isNode) {\n      return;\n    }\n\n    const isConnected: any = this.socket && this.socket.readyState === 1;\n    const isConnectedLocally: any = this.socket_local && this.socket_local.readyState === 1;\n    if (isConnected && isConnectedLocally) {\n      this.showOnLine(true);\n    } else if (isConnected) {\n      this.showOnLine(false);\n    } else {\n      this.showOffLine();\n    }\n  }\n\n  protected showOnLine(isConnectedLocally: any) {\n    if (this.isNode) {\n      return;\n    }\n    const doms: any = this.getDebugDoms();\n    if (doms.loaderDom) {\n      doms.loaderDom.style.display = \"none\";\n    }\n    if (doms.statusDom) {\n      doms.statusDom.style.backgroundColor = isConnectedLocally ? \"#0cd362\" : \"#31965d\";\n      doms.statusDom.style.color = \"#FFF\";\n      doms.statusDom.innerHTML =\n        (this.id ? \"online : \" + this.id : \"online\") + (isConnectedLocally ? \" via local_connect\" : \" via internet\");\n    }\n  }\n\n  protected showOffLine() {\n    if (this.isNode) {\n      return;\n    }\n\n    const doms: any = this.getDebugDoms();\n    if (doms.loaderDom) {\n      doms.loaderDom.style.display = \"block\";\n    }\n    if (doms.statusDom) {\n      doms.statusDom.style.backgroundColor = \"#d9534f\";\n      doms.statusDom.style.color = \"#FFF\";\n      doms.statusDom.innerHTML = this.id ? \"offline : \" + this.id : \"offline\";\n    }\n  }\n}\n\n/**\n *\n * @ignore\n */\nfunction _ReadCookie(name: any) {\n  const nameEQ: any = name + \"=\";\n  const ca: any = document.cookie.split(\";\");\n  for (let i = 0; i < ca.length; i++) {\n    let c: any = ca[i];\n    while (c.charAt(0) === \" \") {\n      c = c.substring(1, c.length);\n    }\n    if (c.indexOf(nameEQ) === 0) {\n      return c.substring(nameEQ.length, c.length);\n    }\n  }\n  return null;\n}\n"]}