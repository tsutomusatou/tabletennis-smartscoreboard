{"version":3,"sources":["../src/obniz/ObnizSystemMethods.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,MAAM,CAAC,OAAO,OAAO,kBAAmB,SAAQ,eAAe;gBACjD,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,YAAY;IAI9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgCG;IACI,IAAI,CAAC,IAAI,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;IAUrC;;;;;;;;;;OAUG;IACI,KAAK;IAKZ;;;;;;OAMG;IACI,MAAM;IAIb;;OAEG;IACI,SAAS;IAIhB;;;;;;;;;;;OAWG;IACI,oBAAoB,CAAC,OAAO,EAAE,GAAG;IAIxC;;;;;;;;;;;;;;;;;OAiBG;IACI,iBAAiB,CAAC,KAAK,EAAE,GAAG;IAInC;;;;;;;;;;;OAWG;IACI,YAAY,CAAC,GAAG,EAAE,GAAG;IAW5B;;;;;;;;;;;;OAYG;IACI,WAAW,CAAC,MAAM,EAAE,GAAG;IAW9B;;;;;;;;;;;;;;OAcG;IACI,KAAK,CAAC,IAAI,EAAE,IAAI;IAsBvB;;;;;;;;;;;;;;;OAeG;IACI,cAAc,CAAC,OAAO,EAAE,GAAG;IAOlC;;;;;;;;;;;;OAYG;IACI,QAAQ,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,kBAAkB,CAAC,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;CA+D/F","file":"ObnizSystemMethods.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore\n */\n\nimport ObnizComponents from \"./ObnizComponents\";\nimport { ObnizOptions } from \"./ObnizOptions\";\n\nexport default class ObnizSystemMethods extends ObnizComponents {\n  constructor(id: string, options?: ObnizOptions) {\n    super(id, options);\n  }\n\n  /**\n   * This pauses obniz Board for a period given in terms of ms (millisecond).\n   *\n   * ```javascript\n   * // Javascript Example\n   * led.on();\n   * obniz.wait(1000); // led ON 1sec.\n   * led.off();\n   * ```\n   *\n   * This method pauses only obniz Board, not JavaScript.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var time = new Date();\n   * led.on();\n   * obniz.wait(1000); // led ON 1sec.\n   * led.off();\n   * console.log((new Date()).getTime() - time.getTime()) // 0 or very few ms. not 1000ms.\n   * ```\n   *\n   * However, when you call this method together with the await function, JavaScript will pause for the given period in ms.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var time = new Date();\n   * led.on();\n   * await obniz.wait(1000); // led ON 1sec.\n   * led.off();\n   * console.log((new Date()).getTime() - time.getTime()) // => about 1000\n   * ```\n   * @param msec\n   */\n  public wait(msec: any): Promise<void> {\n    if (msec < 0) {\n      msec = 0;\n    } else if (msec > 60 * 1000) {\n      msec = 60 * 1000;\n    }\n    this.send({ system: { wait: msec } });\n    return new Promise((resolve) => setTimeout(resolve, msec));\n  }\n\n  /**\n   * This forces the obniz Board to go back to the initial state when the power was just turned on.\n   *\n   * ```javascript\n   * // Example\n   * obniz = new Obniz(\"1234-5678\");\n   * obniz.onconnect = function() {\n   *   obniz.reset();\n   * }\n   * ```\n   */\n  public reset() {\n    this.send({ system: { reset: true } });\n    this._resetComponents();\n  }\n\n  /**\n   * reboot device\n   *\n   * ```javascript\n   * obniz.reboot();\n   * ```\n   */\n  public reboot() {\n    this.send({ system: { reboot: true } });\n  }\n\n  /**\n   * @ignore\n   */\n  public selfCheck() {\n    this.send({ system: { self_check: true } });\n  }\n\n  /**\n   * By default, obniz Board resets after disconnection from the cloud.\n   * It means the output value and pwm will all stop at that point.\n   * But the above function with the argument true can nullify that default setting and change it to \"do not reset when offline\".\n   * This configuration remains as long as obniz Board is on.\n   *\n   * ```javascript\n   * // Example\n   * obniz.keepWorkingAtOffline(true);\n   * ```\n   * @param working\n   */\n  public keepWorkingAtOffline(working: any) {\n    this.send({ system: { keep_working_at_offline: working } });\n  }\n\n  /**\n   *\n   * This lets you change the setting of `reset_obniz_on_ws_disconnection` after connection is established.\n   *\n   * By default, obniz cloud resets target obniz Board when the all websocket to obniz cloud was closed.\n   * It means the output value and pwm will all stop at that point.\n   * With the above function, you can nullify these resetting activities.\n   * This configuration will remain until target obniz Board gets disconnected.\n   * Set this function to false to keep working without any of the websocket connections.\n   *\n   *\n   * ```javascript\n   * // Example\n   * obniz.resetOnDisconnect(false);\n   * ```\n   *\n   * @param reset\n   */\n  public resetOnDisconnect(reset: any) {\n    this.send({ ws: { reset_obniz_on_ws_disconnection: reset } }, { connect_check: false });\n  }\n\n  /**\n   * Action only with obniz Board 1Y.\n   *\n   * Obniz Board sleeps for the value specified in seconds.\n   *\n   * ```javascript\n   * // JavaScript example\n   * obniz.sleepSeconds (60); // 60 seconds\n   * ```\n   *\n   * @param sec up to 64800 seconds (18 hours).\n   */\n  public sleepSeconds(sec: any) {\n    if (sec < 1) {\n      // min 1s\n      sec = 1;\n    } else if (sec > 60 * 60 * 18) {\n      // max 18h (60(s)*60(m)*18(h))\n      throw new Error(\"Error max 18h(64800) sleep\");\n    }\n    this.send({ system: { sleep_seconds: sec } });\n  }\n\n  /**\n   * Action only with obniz Board 1Y.\n   *\n   * Obniz Board sleeps for the value specified in minutes.\n   *\n   *\n   *\n   * ```javascript\n   * // JavaScript example\n   * obniz.sleepMinute （60）; // 60 minutes\n   * ```\n   * @param minute up to 64800 minutes(45 days ).\n   */\n  public sleepMinute(minute: any) {\n    if (minute < 1) {\n      // min 1m\n      minute = 1;\n    } else if (minute > 60 * 24 * 45) {\n      // max 45day (60(m)*24(h)*45(d))\n      throw new Error(\"max 45day(64800m) sleep\");\n    }\n    this.send({ system: { sleep_minute: minute } });\n  }\n\n  /**\n   * Action only with obniz Board 1Y.\n   *\n   * Obniz Board sleeps for the value specified in Date type.\n   * Sleep for up to 45 days (64800 minutes).\n   *\n   * ```javascript\n   * // JavaScript example\n   * let dt = new Date();\n   * dt.setHours(dt.getHours () + 1,0,0,0);\n   * obniz.sleep(dt);\n   * ```\n   *\n   * @param date\n   */\n  public sleep(date: Date) {\n    if (!(date instanceof Date)) {\n      throw new Error(\"Date instance argument required\");\n    }\n    let sleepTime: any = Math.floor(((date as any) - (new Date() as any)) / 1000);\n    this.print_debug(`sleep time : ${sleepTime}s`);\n    if (sleepTime <= 0) {\n      throw new Error(`past sleep time : ${sleepTime}s`);\n    }\n    if (sleepTime <= 60 * 60 * 18) {\n      this.sleepSeconds(sleepTime);\n      return;\n    }\n    sleepTime = Math.floor(sleepTime / 60);\n    this.print_debug(`sleep time : ${sleepTime}m`);\n    if (sleepTime <= 60 * 24 * 45) {\n      this.sleepMinute(sleepTime);\n    } else {\n      throw new Error(`over max sleep time : ${sleepTime}m`);\n    }\n  }\n\n  /**\n   * Action only with obniz Board 1Y.\n   *\n   * It returns from sleep depending on the pin state of IO0.\n   *\n   *\n   * ```javascript\n   * // JavaScript example\n   * obniz.sleepIoTrigger (true);\n   * ```\n   *\n   * @param trigger\n   *\n   *  - true: Rise （LOW -> HIGH）\n   *  - false: Falling （HIGH -> LOW）\n   */\n  public sleepIoTrigger(trigger: any) {\n    if (typeof trigger !== \"boolean\") {\n      throw new Error(\"sleepIoTrigger need boolean arg\");\n    }\n    this.send({ system: { sleep_io_trigger: trigger } });\n  }\n\n  /**\n   * Ping to obniz device and wait pong response.\n   *\n   * If debugprint option enabled, it display ping/pong response time on console.\n   *\n   * ```javascript\n   * await obniz.pingWait(); //waiting pong.\n   * ```\n   *\n   * @param unixtime start time of measure response time\n   * @param rand Unique identifier of ping data\n   * @param forceGlobalNetwork\n   */\n  public pingWait(unixtime?: number, rand?: number, forceGlobalNetwork?: boolean): Promise<void> {\n    unixtime = unixtime || new Date().getTime();\n    const upper: any = Math.floor(unixtime / Math.pow(2, 32));\n    const lower: any = unixtime - upper * Math.pow(2, 32);\n    rand = rand || Math.floor(Math.random() * Math.pow(2, 4));\n    const buf: any = [];\n\n    buf.push((upper >>> (8 * 3)) & 0xff);\n    buf.push((upper >>> (8 * 2)) & 0xff);\n    buf.push((upper >>> (8 * 1)) & 0xff);\n    buf.push((upper >>> (8 * 0)) & 0xff);\n    buf.push((lower >>> (8 * 3)) & 0xff);\n    buf.push((lower >>> (8 * 2)) & 0xff);\n    buf.push((lower >>> (8 * 1)) & 0xff);\n    buf.push((lower >>> (8 * 0)) & 0xff);\n    buf.push((rand >>> (8 * 3)) & 0xff);\n    buf.push((rand >>> (8 * 2)) & 0xff);\n    buf.push((rand >>> (8 * 1)) & 0xff);\n    buf.push((rand >>> (8 * 0)) & 0xff);\n\n    const obj: any = {\n      system: {\n        ping: {\n          key: buf,\n        },\n      },\n    };\n\n    this.send(obj, { local_connect: forceGlobalNetwork ? false : true });\n\n    return new Promise((resolve: any) => {\n      const callback: any = (systemObj: any) => {\n        for (let i = 0; i < buf.length; i++) {\n          if (buf[i] !== systemObj.pong.key[i]) {\n            return;\n          }\n        }\n        this.removePongObserver(callback);\n        const _upper: any =\n          ((systemObj.pong.key[0] << (8 * 3)) >>> 0) +\n          ((systemObj.pong.key[1] << (8 * 2)) >>> 0) +\n          ((systemObj.pong.key[2] << (8 * 1)) >>> 0) +\n          ((systemObj.pong.key[3] << (8 * 0)) >>> 0);\n        const _lower: any =\n          ((systemObj.pong.key[4] << (8 * 3)) >>> 0) +\n          ((systemObj.pong.key[5] << (8 * 2)) >>> 0) +\n          ((systemObj.pong.key[6] << (8 * 1)) >>> 0) +\n          ((systemObj.pong.key[7] << (8 * 0)) >>> 0);\n        const obnizJsPingUnixtime: any = _upper * Math.pow(2, 32) + _lower;\n        const obnizJsPongUnixtime: any = new Date().getTime();\n        const allTime: any = obnizJsPongUnixtime - obnizJsPingUnixtime;\n        const timeJs2server: any = systemObj.pong.pingServerTime - obnizJsPingUnixtime;\n        const timeServer2Obniz: any = systemObj.pong.obnizTime - systemObj.pong.pingServerTime;\n        const timeObniz2Server: any = systemObj.pong.pongServerTime - systemObj.pong.obnizTime;\n        const timeServer2Js: any = obnizJsPongUnixtime - systemObj.pong.pongServerTime;\n        const str: any = `ping ${allTime}ms (js --[${timeJs2server}ms]--> server --[${timeServer2Obniz}ms]--> obniz --[${timeObniz2Server}ms]--> server --[${timeServer2Js}ms]--> js)`;\n\n        this.print_debug(str);\n        resolve(str);\n      };\n      this.addPongObserver(callback);\n    });\n  }\n}\n"]}