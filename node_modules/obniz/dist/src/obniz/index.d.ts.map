{"version":3,"sources":["../src/obniz/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,WAAW,MAAM,eAAe,CAAC;AAExC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,cAAM,KAAM,SAAQ,WAAW;IAC7B;;OAEG;IACH,OAAc,QAAQ,kBAAY;IAClC,OAAc,YAAY,sBAAgB;IAE1C;;;OAGG;IACH,WAAkB,GAAG,oBAEpB;CACF;AAED,SAAS,KAAK,CAAC;AAiCf,OAAO,QAAQ,MAAM,YAAY,CAAC","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore\n */\n\nimport { M5StackBasic } from \"./libs/hw/m5stack_basic\";\nimport { M5StickC } from \"./libs/hw/m5stickc\";\nimport ObnizDevice from \"./ObnizDevice\";\n\n/**\n * obniz class is the abstract version of obniz Board hardware within JavaScript.\n *\n * By providing obniz id and instantiating it, you can control obniz Board and the connected parts\n * without the details of websocket api.\n *\n *\n * ### obnizOS version and obniz.js version\n *\n * obniz cloud compare your obniz.js version and target device obnizOS version.\n * If your js sdk major number is below from OS version (eg obniz.js is 2.0.0 and obnizOS is 3.0.0) then obniz cloud will alert when connection established.\n * It will work somehow but some functions looses compatibility.\n *\n * ### one device from two program\n *\n * obniz cloud accept multiple websocket connection from multiple obniz.js at same time.\n * every commands from obniz.js will passed to a device and every command from a device will be dispatched to every obniz.js connected to the cloud.\n *\n * But If one of obniz.js established a connection to a device, then target device will send datas only via local connect. So other connected obniz.js only can send datas and never receive datas from a device.\n *\n * If you'd like to receive, you need to specify `local_connect: false` at all of obniz.js to disable local connect.\n *\n */\nclass Obniz extends ObnizDevice {\n  /**\n   * M5StickC device\n   */\n  public static M5StickC = M5StickC;\n  public static M5StackBasic = M5StackBasic;\n\n  /**\n   * obniz REST api class\n   * @returns {ObnizApi}\n   */\n  public static get api() {\n    return ObnizApi;\n  }\n}\n\nexport = Obniz;\n\n/*===================*/\n/* Utils */\n/*===================*/\ntry {\n  if (typeof window !== \"undefined\") {\n    if (window && window.parent && window.parent.userAppLoaded) {\n      window.parent.userAppLoaded(window);\n    }\n\n    function showObnizDebugError(err: any) {\n      // eslint-disable-line\n      if (window.parent && window.parent.logger) {\n        window.parent.logger.onObnizError(err);\n      }\n    }\n  }\n} catch (e) {\n  if (e instanceof DOMException) {\n    // cross origin iframe\n  } else {\n    console.error(e);\n  }\n}\n\n/*===================*/\n/* ReadParts */\n/*===================*/\n/**\n * @ignore\n */\nimport requireContext = require(\"./libs/webpackReplace/require-context\");\nimport ObnizApi from \"./ObnizApi\";\n\nrequire.context = requireContext.default;\nif (requireContext.setBaseDir) {\n  requireContext.setBaseDir(__dirname);\n}\n\n/**\n * @ignore\n */\nconst context: any = require.context(\"../parts\", true, /\\.js$/);\n/* webpack loader */\nfor (const path of context.keys()) {\n  const anParts: any = context(path);\n  if (anParts.info) {\n    Obniz.PartsRegistrate(anParts);\n  } else if (anParts.default.info) {\n    // for ts \"export default\"\n    Obniz.PartsRegistrate(anParts.default);\n  }\n}\n"]}