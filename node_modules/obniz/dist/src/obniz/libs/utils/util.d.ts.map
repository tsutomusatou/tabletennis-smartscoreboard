{"version":3,"sources":["../src/obniz/libs/utils/util.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,cAAM,SAAS;IACb;;;;;OAKG;WACW,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAe/C;;;OAGG;WACW,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAalD;;;OAGG;WACW,gBAAgB,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,IAAI;IAa7D;;;OAGG;WACW,gBAAgB,CAAC,GAAG,EAAE,MAAM;IAK1C;;;;OAIG;WACW,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,GAAE,OAAe,GAAG,MAAM,EAAE;IAY3E;;;;;;OAMG;WACW,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAQrF,KAAK,EAAE,GAAG,CAAC;IACX,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;gBAEb,KAAK,EAAE,GAAG;IAItB;;;;;;;;;;;;;OAaG;IACI,mBAAmB,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;CAoBzD;AAED,eAAe,SAAS,CAAC","file":"util.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore\n */\nclass ObnizUtil {\n  /**\n   * @ignore\n   * @param params\n   * @param keys\n   * @private\n   */\n  public static _keyFilter(params: any, keys: any) {\n    let filterdParams: any = {};\n    if (typeof params !== \"object\") {\n      return filterdParams;\n    }\n    filterdParams = Object.keys(params)\n      .filter((key) => keys.includes(key))\n      .reduce((obj: any, key) => {\n        obj[key] = params[key];\n        return obj;\n      }, {});\n\n    return filterdParams;\n  }\n\n  /**\n   * @ignore\n   * @return {String} key name of not found.\n   */\n  public static _requiredKeys(params: any, keys: any) {\n    if (typeof params !== \"object\") {\n      return keys[0];\n    }\n\n    for (const index in keys) {\n      if (!(keys[index] in params)) {\n        return keys[index];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * convert from data array to string\n   * @param data\n   */\n  public static dataArray2string(data: number[]): string | null {\n    let string: any = null;\n    try {\n      const StringDecoder: any = require(\"string_decoder\").StringDecoder;\n      if (StringDecoder) {\n        string = new StringDecoder(\"utf8\").write(Buffer.from(data));\n      }\n    } catch (e) {\n      // this.obniz.error(e);\n    }\n    return string;\n  }\n\n  /**\n   * convert from string to data array\n   * @param str\n   */\n  public static string2dataArray(str: string) {\n    const buf: any = Buffer.from(str);\n    return [...buf];\n  }\n\n  /**\n   * @ignore\n   * @param data\n   * @param schema\n   */\n  public static hexToBinary(data: string, reverse: boolean = false): number[] {\n    const array: number[] = [];\n    const hex: string = data.toLowerCase().replace(/[^0-9abcdef]/g, \"\");\n    for (let i = 0; i < hex.length / 2; i++) {\n      array[i] = parseInt(hex[i * 2] + hex[i * 2 + 1], 16);\n    }\n    if (reverse) {\n      array.reverse();\n    }\n    return array;\n  }\n\n  /**\n   * @ignore\n   * @param min\n   * @param max\n   * @param variable_name\n   * @param variable\n   */\n  public static assertNumber(min: number, max: number, variable_name: string, variable: number) {\n    if (!(min <= variable && variable <= max)) {\n      throw new Error(\n        `${variable_name} is out of range.Input value : ${variable} .value range [ ${min} <= ${variable_name} <= ${max} ]`,\n      );\n    }\n  }\n\n  public obniz: any;\n  public width: any;\n  public height: any;\n  public createCanvas: any;\n\n  constructor(obniz: any) {\n    this.obniz = obniz;\n  }\n\n  /**\n   * This creates a Canvas context.\n   * It will add a canvas dom to body(in html).\n   *\n   * ```javascript\n   * // Example\n   * const ctx = obniz.util.createCanvasContext(128, 64);\n   * ctx.font = \"9px sans-serif\";\n   * ctx.fillText('Hello', 0, 7);\n   * ```\n   *\n   * @param width\n   * @param height\n   */\n  public createCanvasContext(width: number, height: number) {\n    if (this.obniz.isNode) {\n      try {\n        const { createCanvas } = require(\"canvas\");\n        return createCanvas(this.width, this.height);\n      } catch (e) {\n        throw new Error(\"obniz.js require node-canvas to draw rich contents. see more detail on docs\");\n      }\n    } else {\n      const canvas: any = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      (canvas.style as any)[\"-webkit-font-smoothing\"] = \"none\";\n      const body: any = document.getElementsByTagName(\"body\")[0];\n      body.appendChild(canvas);\n\n      const ctx: any = canvas.getContext(\"2d\");\n      return ctx;\n    }\n  }\n}\n\nexport default ObnizUtil;\n"]}