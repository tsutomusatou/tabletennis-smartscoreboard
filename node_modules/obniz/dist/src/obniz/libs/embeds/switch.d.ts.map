{"version":3,"sources":["../src/obniz/libs/embeds/switch.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;GAEG;AACH,aAAK,gBAAgB,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC;AAC3D,aAAK,mBAAmB,GAAG,CAAC,MAAM,EAAE,gBAAgB,KAAK,IAAI,CAAC;AAE9D;;;GAGG;AACH,MAAM,CAAC,OAAO,OAAO,WAAY,SAAQ,iBAAiB;IACxD;;OAEG;IACI,KAAK,EAAG,gBAAgB,CAAC;IAEhC;;;;;;;;;;;;;;;OAeG;IACI,QAAQ,CAAC,EAAE,mBAAmB,CAAC;gBAE1B,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAUjC;;;;;;;;;;;;OAYG;IACU,OAAO,IAAI,OAAO,CAAC,gBAAgB,CAAC;IAOjD;;;;;;;;;;;;;;;;;;;OAmBG;IACU,SAAS,CAAC,KAAK,EAAE,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC;IASvD,cAAc,IAAI,MAAM;IAI/B,SAAS,CAAC,MAAM;CAGjB","file":"switch.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport { ComponentAbstract } from \"../ComponentAbstact\";\n\n/**\n * switch state\n */\ntype ObnizSwitchState = \"none\" | \"push\" | \"left\" | \"right\";\ntype ObnizSwitchCallback = (result: ObnizSwitchState) => void;\n\n/**\n * The embedded switch on obniz Board.\n * @category Embeds\n */\nexport default class ObnizSwitch extends ComponentAbstract {\n  /**\n   * current switch state\n   */\n  public state!: ObnizSwitchState;\n\n  /**\n   * When the switch state changes, this callback function will be called.\n   * If you press and release a switch, it callbacks twice (\"push\" and \"none\").\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.display.clear();\n   * obniz.switch.onchange = function(state) {\n   *   if (state === \"push\") {\n   *     obniz.display.print(\"Pushing\");\n   *   } else {\n   *     obniz.display.clear();\n   *   }\n   * }\n   * ```\n   */\n  public onchange?: ObnizSwitchCallback;\n\n  constructor(obniz: any, info: any) {\n    super(obniz);\n    this.on(\"/response/switch/change\", (obj) => {\n      this.state = obj.state;\n      this.Obniz._runUserCreatedFunction(this.onchange, this.state);\n    });\n\n    this._reset();\n  }\n\n  /**\n   * This determines the current status of the switch.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.display.clear();\n   * var state = await obniz.switch.getWait();\n   * if (state === \"push\") {\n   *   obniz.display.print(\"Now Pressed\");\n   * }\n   * ```\n   *\n   */\n  public async getWait(): Promise<ObnizSwitchState> {\n    const obj: any = {};\n    obj.switch = \"get\";\n    const data = await this.sendAndReceiveJsonWait(obj, \"/response/switch/change\");\n    return data.state;\n  }\n\n  /**\n   * With this you wait until the switch status changes to state.\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.switch.stateWait(\"push\");\n   * console.log(\"switch pushed\");\n   *\n   * await obniz.switch.stateWait(\"left\");\n   * console.log(\"switch left\");\n   *\n   * await obniz.switch.stateWait(\"right\");\n   * console.log(\"switch right\");\n   *\n   * await obniz.switch.stateWait(\"none\");\n   * console.log(\"switch none\");\n   * ```\n   *\n   * @param state state for wait\n   */\n  public async stateWait(state: ObnizSwitchState): Promise<void> {\n    while (1) {\n      const data = await this.receiveJsonWait(\"/response/switch/change\");\n      if (state === data.state) {\n        return;\n      }\n    }\n  }\n\n  public schemaBasePath(): string {\n    return \"switch\";\n  }\n\n  protected _reset() {\n    this.state = \"none\";\n  }\n}\n"]}