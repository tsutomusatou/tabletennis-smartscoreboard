{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleCharacteristic.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,OAAO,8BAA8B,MAAM,kCAAkC,CAAC;AAE9E,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,mBAAmB,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAEvH;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,iBAAkB,SAAQ,8BAA8B,CAAC,UAAU,EAAE,aAAa,CAAC;IACtG;;;;;;;;;;;;OAYG;IACI,iBAAiB,CAAC,EAAE,CAAC,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC;IAE/E;;;;;;;;;;OAUG;IACI,gBAAgB,CAAC,EAAE,CAAC,OAAO,EAAE,gBAAgB,KAAK,IAAI,CAAC;IAE9D;;OAEG;IACH,IAAI,UAAU,IAAI,MAAM,GAAG,IAAI,CAE9B;IAED;;OAEG;IACH,IAAI,aAAa,IAAI,GAAG,CAEvB;IAED;;OAEG;IACH,IAAI,YAAY,IAAI,MAAM,GAAG,IAAI,CAEhC;IAED;;OAEG;IACI,OAAO,EAAG,UAAU,CAAC;IAE5B;;OAEG;IACH,IAAI,WAAW,IAAI,aAAa,EAAE,CAEjC;IAED;;OAEG;IACI,UAAU,EAAE,mBAAmB,EAAE,CAAC;IAEzC,OAAO,CAAC,aAAa,CAAM;IAC3B,OAAO,CAAC,oBAAoB,CAAM;IAElC;;;;;;;;;;;;;;;;;;;;;;;OAuBG;gBACS,GAAG,EAAE,uBAAuB;IAaxC;;;OAGG;IACI,aAAa,CAAC,IAAI,EAAE,mBAAmB,GAAG,aAAa,GAAG,aAAa;IAI9E;;;OAGG;IACI,aAAa,CAAC,IAAI,EAAE,IAAI,GAAG,aAAa,GAAG,IAAI;IAItD;;OAEG;IACI,MAAM;IAab;;OAEG;IACI,WAAW;IASlB;;;OAGG;IACI,WAAW,CAAC,KAAK,EAAE,mBAAmB;IAM7C;;;OAGG;IACI,cAAc,CAAC,KAAK,EAAE,mBAAmB;IAMhD;;;OAGG;IACI,aAAa,CAAC,KAAK,EAAE,GAAG;IAE/B;;;OAGG;IACI,gBAAgB,CAAC,KAAK,EAAE,GAAG;IAElC;;;;OAIG;IACI,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG;IAuBrC;;;;;OAKG;IACI,YAAY,CAAC,YAAY,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,GAAG;IAMhE;;;OAGG;IACI,cAAc;IAKrB;;;OAGG;IACI,SAAS;IAEhB;;;OAGG;IACI,WAAW;IAElB;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,MAAM;CAKd","file":"bleCharacteristic.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleDescriptor from \"./bleDescriptor\";\nimport BleLocalAttributeAbstract from \"./bleLocalAttributeAbstract\";\nimport BleLocalValueAttributeAbstract from \"./bleLocalValueAttributeAbstract\";\nimport BleRemoteService from \"./bleRemoteService\";\nimport BleService from \"./bleService\";\nimport { BleAttributePropery, BleCharacteristicDefine, BleDescriptorDefine, BleDeviceAddress, UUID } from \"./bleTypes\";\n\n/**\n * @category Use as Peripheral\n */\nexport default class BleCharacteristic extends BleLocalValueAttributeAbstract<BleService, BleDescriptor> {\n  /**\n   * This is a callback function used when characteristic is read by an external device.\n   *\n   * ```javascript\n   * characteristic.onwritefromremote = function(address, newvalue){\n   *    console.log(\"remote address :\",address);\n   *    console.log(\"remote data :\",newvalue);\n   * }\n   * ```\n   *\n   * @param onwritefromremote.address central device address\n   * @param onwritefromremote.data written data\n   */\n  public onwritefromremote?: (address: BleDeviceAddress, data: number[]) => void;\n\n  /**\n   * This is a callback function used when characteristic is read by an external device.\n   *\n   * ```javascript\n   * characteristic.onreadfromremote = function(address){\n   *   console.log(\"remote address :\",address);\n   * }\n   * ```\n   *\n   * @param onreadfromremote.address central device address\n   */\n  public onreadfromremote?: (address: BleDeviceAddress) => void;\n\n  /**\n   * @ignore\n   */\n  get parentName(): string | null {\n    return \"service\";\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenClass(): any {\n    return BleDescriptor;\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenName(): string | null {\n    return \"descriptors\";\n  }\n\n  /**\n   * Service instance\n   */\n  public service!: BleService;\n\n  /**\n   * Get descriptor array\n   */\n  get descriptors(): BleDescriptor[] {\n    return this.children;\n  }\n\n  /**\n   * @ignore\n   */\n  public properties: BleAttributePropery[];\n  // public permissions: any;\n  private _maxValueSize: any;\n  private _updateValueCallback: any;\n\n  /**\n   * Create Characteristics\n   *\n   * ```javascript\n   * await obniz.ble.initWait();\n   * var characteristic = new obniz.ble.characteristic({\n   *      \"uuid\" : \"FFF1\",\n   *      \"properties\" : [\"read\",\"write\"],  // read, write, notify\n   *      \"data\" : [0x0e, 0x00, ...],     //data for dataArray or  text for string\n   *      \"descriptors\" : [{\n   *          \"uuid\" : \"2901\",   //Characteristic User Description\n   *          \"text\" : \"hello world characteristic\",    //data for dataArray or  text for string\n   *      }]\n   * });\n   *\n   * var service = new obniz.ble.service({\n   *                \"uuid\" : \"fff0\",\n   *                \"characteristics\" : [ characteristic ]\n   * });\n   * obniz.ble.peripheral.addService(service);\n   * ```\n   *\n   * @param obj\n   */\n  constructor(obj: BleCharacteristicDefine) {\n    super(obj);\n\n    this._maxValueSize = null;\n    this._updateValueCallback = null;\n\n    if (!Array.isArray(obj.properties) && typeof obj.properties === \"string\") {\n      this.properties = [obj.properties as BleAttributePropery];\n    } else {\n      this.properties = obj.properties || [];\n    }\n  }\n\n  /**\n   * Add new descriptor\n   * @param desc\n   */\n  public addDescriptor(desc: BleDescriptorDefine | BleDescriptor): BleDescriptor {\n    return this.addChild(desc);\n  }\n\n  /**\n   * Get descriptor\n   * @param uuid\n   */\n  public getDescriptor(uuid: UUID): BleDescriptor | null {\n    return this.getChild(uuid);\n  }\n\n  /**\n   * @ignore\n   */\n  public toJSON() {\n    const obj: any = super.toJSON();\n\n    if (this.properties.length > 0) {\n      obj.properties = this.properties;\n    }\n\n    // if (this.permissions.length > 0) {\n    //   obj.permissions = this.permissions;\n    // }\n    return obj;\n  }\n\n  /**\n   * @ignore\n   */\n  public toBufferObj() {\n    const obj: any = super.toBufferObj();\n\n    obj.properties = this.properties;\n    obj.secure = [];\n\n    return obj;\n  }\n\n  /**\n   * Add property\n   * @param param\n   */\n  public addProperty(param: BleAttributePropery) {\n    if (!this.properties.includes(param)) {\n      this.properties.push(param);\n    }\n  }\n\n  /**\n   * Remove property\n   * @param param\n   */\n  public removeProperty(param: BleAttributePropery) {\n    this.properties = this.properties.filter((elm: any) => {\n      return elm !== param;\n    });\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public addPermission(param: any) {}\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public removePermission(param: any) {}\n\n  /**\n   * @ignore\n   * @param name\n   * @param params\n   */\n  public emit(name: any, ...params: any) {\n    const result: any = super.emit(name, ...params);\n    if (result) {\n      return result;\n    }\n    switch (name) {\n      case \"subscribe\":\n        this._onSubscribe(...(params as [any, any]));\n        return true;\n      case \"unsubscribe\":\n        this._onUnsubscribe();\n        return true;\n      case \"notify\":\n        this._onNotify();\n        return true;\n      case \"indicate\":\n        this._onIndicate();\n        return true;\n      default:\n        throw new Error(\"unknown emit\");\n    }\n  }\n\n  /**\n   * @ignore\n   * @param maxValueSize\n   * @param updateValueCallback\n   * @private\n   */\n  public _onSubscribe(maxValueSize: any, updateValueCallback?: any) {\n    // console.log('_onSubscribe');\n    this._maxValueSize = maxValueSize;\n    this._updateValueCallback = updateValueCallback;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _onUnsubscribe() {\n    this._maxValueSize = null;\n    this._updateValueCallback = null;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _onNotify() {}\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _onIndicate() {}\n\n  /**\n   * This sends notify to the connected central.\n   *\n   * ```javascript\n   * var characteristic = new obniz.ble.characteristic({\n   *   uuid: 'FFF1',\n   *   data: [0x0e, 0x00],\n   *   properties : [\"read\",\"write\",\"notify\"],  // add notify properties\n   * });\n   *\n   *  var service = new obniz.ble.service({\n   *   uuid: 'FFF0',\n   *   characteristics: [characteristic],\n   * });\n   * obniz.ble.peripheral.addService(service);\n   *\n   *\n   * // after central connected\n   * characteristic.notify();\n   * ```\n   */\n  public notify() {\n    if (this._updateValueCallback) {\n      this._updateValueCallback(Buffer.from(this.data));\n    }\n  }\n}\n"]}