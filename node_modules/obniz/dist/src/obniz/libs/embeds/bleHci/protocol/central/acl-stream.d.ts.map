{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAGH,OAAO,YAAY,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,GAAG,MAAM,QAAQ,CAAC;AACzB,OAAO,GAAG,MAAM,OAAO,CAAC;AAExB,aAAK,mBAAmB,GAAG,MAAM,GAAG,KAAK,GAAG,SAAS,GAAG,aAAa,CAAC;AAEtE;;;GAGG;AACH,MAAM,CAAC,OAAO,OAAO,SAAU,SAAQ,YAAY,CAAC,mBAAmB,CAAC;IAC/D,IAAI,EAAE,GAAG,CAAC;IACV,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,GAAG,CAAC;IACV,eAAe,EAAE,GAAG,CAAC;IACrB,cAAc,EAAE,GAAG,CAAC;gBAGzB,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,MAAM,EACd,gBAAgB,EAAE,GAAG,EACrB,YAAY,EAAE,GAAG,EACjB,iBAAiB,EAAE,GAAG,EACtB,aAAa,EAAE,GAAG;IAiBb,YAAY,EAAE,GAAG,CAAY;IAEvB,WAAW,CAAC,OAAO,CAAC,EAAE,GAAG;IAM/B,gBAAgB,CAAC,OAAO,CAAC,EAAE,GAAG;IAM9B,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IAInB,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAKzE,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAQ9B,GAAG;IAIG,YAAY,CAAC,GAAG,EAAE,GAAG;IASrB,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM;IAMhE,SAAS;IAIT,QAAQ;IAKR,YAAY,CAAC,MAAM,EAAE,GAAG;IAE/B,OAAO,CAAC,KAAK;CAGd","file":"acl-stream.d.ts","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\n// var debug = require('debug')('acl-att-stream');\n\nimport EventEmitter from \"eventemitter3\";\n\nimport { Handle } from \"../../bleTypes\";\nimport Hci from \"../hci\";\nimport Smp from \"./smp\";\n\ntype AclStreamEventTypes = \"data\" | \"end\" | \"encrypt\" | \"encryptFail\";\n\n/**\n *\n * @ignore\n */\nexport default class AclStream extends EventEmitter<AclStreamEventTypes> {\n  public _hci: Hci;\n  public _handle: Handle;\n  public _smp: Smp;\n  public onSmpFailBinded: any;\n  public onSmpEndBinded: any;\n\n  constructor(\n    hci: Hci,\n    handle: Handle,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n  ) {\n    super();\n    this._hci = hci;\n    this._handle = handle;\n\n    this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress);\n    this._smp.debugHandler = (text: string) => {\n      this.debug(text);\n    };\n\n    this.onSmpFailBinded = this.onSmpFail.bind(this);\n    this.onSmpEndBinded = this.onSmpEnd.bind(this);\n\n    this._smp.on(\"fail\", this.onSmpFailBinded);\n    this._smp.on(\"end\", this.onSmpEndBinded);\n  }\n  public debugHandler: any = () => {};\n\n  public async encryptWait(options?: any) {\n    let encrpytResult = null;\n    encrpytResult = await this._smp.pairingWait(options);\n    return encrpytResult;\n  }\n\n  public setEncryptOption(options?: any) {\n    let encrpytResult = null;\n    encrpytResult = this._smp.setPairingOption(options);\n    return encrpytResult;\n  }\n\n  public write(cid: any, data: any) {\n    this._hci.writeAclDataPkt(this._handle, cid, data);\n  }\n\n  public async readWait(cid: any, flag: number, timeout?: number): Promise<Buffer> {\n    const data = await this._hci.readAclStreamWait(this._handle, cid, flag, timeout);\n    return data;\n  }\n\n  public push(cid: number, data: Buffer) {\n    if (data) {\n      this.emit(\"data\", cid, data);\n    } else {\n      this.emit(\"end\");\n    }\n  }\n\n  public end() {\n    this.emit(\"end\");\n  }\n\n  public async onSmpStkWait(stk: any) {\n    const random: any = Buffer.from(\"0000000000000000\", \"hex\");\n    const diversifier: any = Buffer.from(\"0000\", \"hex\");\n\n    const result = await this._hci.startLeEncryptionWait(this._handle, random, diversifier, stk);\n    this.emit(\"encrypt\", result);\n    return result;\n  }\n\n  public async onSmpLtkWait(ltk: any, random: Buffer, diversifier: Buffer) {\n    const result = await this._hci.startLeEncryptionWait(this._handle, random, diversifier, ltk);\n    this.emit(\"encrypt\", result);\n    return result;\n  }\n\n  public onSmpFail() {\n    this.emit(\"encryptFail\");\n  }\n\n  public onSmpEnd() {\n    this._smp.removeListener(\"fail\", this.onSmpFailBinded);\n    this._smp.removeListener(\"end\", this.onSmpEndBinded);\n  }\n\n  public startEncrypt(option: any) {}\n\n  private debug(text: any) {\n    this.debugHandler(`AclStream: ${text}`);\n  }\n}\n"]}