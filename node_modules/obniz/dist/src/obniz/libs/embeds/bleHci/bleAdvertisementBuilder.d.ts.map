{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleAdvertisementBuilder.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAE7E;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,uBAAuB;IAC1C,SAAS,CAAC,IAAI,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,EAAE,CAAA;KAAE,CAAC;gBAEhC,IAAI,EAAE,oBAAoB,GAAG,mBAAmB;IAqBrD,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;IAInC,MAAM,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE;IAI9B,KAAK,IAAI,MAAM,EAAE;IAkBjB,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAU1C,qBAAqB,CAAC,IAAI,EAAE,MAAM;IAIlC,oBAAoB,CAAC,IAAI,EAAE,MAAM;IAIjC,2BAA2B,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;IAQ/D,OAAO,CAAC,IAAI,EAAE,IAAI;IAMlB,WAAW,CAAC,IAAI,EAAE,IAAI;IAatB,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM;IAiBxE,gCAAgC;IAIhC,gCAAgC;IAIhC,wBAAwB;IAIxB,wBAAwB;IAIxB,kBAAkB;IAIzB,SAAS,CAAC,cAAc,CAAC,IAAI,EAAE,oBAAoB;IAsBnD,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM;CAKhC","file":"bleAdvertisementBuilder.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleHelper from \"./bleHelper\";\nimport { BleAdvertisementData, BleScanResponseData, UUID } from \"./bleTypes\";\n\n/**\n * @category Use as Peripheral\n */\nexport default class BleAdvertisementBuilder {\n  protected rows: { [key: number]: number[] };\n\n  constructor(json: BleAdvertisementData | BleScanResponseData) {\n    this.rows = {};\n\n    if (json) {\n      if (json.localName) {\n        this.setCompleteLocalName(json.localName);\n      }\n      if (json.manufacturerData && json.manufacturerData.companyCode && json.manufacturerData.data) {\n        this.setManufacturerSpecificData(json.manufacturerData.companyCode, json.manufacturerData.data);\n      }\n      if (json.serviceUuids) {\n        for (const uuid of json.serviceUuids) {\n          this.setUuid(uuid);\n        }\n      }\n    }\n    if (typeof this.extendEvalJson === \"function\") {\n      this.extendEvalJson(json);\n    }\n  }\n\n  public setRow(type: number, data: number[]) {\n    this.rows[type] = data;\n  }\n\n  public getRow(type: number): number[] {\n    return this.rows[type] || [];\n  }\n\n  public build(): number[] {\n    const data: any = [];\n    for (const key in this.rows) {\n      if (this.rows[key].length === 0) {\n        continue;\n      }\n\n      data.push(this.rows[key].length + 1);\n      data.push(parseInt(key));\n      Array.prototype.push.apply(data, this.rows[key]);\n    }\n    if (data.length > 31) {\n      throw new Error(\"Too large data. Advertise/ScanResponse data are must be less than 32 byte.\");\n    }\n\n    return data;\n  }\n\n  public setStringData(type: number, string: string) {\n    const data: any = [];\n\n    for (let i = 0; i < string.length; i++) {\n      data.push(string.charCodeAt(i));\n    }\n\n    this.setRow(type, data);\n  }\n\n  public setShortenedLocalName(name: string) {\n    this.setStringData(0x08, name);\n  }\n\n  public setCompleteLocalName(name: string) {\n    this.setStringData(0x09, name);\n  }\n\n  public setManufacturerSpecificData(companyCode: number, data: number[]) {\n    const row: any = [];\n    row.push(companyCode & 0xff);\n    row.push((companyCode >> 8) & 0xff);\n    Array.prototype.push.apply(row, data);\n    this.setRow(0xff, row);\n  }\n\n  public setUuid(uuid: UUID) {\n    const uuidData: any = this.convertUuid(uuid);\n    const type: any = { 16: 0x06, 4: 0x04, 2: 0x02 }[uuidData.length as 16 | 4 | 2];\n    this.setRow(type, uuidData);\n  }\n\n  public convertUuid(uuid: UUID) {\n    const uuidNumeric: any = BleHelper.uuidFilter(uuid);\n    if (uuidNumeric.length !== 32 && uuidNumeric.length !== 8 && uuidNumeric.length !== 4) {\n      throw new Error(\"BLE uuid must be 16/32/128 bit . (example: c28f0ad5-a7fd-48be-9fd0-eae9ffd3a8bb for 128bit)\");\n    }\n\n    const data: any = [];\n    for (let i = uuidNumeric.length; i > 1; i -= 2) {\n      data.push(parseInt(uuidNumeric[i - 2] + uuidNumeric[i - 1], 16));\n    }\n    return data;\n  }\n\n  public setIbeaconData(uuid: UUID, major: number, minor: number, txPower: number) {\n    const data: any = [];\n    data.push(0x02, 0x15); // fixed data\n\n    const uuidData: any = this.convertUuid(uuid);\n    Array.prototype.push.apply(data, uuidData);\n\n    data.push((major >> 8) & 0xff);\n    data.push((major >> 0) & 0xff);\n    data.push((minor >> 8) & 0xff);\n    data.push((minor >> 0) & 0xff);\n    data.push((txPower >> 0) & 0xff);\n\n    this.setManufacturerSpecificData(0x004c, data);\n    return;\n  }\n\n  public setLeLimitedDiscoverableModeFlag() {\n    this.setFlags(0x01);\n  }\n\n  public setLeGeneralDiscoverableModeFlag() {\n    this.setFlags(0x02);\n  }\n\n  public setBrEdrNotSupportedFlag() {\n    this.setFlags(0x04);\n  }\n\n  public setLeBrEdrControllerFlag() {\n    this.setFlags(0x08);\n  }\n\n  public setLeBrEdrHostFlag() {\n    this.setFlags(0x10);\n  }\n\n  protected extendEvalJson(json: BleAdvertisementData) {\n    if (json) {\n      if (json.flags) {\n        if (json.flags.includes(\"limited_discoverable_mode\")) {\n          this.setLeLimitedDiscoverableModeFlag();\n        }\n        if (json.flags.includes(\"general_discoverable_mode\")) {\n          this.setLeGeneralDiscoverableModeFlag();\n        }\n        if (json.flags.includes(\"br_edr_not_supported\")) {\n          this.setBrEdrNotSupportedFlag();\n        }\n        if (json.flags.includes(\"le_br_edr_controller\")) {\n          this.setLeBrEdrControllerFlag();\n        }\n        if (json.flags.includes(\"le_br_edr_host\")) {\n          this.setLeBrEdrHostFlag();\n        }\n      }\n    }\n  }\n\n  protected setFlags(flag: number) {\n    const data: any = this.getRow(0x01);\n    data[0] = (data[0] || 0) | flag;\n    this.setRow(0x01, data);\n  }\n}\n"]}