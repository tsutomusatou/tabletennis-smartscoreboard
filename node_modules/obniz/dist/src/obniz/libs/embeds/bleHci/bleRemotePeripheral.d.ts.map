{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleRemotePeripheral.ts"],"names":[],"mappings":"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","file":"bleRemotePeripheral.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\n\nimport EventEmitter from \"eventemitter3\";\nimport ObnizBLE from \"./ble\";\nimport BleHelper from \"./bleHelper\";\nimport BleRemoteService from \"./bleRemoteService\";\nimport { BleDeviceAddress, BleDeviceAddressType, BleDeviceType, BleEventType, UUID } from \"./bleTypes\";\nimport { SmpEncryptOptions } from \"./protocol/central/smp\";\n\n/**\n * The return values are shown below.\n *\n * ```json\n * {\n *   uuid : \"907e1d1d-d85d-497f-9e93-4c813a459cae\", //hex string\n *   major : 1000, //number\n *   minor : 100, //number\n *   power : 300, //number\n *   rssi : -22, //number\n * }\n * ```\n */\nexport interface IBeacon {\n  /**\n   * hex string\n   */\n  uuid: UUID;\n  major: number;\n  minor: number;\n  power: number;\n  rssi: number;\n}\n\n/**\n * connect setting\n */\nexport interface BleConnectSetting {\n  /**\n   * Auto discovery on connection established.\n   *\n   * true : auto discover services/characteristics/descriptors on connection established.\n   * false : don't discover automatically. Please manually.\n   *\n   * Default is true;\n   *\n   * If set false, you should manually discover services/characteristics/descriptors;\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   *   if(peripheral.localName == \"my peripheral\"){\n   *      await peripheral.connectWait({autoDiscovery:false});\n   *      console.log(\"success\");\n   *      await peripheral.discoverAllServicesWait(); //manually discover\n   *      let service = peripheral.getService(\"1800\");\n   *\n   *   }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   *\n   */\n  autoDiscovery?: boolean;\n\n  pairingOption?: BlePairingOptions;\n}\n\n/**\n * Pairing options\n */\nexport interface BlePairingOptions extends SmpEncryptOptions {\n  /**\n   * Use pairing keys\n   *\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * const keys = \"xxxxx\";\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   * if(peripheral.localName == \"my peripheral\"){\n   *      peripheral.onconnect = async function(){\n   *          console.log(\"success\");\n   *          await peripheral.pairingWait({keys});  // pairing with stored keys.\n   *\n   *      }\n   *      await peripheral.connectWait();\n   *     }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   */\n  keys?: string;\n\n  /**\n   * Callback function that call on pairing passkey required.\n   *\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * const keys = \"xxxxx\";\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   * if(peripheral.localName == \"my peripheral\"){\n   *      peripheral.onconnect = async function(){\n   *          console.log(\"success\");\n   *          let passkeyCallback = await ()=>{\n   *              let number = prompt(\"Please type passkey code.\"); //HTML prompt\n   *              return number;\n   *          }\n   *          await peripheral.pairingWait({passkeyCallback});  // pairing with user input passkey.\n   *\n   *      }\n   *      await peripheral.connectWait();\n   *     }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   *\n   */\n  passkeyCallback?: () => Promise<number>;\n}\n\n/**\n * @category Use as Central\n */\nexport default class BleRemotePeripheral {\n  /**\n   * It contains all discovered services in a peripheral as an array.\n   * It is discovered when connection automatically.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *   uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(!peripheral) {\n   *     console.log('no such peripheral')\n   *     return;\n   * }\n   * try {\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   for (var service of peripheral.services) {\n   *       console.log(service.uuid)\n   *   }\n   * } catch(e) {\n   *   console.error(e);\n   * }\n   * ```\n   *\n   */\n  get services(): BleRemoteService[] {\n    return this._services;\n  }\n\n  /**\n   * BLE address\n   */\n  public address: BleDeviceAddress;\n\n  /**\n   * This returns connection state as boolean.\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait();\n   * var target = {\n   *     uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   *\n   * console.log(peripheral.connected) // => false\n   * ```\n   *\n   */\n  public connected: boolean;\n\n  /**\n   *\n   */\n  public device_type: BleDeviceType | null;\n\n  /**\n   *\n   */\n  public address_type: BleDeviceAddressType | null;\n\n  /**\n   *\n   */\n  public ble_event_type: BleEventType | null;\n\n  /**\n   * This returns RSSI(dbm) as number.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * obniz.ble.scan.onfind = async (peripheral) => {\n   *  console.log(peripheral.localName, peripheral.rssi); // null, -80\n   * };\n   *\n   * await obniz.ble.scan.startWait();\n   * ```\n   */\n  public rssi: number | null;\n\n  /**\n   * This returns raw advertise data.\n   *\n   * ```javascript\n   *\n   * // Javascript Example\n   *  await obniz.ble.initWait();\n   *  var target = {\n   *   uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   *\n   * console.log(peripheral.adv_data)\n   * ```\n   *\n   */\n  public adv_data!: number[];\n\n  /**\n   * This returns raw scan response data.\n   *\n   * ```javascript\n   *\n   * // Javascript Example\n   *  await obniz.ble.initWait();\n   *  var target = {\n   *   uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   *\n   * console.log(peripheral.adv_data)\n   * console.log(peripheral.scan_resp)\n   * ```\n   *\n   */\n  public scan_resp: number[] | null;\n\n  /**\n   * This returns local name if the peripheral has it.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *  uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   *\n   * console.log(peripheral.localName)\n   * ```\n   */\n  public localName: string | null;\n\n  /**\n   * This returns iBeacon data if the peripheral has it. If none, it will return null.\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait();\n   * var target = {\n   *  uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   *\n   * console.log(peripheral.iBeacon)\n   * ```\n   */\n  public iBeacon: IBeacon | null;\n\n  /**\n   * This function is called when connection succeeds.\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait();\n   * obniz.ble.scan.onfind = function(peripheral){\n   *   if(peripheral.localName == \"my peripheral\"){\n   *     peripheral.onconnect = function(){\n   *       console.log(\"success\");\n   *     }\n   *      await peripheral.connectWait();\n   *    }\n   * }\n   * await obniz.ble.scan.startWait();\n   *\n   * ```\n   */\n  public onconnect?: () => void;\n\n  /**\n   * This function is called when a connected peripheral is disconnected or first connection establish was failed.\n   *\n   * ```javascript\n   * // Javascript Example\n   *  await obniz.ble.initWait();\n   *  obniz.ble.scan.onfind = function(peripheral){\n   *   if(peripheral.localName == \"my peripheral\"){\n   *       peripheral.onconnect = function(){\n   *           console.log(\"success\");\n   *       }\n   *       peripheral.ondisconnect = function(reason){\n   *           console.log(\"closed\", reason);\n   *       }\n   *       peripheral.connect();\n   *   }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   */\n  public ondisconnect?: (reason?: any) => void;\n\n  /**\n   * Raw data of advertisement\n   *\n   */\n  public advertise_data_rows!: any;\n\n  /**\n   * @ignore\n   */\n  public ondiscoverservice?: (child: any) => void;\n\n  /**\n   * @ignore\n   */\n  public ondiscoverservicefinished?: (children: any) => void;\n\n  /**\n   * This gets called with an error message when some kind of error occurs.\n   */\n  public onerror?: (err: any) => void;\n\n  /**\n   * @ignore\n   */\n  public obnizBle: ObnizBLE;\n\n  /**\n   * @ignore\n   */\n  public _connectSetting: BleConnectSetting = {};\n\n  /**\n   * Indicating this peripheral is found by scan or set from software.\n   * @ignore\n   */\n  public discoverdOnRemote: boolean | undefined = undefined;\n\n  protected keys: any;\n  protected _services: BleRemoteService[];\n  protected emitter: EventEmitter;\n\n  constructor(obnizBle: ObnizBLE, address: BleDeviceAddress) {\n    this.obnizBle = obnizBle;\n    this.address = address;\n    this.connected = false;\n\n    this.device_type = null;\n    this.address_type = null;\n    this.ble_event_type = null;\n    this.rssi = null;\n    // this.adv_data = null;\n    this.scan_resp = null;\n    this.localName = null;\n    this.iBeacon = null;\n\n    this.keys = [\"device_type\", \"address_type\", \"ble_event_type\", \"rssi\", \"adv_data\", \"scan_resp\"];\n\n    this._services = [];\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * @ignore\n   * @return {String} json value\n   */\n  public toString() {\n    return JSON.stringify({\n      address: this.address,\n      addressType: this.address_type,\n      advertisement: this.adv_data,\n      scanResponse: this.scan_resp,\n      rssi: this.rssi,\n    });\n  }\n\n  /**\n   * @ignore\n   * @param dic\n   */\n  public setParams(dic: any) {\n    this.advertise_data_rows = null;\n    for (const key in dic) {\n      if (dic.hasOwnProperty(key) && this.keys.includes(key)) {\n        (this as any)[key] = dic[key];\n      }\n    }\n    this.analyseAdvertisement();\n  }\n\n  /**\n   *  @deprecated As of release 3.5.0, replaced by {@link #connectWait()}\n   */\n  public connect(setting?: BleConnectSetting) {\n    this.connectWait(); // background\n  }\n\n  /**\n   * This connects obniz to the peripheral.\n   * If ble scanning is undergoing, scan will be terminated immidiately.\n   *\n   * It throws when connection establish failed.\n   *\n   * when connection established, all service/characteristics/desriptors will be discovered automatically.\n   * This function will wait until all discovery done.\n   *\n   * About Failures\n   * Connection fails some reasons. You can find reason from thrown error.\n   * Also obniz provide 90 seconds timeout for connection establish.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *    uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(!peripheral) {\n   *    console.log('no such peripheral')\n   *    return;\n   * }\n   * try {\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   * } catch(e) {\n   *   console.log(\"can't connect\");\n   * }\n   * ```\n   *\n   */\n  public async connectWait(setting?: BleConnectSetting): Promise<void> {\n    this._connectSetting = setting || {};\n    this._connectSetting.autoDiscovery = this._connectSetting.autoDiscovery !== false;\n    await this.obnizBle.scan.endWait();\n    await this.obnizBle.centralBindings.connectWait(this.address);\n    if (this._connectSetting.pairingOption) {\n      this.setPairingOption(this._connectSetting.pairingOption);\n    }\n    if (this._connectSetting.autoDiscovery) {\n      await this.discoverAllHandlesWait();\n    }\n\n    this.connected = true;\n    this.obnizBle.Obniz._runUserCreatedFunction(this.onconnect);\n    this.emitter.emit(\"connect\");\n  }\n\n  /**\n   *  @deprecated\n   */\n  public disconnect() {\n    this.disconnectWait(); // background\n  }\n\n  /**\n   * This disconnects obniz from peripheral.\n   *\n   * It throws when failed\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *  uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(!peripheral) {\n   *   console.log('no such peripheral')\n   *   return;\n   * }\n   * try {\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   await peripheral.disconnectWait();\n   *   console.log(\"disconnected\");\n   * } catch(e) {\n   *    console.log(\"can't connect / can't disconnect\");\n   * }\n   * ```\n   */\n  public disconnectWait(): Promise<void> {\n    return new Promise((resolve: any, reject: any) => {\n      // if (!this.connected) {\n      //   resolve();\n      //   return;\n      // }\n      this.emitter.once(\"statusupdate\", (params: any) => {\n        if (params.status === \"disconnected\") {\n          resolve(true); // for compatibility\n        } else {\n          reject(\n            new Error(`cutting connection to peripheral name=${this.localName} address=${this.address} was failed`),\n          );\n        }\n      });\n      this.obnizBle.centralBindings.disconnect(this.address);\n    });\n  }\n\n  /**\n   * It returns a service which having specified uuid in [[services]].\n   * Case is ignored. So aa00 and AA00 are the same.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *   uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(!peripheral) {\n   *   console.log('no such peripheral')\n   *   return;\n   * }\n   * try {\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   var service = peripheral.getService(\"1800\")\n   *   if (!service) {\n   *     console.log(\"service not found\")\n   *     return;\n   *   }\n   *   console.log(service.uuid)\n   * } catch(e) {\n   *   console.error(e);\n   * }\n   * ```\n   * @param uuid\n   */\n  public getService(uuid: UUID): BleRemoteService | null {\n    uuid = BleHelper.uuidFilter(uuid);\n    for (const key in this._services) {\n      if (this._services[key].uuid === uuid) {\n        return this._services[key];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public findService(param: any) {\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\n    return this.getService(serviceUuid);\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public findCharacteristic(param: any) {\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\n    const characteristicUuid: any = BleHelper.uuidFilter(param.characteristic_uuid);\n    const s: any = this.getService(serviceUuid);\n    if (s) {\n      return s.getCharacteristic(characteristicUuid);\n    }\n    return null;\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public findDescriptor(param: any) {\n    const descriptorUuid: any = BleHelper.uuidFilter(param.descriptor_uuid);\n    const c: any = this.findCharacteristic(param);\n    if (c) {\n      return c.getDescriptor(descriptorUuid);\n    }\n    return null;\n  }\n\n  /**\n   * Discover services.\n   *\n   * If connect setting param 'autoDiscovery' is true(default),\n   * services are automatically disvocer on connection established.\n   *\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   * if(peripheral.localName == \"my peripheral\"){\n   *      peripheral.onconnect = async function(){\n   *          console.log(\"success\");\n   *          await peripheral.discoverAllServicesWait(); //manually discover\n   *          let service = peripheral.getService(\"1800\");\n   *      }\n   *      peripheral.connectWait({autoDiscovery:false});\n   *     }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   */\n  public async discoverAllServicesWait(): Promise<BleRemoteService[]> {\n    const serviceUuids = await this.obnizBle.centralBindings.discoverServicesWait(this.address);\n    for (const uuid of serviceUuids) {\n      let child: any = this.getService(uuid);\n      if (!child) {\n        const newService: any = new BleRemoteService({ uuid });\n        newService.parent = this;\n        this._services.push(newService);\n        child = newService;\n      }\n      child.discoverdOnRemote = true;\n\n      this.obnizBle.Obniz._runUserCreatedFunction(this.ondiscoverservice, child);\n    }\n\n    const children: any = this._services.filter((elm: any) => {\n      return elm.discoverdOnRemote;\n    });\n\n    this.obnizBle.Obniz._runUserCreatedFunction(this.ondiscoverservicefinished, children);\n    return children;\n  }\n\n  /**\n   * @ignore\n   */\n  public async discoverAllHandlesWait() {\n    const ArrayFlat: any = (array: any, depth: any) => {\n      const flattend: any = [];\n      (function flat(_array: any, _depth: any) {\n        for (const el of _array) {\n          if (Array.isArray(el) && _depth > 0) {\n            flat(el, _depth - 1);\n          } else {\n            flattend.push(el);\n          }\n        }\n      })(array, Math.floor(depth) || 1);\n      return flattend;\n    };\n    const services: any = await this.discoverAllServicesWait();\n    const charsNest: any = await Promise.all(services.map((s: any) => s.discoverAllCharacteristicsWait()));\n    const chars: any = ArrayFlat(charsNest);\n    const descriptorsNest: any = await Promise.all(chars.map((c: any) => c.discoverAllDescriptorsWait()));\n\n    // eslint-disable-next-line no-unused-vars\n    const descriptors: any = ArrayFlat(descriptorsNest);\n  }\n\n  /**\n   * @ignore\n   * @param notifyName\n   * @param params\n   */\n  public notifyFromServer(notifyName: any, params: any) {\n    this.emitter.emit(notifyName, params);\n    switch (notifyName) {\n      case \"statusupdate\": {\n        if (params.status === \"disconnected\") {\n          const pre = this.connected;\n          this.connected = false;\n          if (pre) {\n            this.obnizBle.Obniz._runUserCreatedFunction(this.ondisconnect, params.reason);\n            this.emitter.emit(\"disconnect\", params.reason);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  public advertisementServiceUuids(): UUID[] {\n    const results: UUID[] = [];\n    this._addServiceUuids(results, this.searchTypeVal(0x02), 16);\n    this._addServiceUuids(results, this.searchTypeVal(0x03), 16);\n    this._addServiceUuids(results, this.searchTypeVal(0x04), 32);\n    this._addServiceUuids(results, this.searchTypeVal(0x05), 32);\n    this._addServiceUuids(results, this.searchTypeVal(0x06), 64);\n    this._addServiceUuids(results, this.searchTypeVal(0x07), 64);\n    return results;\n  }\n\n  /**\n   * Start pairing.\n   * This function return `keys` which you can use next time pairing with same device.\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   * if(peripheral.localName == \"my peripheral\"){\n   *      peripheral.onconnect = async function(){\n   *          console.log(\"success\");\n   *          const keys = await peripheral.pairingWait();\n   *\n   *          // Please store `keys` if you want to bond.\n   *      }\n   *      await peripheral.connectWait();\n   *     }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   *\n   *\n   *\n   * If you have already keys, please use options.keys\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * const keys = \"xxxxx\";\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   * if(peripheral.localName == \"my peripheral\"){\n   *      peripheral.onconnect = async function(){\n   *          console.log(\"success\");\n   *          await peripheral.pairingWait({keys});  // pairing with stored keys.\n   *\n   *      }\n   *      await peripheral.connectWait();\n   *     }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   *\n   * Go to [[BlePairingOptions]] to see more option.\n   * @param options BlePairingOptions\n   */\n  public async pairingWait(options?: BlePairingOptions): Promise<string> {\n    const result = await this.obnizBle.centralBindings.pairingWait(this.address, options);\n    return result;\n  }\n\n  public setPairingOption(options: BlePairingOptions) {\n    this.obnizBle.centralBindings.setPairingOption(this.address, options);\n  }\n\n  protected analyseAdvertisement() {\n    if (!this.advertise_data_rows) {\n      this.advertise_data_rows = [];\n      if (this.adv_data) {\n        for (let i = 0; i < this.adv_data.length; i++) {\n          const length = this.adv_data[i];\n          const arr = new Array(length);\n          for (let j = 0; j < length; j++) {\n            arr[j] = this.adv_data[i + j + 1];\n          }\n          this.advertise_data_rows.push(arr);\n          i = i + length;\n        }\n      }\n      if (this.scan_resp) {\n        for (let i = 0; i < this.scan_resp.length; i++) {\n          const length = this.scan_resp[i];\n          const arr = new Array(length);\n          for (let j = 0; j < length; j++) {\n            arr[j] = this.scan_resp[i + j + 1];\n          }\n          this.advertise_data_rows.push(arr);\n          i = i + length;\n        }\n      }\n      this.setLocalName();\n      this.setIBeacon();\n    }\n  }\n\n  protected searchTypeVal(type: any) {\n    this.analyseAdvertisement();\n    for (let i = 0; i < this.advertise_data_rows.length; i++) {\n      if (this.advertise_data_rows[i][0] === type) {\n        const results: any = [].concat(this.advertise_data_rows[i]);\n        results.shift();\n        return results;\n      }\n    }\n    return undefined;\n  }\n\n  protected setLocalName() {\n    let data: any = this.searchTypeVal(0x09);\n    if (!data) {\n      data = this.searchTypeVal(0x08);\n    }\n    if (!data) {\n      this.localName = null;\n    } else {\n      this.localName = String.fromCharCode.apply(null, data);\n    }\n  }\n\n  protected setIBeacon() {\n    const data: any = this.searchTypeVal(0xff);\n    if (!data || data[0] !== 0x4c || data[1] !== 0x00 || data[2] !== 0x02 || data[3] !== 0x15 || data.length !== 25) {\n      this.iBeacon = null;\n      return;\n    }\n    const uuidData: any = data.slice(4, 20);\n    let uuid: any = \"\";\n    for (let i = 0; i < uuidData.length; i++) {\n      uuid = uuid + (\"00\" + uuidData[i].toString(16)).slice(-2);\n      if (i === 4 - 1 || i === 4 + 2 - 1 || i === 4 + 2 * 2 - 1 || i === 4 + 2 * 3 - 1) {\n        uuid += \"-\";\n      }\n    }\n\n    const major: any = (data[20] << 8) + data[21];\n    const minor: any = (data[22] << 8) + data[23];\n    const power: any = Buffer.from([data[24]]).readInt8(0);\n\n    this.iBeacon = {\n      uuid,\n      major,\n      minor,\n      power,\n      rssi: this.rssi!,\n    };\n  }\n\n  protected _addServiceUuids(results: UUID[], data: any, bit: any) {\n    if (!data) {\n      return;\n    }\n    const uuidLength: any = bit / 8;\n    for (let i = 0; i < data.length; i = i + uuidLength) {\n      const one: any = data.slice(i, i + uuidLength);\n      results.push(ObnizBLE._dataArray2uuidHex(one, true));\n    }\n  }\n}\n"]}