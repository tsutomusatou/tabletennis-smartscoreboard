/// <reference types="node" />
/**
 * @packageDocumentation
 *
 * @ignore
 */
import AclStream from "./acl-stream";
import EventEmitter from "eventemitter3";
import { UUID } from "../../bleTypes";
declare type GattEventTypes = "notification" | "handleConfirmation" | "handleNotify" | "end";
/**
 * @ignore
 */
declare class Gatt extends EventEmitter<GattEventTypes> {
    _address: any;
    _aclStream: AclStream;
    _services: any;
    _characteristics: any;
    _descriptors: any;
    _currentCommand: any;
    _commandQueue: any;
    _mtu: any;
    _security: any;
    _commandPromises: Array<Promise<any>>;
    onAclStreamDataBinded: any;
    onAclStreamEndBinded: any;
    constructor(address: any, aclStream: AclStream);
    encryptWait(options: any): Promise<string>;
    setEncryptOption(options: any): Promise<void>;
    onEnd(reason: any): void;
    exchangeMtuWait(mtu: any): Promise<any>;
    discoverServicesWait(uuids: any): Promise<any>;
    discoverIncludedServicesWait(serviceUuid: UUID, uuids: UUID[]): Promise<any>;
    discoverCharacteristicsWait(serviceUuid: any, characteristicUuids: any): Promise<any>;
    readWait(serviceUuid: any, characteristicUuid: any): Promise<Buffer>;
    writeWait(serviceUuid: any, characteristicUuid: any, data: any, withoutResponse: any): Promise<void>;
    broadcastWait(serviceUuid: any, characteristicUuid: any, broadcast: any): Promise<void>;
    notifyWait(serviceUuid: any, characteristicUuid: any, notify: any): Promise<void>;
    discoverDescriptorsWait(serviceUuid: any, characteristicUuid: any): Promise<any>;
    readValueWait(serviceUuid: any, characteristicUuid: any, descriptorUuid: any): Promise<Buffer>;
    writeValueWait(serviceUuid: any, characteristicUuid: any, descriptorUuid: any, data: any): Promise<void>;
    readHandleWait(handle: any): Promise<Buffer>;
    writeHandleWait(handle: any, data: any, withoutResponse: any): Promise<void>;
    private onAclStreamData;
    private onAclStreamEnd;
    private writeAtt;
    private errorResponse;
    private mtuRequest;
    private readByGroupRequest;
    private readByTypeRequest;
    private readRequest;
    private readBlobRequest;
    private findInfoRequest;
    private writeRequest;
    private prepareWriteRequest;
    private executeWriteRequest;
    private handleConfirmation;
    private longWriteWait;
    private getService;
    private getCharacteristic;
    private getDescriptor;
    private _queueCommand;
    private _runQueueCommand;
    private _serialPromiseQueueWait;
    private _execCommandWait;
    private _execNoRespCommandWait;
}
export default Gatt;
