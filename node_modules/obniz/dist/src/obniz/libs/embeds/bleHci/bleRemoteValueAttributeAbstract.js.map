{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleRemoteValueAttributeAbstract.ts"],"names":[],"mappings":";;;;;AAAA;;;GAGG;AACH,8FAAsE;AAEtE;;GAEG;AACH,MAA8B,+BAG5B,SAAQ,oCAAsD;IAW9D;;;;;OAKG;IACI,YAAY;QACjB,OAAO,KAAK,CAAC,YAAY,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;;OAOG;IACI,cAAc;QACnB,OAAO,KAAK,CAAC,cAAc,EAAE,CAAC;IAChC,CAAC;IAED;;;;;;OAMG;IACI,aAAa,CAAC,GAAW,EAAE,YAAsB;QACtD,OAAO,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;;OAOG;IACI,eAAe,CAAC,GAAW,EAAE,YAAsB;QACxD,OAAO,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAClD,CAAC;CACF;AA1DD,kDA0DC","file":"bleRemoteValueAttributeAbstract.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleRemoteAttributeAbstract from \"./bleRemoteAttributeAbstract\";\n\n/**\n * @category Use as Central\n */\nexport default abstract class BleRemoteValueAttributeAbstract<\n  ParentClass,\n  ChildrenClass\n> extends BleRemoteAttributeAbstract<ParentClass, ChildrenClass> {\n  /**\n   * Callback function when write value finished.\n   */\n  public onwrite?: (result: any) => void;\n\n  /**\n   * Callback function when read value.\n   */\n  public onread?: (data: any) => void;\n\n  /**\n   * Wrapper for [[readWait]] with data converting to text.\n   * It convert  UTF-8 and write binary array to string.\n   *\n   * It throws an error when failed.\n   */\n  public readTextWait(): Promise<string | null> {\n    return super.readTextWait();\n  }\n\n  /**\n   * Wrapper for [[writeWait]] with data converting from number.\n   * It writes data as 1byte.\n   *\n   * It throws an error when failed.\n   *\n   * @param val\n   */\n  public readNumberWait(): Promise<number | null> {\n    return super.readNumberWait();\n  }\n\n  /**\n   * Wrapper for [[writeWait]] with data converting from text.\n   * It convert string to UTF-8 and write binary array.\n   *\n   * It throws an error when failed.\n   * @param str\n   */\n  public writeTextWait(str: string, needResponse?: boolean): Promise<boolean> {\n    return super.writeTextWait(str, needResponse);\n  }\n\n  /**\n   * Wrapper for [[writeWait]] with data converting from number.\n   * It writes data as 1byte.\n   *\n   * It throws an error when failed.\n   *\n   * @param val\n   */\n  public writeNumberWait(val: number, needResponse?: boolean): Promise<boolean> {\n    return super.writeNumberWait(val, needResponse);\n  }\n}\n"]}