{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/smp.ts"],"names":[],"mappings":"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","file":"smp.js","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\nimport EventEmitter from \"eventemitter3\";\n\nimport crypto from \"./crypto\";\nimport Mgmt from \"./mgmt\";\n\nnamespace SMP {\n  export const CID: any = 0x0006;\n\n  export const PAIRING_REQUEST: any = 0x01;\n  export const PAIRING_RESPONSE: any = 0x02;\n  export const PAIRING_CONFIRM: any = 0x03;\n  export const PAIRING_RANDOM: any = 0x04;\n  export const PAIRING_FAILED: any = 0x05;\n  export const ENCRYPT_INFO: any = 0x06;\n  export const MASTER_IDENT: any = 0x07;\n\n  export const UNSPECIFIED: any = 0x08;\n}\n\ntype SmpEventTypes = \"fail\";\n\n/**\n * @ignore\n */\nexport default class Smp extends EventEmitter<SmpEventTypes> {\n  public _aclStream: any;\n  public _mgmt: any;\n  public _iat: any;\n  public _ia: any;\n  public _rat: any;\n  public _ra: any;\n  public _stk: any;\n  public _random: any;\n  public _diversifier: any;\n  public _preq: any;\n  public _pres: any;\n  public _pcnf: any;\n  public _tk: any;\n  public _r: any;\n  private onAclStreamDataBinded: any;\n  private onAclStreamEncryptChangeBinded: any;\n  private onAclStreamLtkNegReplyBinded: any;\n  private onAclStreamEndBinded: any;\n\n  constructor(\n    aclStream: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n    hciProtocol: any,\n  ) {\n    super();\n    this._aclStream = aclStream;\n    this._mgmt = new Mgmt(hciProtocol);\n\n    this._iat = Buffer.from([remoteAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ia = Buffer.from(\n      remoteAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n    this._rat = Buffer.from([localAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ra = Buffer.from(\n      localAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n\n    this._stk = null;\n    this._random = null;\n    this._diversifier = null;\n\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n    this.onAclStreamEncryptChangeBinded = this.onAclStreamEncryptChange.bind(this);\n    this.onAclStreamLtkNegReplyBinded = this.onAclStreamLtkNegReply.bind(this);\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.on(\"encryptChange\", this.onAclStreamEncryptChangeBinded);\n    this._aclStream.on(\"ltkNegReply\", this.onAclStreamLtkNegReplyBinded);\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public onAclStreamData(cid: any, data: any) {\n    if (cid !== SMP.CID) {\n      return;\n    }\n\n    const code: any = data.readUInt8(0);\n\n    if (SMP.PAIRING_REQUEST === code) {\n      this.handlePairingRequest(data);\n    } else if (SMP.PAIRING_CONFIRM === code) {\n      this.handlePairingConfirm(data);\n    } else if (SMP.PAIRING_RANDOM === code) {\n      this.handlePairingRandom(data);\n    } else if (SMP.PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    }\n  }\n\n  public onAclStreamEncryptChange(encrypted: any) {\n    if (encrypted) {\n      if (this._stk && this._diversifier && this._random) {\n        this.write(Buffer.concat([Buffer.from([SMP.ENCRYPT_INFO]), this._stk]));\n\n        this.write(Buffer.concat([Buffer.from([SMP.MASTER_IDENT]), this._diversifier, this._random]));\n      }\n    }\n  }\n\n  public onAclStreamLtkNegReply() {\n    this.write(Buffer.from([SMP.PAIRING_FAILED, SMP.UNSPECIFIED]));\n\n    this.emit(\"fail\");\n  }\n\n  public onAclStreamEnd() {\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.removeListener(\"encryptChange\", this.onAclStreamEncryptChangeBinded);\n    this._aclStream.removeListener(\"ltkNegReply\", this.onAclStreamLtkNegReplyBinded);\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public handlePairingRequest(data: any) {\n    this._preq = data;\n    this._pres = Buffer.from([\n      SMP.PAIRING_RESPONSE,\n      0x03, // IO capability: NoInputNoOutput\n      0x00, // OOB data: Authentication data not present\n      0x01, // Authentication requirement: Bonding - No MITM\n      0x10, // Max encryption key size\n      0x00, // Initiator key distribution: <none>\n      0x01, // Responder key distribution: EncKey\n    ]);\n\n    this.write(this._pres);\n  }\n\n  public handlePairingConfirm(data: any) {\n    this._pcnf = data;\n\n    this._tk = Buffer.from(\"00000000000000000000000000000000\", \"hex\");\n    this._r = crypto.r();\n\n    this.write(\n      Buffer.concat([\n        Buffer.from([SMP.PAIRING_CONFIRM]),\n        crypto.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),\n      ]),\n    );\n  }\n\n  public handlePairingRandom(data: any) {\n    const r: any = data.slice(1);\n\n    const pcnf: any = Buffer.concat([\n      Buffer.from([SMP.PAIRING_CONFIRM]),\n      crypto.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),\n    ]);\n\n    if (this._pcnf.toString(\"hex\") === pcnf.toString(\"hex\")) {\n      this._diversifier = Buffer.from(\"0000\", \"hex\");\n      this._random = Buffer.from(\"0000000000000000\", \"hex\");\n      this._stk = crypto.s1(this._tk, this._r, r);\n\n      this._mgmt.addLongTermKey(this._ia, this._iat, 0, 0, this._diversifier, this._random, this._stk);\n\n      this.write(Buffer.concat([Buffer.from([SMP.PAIRING_RANDOM]), this._r]));\n    } else {\n      this.write(Buffer.from([SMP.PAIRING_FAILED, SMP.PAIRING_CONFIRM]));\n\n      this.emit(\"fail\");\n    }\n  }\n\n  public handlePairingFailed(data: any) {\n    this.emit(\"fail\");\n  }\n\n  public write(data: any) {\n    this._aclStream.write(SMP.CID, data);\n  }\n}\n"]}