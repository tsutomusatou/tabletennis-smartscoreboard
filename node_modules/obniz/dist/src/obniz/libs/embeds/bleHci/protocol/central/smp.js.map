{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/smp.ts"],"names":[],"mappings":"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","file":"smp.js","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\n\nimport EventEmitter from \"eventemitter3\";\n\nimport { ObnizBlePairingRejectByRemoteError } from \"../../../../../ObnizError\";\nimport { BleDeviceAddress, BleDeviceAddressType } from \"../../bleTypes\";\nimport AclStream from \"./acl-stream\";\nimport crypto from \"./crypto\";\n\n/**\n * @ignore\n */\nnamespace SMP {\n  export const CID = 0x0006;\n  export const PAIRING_REQUEST = 0x01;\n  export const PAIRING_RESPONSE = 0x02;\n  export const PAIRING_CONFIRM = 0x03;\n  export const PAIRING_RANDOM = 0x04;\n  export const PAIRING_FAILED = 0x05;\n  export const ENCRYPT_INFO = 0x06;\n  export const MASTER_IDENT = 0x07;\n  export const SMP_SECURITY_REQUEST = 0x0b;\n}\n\n/**\n * @ignore\n */\ntype SmpEventTypes = \"masterIdent\" | \"ltk\" | \"fail\" | \"end\";\n\n/**\n * @ignore\n */\nexport interface SmpEncryptOptions {\n  /**\n   * Stored pairing keys\n   */\n  keys?: string;\n\n  /**\n   * Callback function that call on pairing passkey required.\n   */\n  passkeyCallback?: () => Promise<number>;\n\n  /**\n   * Callback function that call on pairing passkey required.\n   */\n  onPairedCallback?: (keys: string) => void;\n}\n\n/**\n * @ignore\n */\nclass Smp extends EventEmitter<SmpEventTypes> {\n  private _aclStream: AclStream;\n  private _iat: any;\n  private _ia: any;\n  private _rat: any;\n  private _ra: any;\n  private onAclStreamDataBinded: any;\n  private onAclStreamEndBinded: any;\n  private _preq: any;\n  private _pres: any;\n  private _tk: any;\n  private _r: any;\n  private _rand: any;\n  private _ediv: any;\n  private _pcnf: any;\n  private _stk: any = null;\n  private _ltk: any = null;\n  private _options?: SmpEncryptOptions = undefined;\n\n  constructor(\n    aclStream: AclStream,\n    localAddressType: BleDeviceAddressType,\n    localAddress: BleDeviceAddress,\n    remoteAddressType: BleDeviceAddressType,\n    remoteAddress: BleDeviceAddress,\n  ) {\n    super();\n    this._aclStream = aclStream;\n\n    this._iat = Buffer.from([localAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ia = Buffer.from(\n      localAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n    this._rat = Buffer.from([remoteAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ra = Buffer.from(\n      remoteAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public debugHandler: any = () => {};\n\n  public async pairingWithKeyWait(key: string) {\n    this.debug(`Pairing using keys ${key}`);\n    this.setKeys(key);\n    const encResult = await this._aclStream.onSmpLtkWait(this._ltk, this._rand, this._ediv);\n    return encResult;\n  }\n\n  public setPairingOption(options: SmpEncryptOptions) {\n    this._options = options;\n  }\n\n  public async pairingWait(options?: SmpEncryptOptions) {\n    this._options = { ...this._options, ...options };\n    if (this._options && this._options.keys) {\n      return await this.pairingWithKeyWait(this._options.keys);\n    }\n    this.debug(`Going to Pairing`);\n    await this.sendPairingRequestWait();\n    this.debug(`Waiting Pairing Response`);\n    const pairingResponse = await this._readWait(SMP.PAIRING_RESPONSE);\n    await this.handlePairingResponse(pairingResponse);\n    this.debug(`Waiting Pairing Confirm`);\n    const confirm = await this._readWait(SMP.PAIRING_CONFIRM, 60 * 1000); // 60sec timeout\n    this.handlePairingConfirm(confirm);\n    this.debug(`Waiting Pairing Random`);\n    const random = await this._readWait(SMP.PAIRING_RANDOM);\n    const encResultPromise = this.handlePairingRandomWait(random);\n    this.debug(`Got Pairing Encryption Result`);\n\n    const encInfoPromise = this._readWait(SMP.ENCRYPT_INFO);\n    const masterIdentPromise = this._readWait(SMP.MASTER_IDENT);\n    await Promise.all([encResultPromise, encInfoPromise, masterIdentPromise]);\n    const encResult = await encResultPromise;\n    const encInfo = await encInfoPromise;\n    const masterIdent = await masterIdentPromise;\n    this.handleEncryptInfo(encInfo);\n    this.handleMasterIdent(masterIdent);\n\n    if (this._options && this._options.onPairedCallback) {\n      this._options.onPairedCallback(this.getKeys());\n    }\n    return encResult;\n  }\n\n  public onAclStreamData(cid: any, data?: any) {\n    if (cid !== SMP.CID) {\n      return;\n    }\n\n    const code: any = data.readUInt8(0);\n    if (SMP.PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    } else if (SMP.SMP_SECURITY_REQUEST === code) {\n      this.handleSecurityRequest(data);\n    }\n    // console.warn(\"SMP: \" + code);\n    return;\n    if (SMP.PAIRING_RESPONSE === code) {\n      this.handlePairingResponse(data);\n    } else if (SMP.PAIRING_CONFIRM === code) {\n      this.handlePairingConfirm(data);\n    } else if (SMP.PAIRING_RANDOM === code) {\n      this.handlePairingRandomWait(data);\n    } else if (SMP.PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    } else if (SMP.ENCRYPT_INFO === code) {\n      this.handleEncryptInfo(data);\n    } else if (SMP.MASTER_IDENT === code) {\n      this.handleMasterIdent(data);\n    } else if (SMP.SMP_SECURITY_REQUEST === code) {\n      this.handleSecurityRequest(data);\n    } else {\n      throw new Error();\n    }\n  }\n\n  public onAclStreamEnd() {\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\n\n    this.emit(\"end\");\n  }\n\n  public async handlePairingResponse(data: any) {\n    this._pres = data;\n\n    if (this.isPasskeyMode()) {\n      let passkeyNumber = 0;\n      passkeyNumber = await this._options!.passkeyCallback!();\n      this.debug(`PassKey=${passkeyNumber}`);\n      const passkey = new Array(16);\n      for (let i = 0; i < 3; i++) {\n        passkey[i] = (passkeyNumber >> (i * 8)) & 0xff;\n      }\n\n      this._tk = Buffer.from(passkey);\n    } else {\n      this._tk = Buffer.from(\"00000000000000000000000000000000\", \"hex\");\n    }\n\n    this._r = crypto.r();\n\n    this.write(\n      Buffer.concat([\n        Buffer.from([SMP.PAIRING_CONFIRM]),\n        crypto.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),\n      ]),\n    );\n  }\n\n  public handlePairingConfirm(data: any) {\n    this._pcnf = data;\n\n    this.write(Buffer.concat([Buffer.from([SMP.PAIRING_RANDOM]), this._r]));\n  }\n\n  public async handlePairingRandomWait(data: any) {\n    const r: any = data.slice(1);\n    let encResult = null;\n    const pcnf: any = Buffer.concat([\n      Buffer.from([SMP.PAIRING_CONFIRM]),\n      crypto.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),\n    ]);\n\n    if (this._pcnf.toString(\"hex\") === pcnf.toString(\"hex\")) {\n      if (this._stk !== null) {\n        console.error(\"second stk\");\n      }\n      this._stk = crypto.s1(this._tk, r, this._r);\n\n      // this.emit(\"stk\", this._stk);\n      encResult = await this._aclStream.onSmpStkWait(this._stk);\n    } else {\n      this.write(Buffer.from([SMP.PAIRING_RANDOM, SMP.PAIRING_CONFIRM]));\n\n      this.emit(\"fail\", 0);\n      throw new Error(\"Encryption pcnf error\");\n    }\n    return encResult;\n  }\n\n  public handlePairingFailed(data: Buffer) {\n    this.emit(\"fail\", data.readUInt8(1));\n  }\n\n  public handleEncryptInfo(data: any) {\n    this._ltk = data.slice(1);\n    this.emit(\"ltk\", this._ltk);\n  }\n\n  public handleMasterIdent(data: any) {\n    const ediv: any = data.slice(1, 3);\n    const rand: any = data.slice(3);\n\n    this._ediv = ediv;\n    this._rand = rand;\n    this.emit(\"masterIdent\", ediv, rand);\n  }\n\n  public write(data: any) {\n    this._aclStream.write(SMP.CID, data);\n  }\n\n  public handleSecurityRequest(data: any) {\n    this.pairingWait();\n  }\n\n  public setKeys(keyStringBase64: string) {\n    const keyString = Buffer.from(keyStringBase64, \"base64\").toString(\"ascii\");\n    this.debug(`restored keys ${keyString}`);\n    const keys = JSON.parse(keyString);\n    this._stk = Buffer.from(keys.stk, \"hex\");\n    this._preq = Buffer.from(keys.preq, \"hex\");\n    this._pres = Buffer.from(keys.pres, \"hex\");\n    this._tk = Buffer.from(keys.tk, \"hex\");\n    this._r = Buffer.from(keys.r, \"hex\");\n    this._pcnf = Buffer.from(keys.pcnf, \"hex\");\n    this._ltk = Buffer.from(keys.ltk, \"hex\");\n    this._ediv = Buffer.from(keys.ediv, \"hex\");\n    this._rand = Buffer.from(keys.rand, \"hex\");\n  }\n\n  public getKeys() {\n    const keys = {\n      stk: this._stk.toString(\"hex\"),\n      preq: this._preq.toString(\"hex\"),\n      pres: this._pres.toString(\"hex\"),\n      tk: this._tk.toString(\"hex\"),\n      r: this._r.toString(\"hex\"),\n      pcnf: this._pcnf.toString(\"hex\"),\n      ltk: this._ltk.toString(\"hex\"),\n      ediv: this._ediv.toString(\"hex\"),\n      rand: this._rand.toString(\"hex\"),\n    };\n    const jsonString = JSON.stringify(keys);\n    const keyString = Buffer.from(jsonString, \"ascii\").toString(\"base64\");\n    return keyString;\n  }\n\n  private async sendPairingRequestWait() {\n    if (this.isPasskeyMode()) {\n      this.debug(`pair capable passkey`);\n      this._preq = Buffer.from([\n        SMP.PAIRING_REQUEST,\n        0x02, // IO capability: Keyboard\n        0x00, // OOB data: Authentication data not present\n        0x05, // Authentication requirement: Bonding - MITM\n        0x10, // Max encryption key size\n        0x00, // Initiator key distribution: <none>\n        0x01, // Responder key distribution: EncKey\n      ]);\n    } else {\n      this.debug(`pair No Input and No Output`);\n      this._preq = Buffer.from([\n        SMP.PAIRING_REQUEST,\n        0x03, // IO capability: NoInputNoOutput\n        0x00, // OOB data: Authentication data not present\n        0x01, // Authentication requirement: Bonding - No MITM\n        0x10, // Max encryption key size\n        0x00, // Initiator key distribution: <none>\n        0x01, // Responder key distribution: EncKey\n      ]);\n    }\n    this.write(this._preq);\n  }\n\n  private isPasskeyMode() {\n    if (this._options && this._options.passkeyCallback) {\n      return true;\n    }\n    return false;\n  }\n\n  private _readWait(flag: number, timeout?: number): Promise<Buffer> {\n    return Promise.race([this._aclStream.readWait(SMP.CID, flag, timeout), this._pairingFailReject()]);\n  }\n\n  private _pairingFailReject(): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      this.on(\"fail\", (reason) => {\n        reject(new ObnizBlePairingRejectByRemoteError(reason));\n      });\n    });\n  }\n\n  private debug(text: any) {\n    this.debugHandler(`SMP: ${text}`);\n  }\n}\n\nexport default Smp;\n"]}