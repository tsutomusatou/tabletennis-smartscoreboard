{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/smp.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,YAAY,MAAM,eAAe,CAAC;AAGzC,OAAO,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AACxE,OAAO,SAAS,MAAM,cAAc,CAAC;AAkBrC;;GAEG;AACH,aAAK,aAAa,GAAG,aAAa,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC;AAE5D;;GAEG;AACH,MAAM,WAAW,iBAAiB;IAChC;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd;;OAEG;IACH,eAAe,CAAC,EAAE,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC;IAExC;;OAEG;IACH,gBAAgB,CAAC,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,IAAI,CAAC;CAC3C;AAED;;GAEG;AACH,cAAM,GAAI,SAAQ,YAAY,CAAC,aAAa,CAAC;IAC3C,OAAO,CAAC,UAAU,CAAY;IAC9B,OAAO,CAAC,IAAI,CAAM;IAClB,OAAO,CAAC,GAAG,CAAM;IACjB,OAAO,CAAC,IAAI,CAAM;IAClB,OAAO,CAAC,GAAG,CAAM;IACjB,OAAO,CAAC,qBAAqB,CAAM;IACnC,OAAO,CAAC,oBAAoB,CAAM;IAClC,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,GAAG,CAAM;IACjB,OAAO,CAAC,EAAE,CAAM;IAChB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,IAAI,CAAa;IACzB,OAAO,CAAC,IAAI,CAAa;IACzB,OAAO,CAAC,QAAQ,CAAC,CAAgC;gBAG/C,SAAS,EAAE,SAAS,EACpB,gBAAgB,EAAE,oBAAoB,EACtC,YAAY,EAAE,gBAAgB,EAC9B,iBAAiB,EAAE,oBAAoB,EACvC,aAAa,EAAE,gBAAgB;IA6B1B,YAAY,EAAE,GAAG,CAAY;IAEvB,kBAAkB,CAAC,GAAG,EAAE,MAAM;IAOpC,gBAAgB,CAAC,OAAO,EAAE,iBAAiB;IAIrC,WAAW,CAAC,OAAO,CAAC,EAAE,iBAAiB;IAiC7C,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;IAgCpC,cAAc;IAOR,qBAAqB,CAAC,IAAI,EAAE,GAAG;IA2BrC,oBAAoB,CAAC,IAAI,EAAE,GAAG;IAMxB,uBAAuB,CAAC,IAAI,EAAE,GAAG;IAyBvC,mBAAmB,CAAC,IAAI,EAAE,MAAM;IAIhC,iBAAiB,CAAC,IAAI,EAAE,GAAG;IAK3B,iBAAiB,CAAC,IAAI,EAAE,GAAG;IAS3B,KAAK,CAAC,IAAI,EAAE,GAAG;IAIf,qBAAqB,CAAC,IAAI,EAAE,GAAG;IAI/B,OAAO,CAAC,eAAe,EAAE,MAAM;IAe/B,OAAO;YAiBA,sBAAsB;IA2BpC,OAAO,CAAC,aAAa;IAOrB,OAAO,CAAC,SAAS;IAIjB,OAAO,CAAC,kBAAkB;IAQ1B,OAAO,CAAC,KAAK;CAGd;AAED,eAAe,GAAG,CAAC","file":"smp.d.ts","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\n\nimport EventEmitter from \"eventemitter3\";\n\nimport { ObnizBlePairingRejectByRemoteError } from \"../../../../../ObnizError\";\nimport { BleDeviceAddress, BleDeviceAddressType } from \"../../bleTypes\";\nimport AclStream from \"./acl-stream\";\nimport crypto from \"./crypto\";\n\n/**\n * @ignore\n */\nnamespace SMP {\n  export const CID = 0x0006;\n  export const PAIRING_REQUEST = 0x01;\n  export const PAIRING_RESPONSE = 0x02;\n  export const PAIRING_CONFIRM = 0x03;\n  export const PAIRING_RANDOM = 0x04;\n  export const PAIRING_FAILED = 0x05;\n  export const ENCRYPT_INFO = 0x06;\n  export const MASTER_IDENT = 0x07;\n  export const SMP_SECURITY_REQUEST = 0x0b;\n}\n\n/**\n * @ignore\n */\ntype SmpEventTypes = \"masterIdent\" | \"ltk\" | \"fail\" | \"end\";\n\n/**\n * @ignore\n */\nexport interface SmpEncryptOptions {\n  /**\n   * Stored pairing keys\n   */\n  keys?: string;\n\n  /**\n   * Callback function that call on pairing passkey required.\n   */\n  passkeyCallback?: () => Promise<number>;\n\n  /**\n   * Callback function that call on pairing passkey required.\n   */\n  onPairedCallback?: (keys: string) => void;\n}\n\n/**\n * @ignore\n */\nclass Smp extends EventEmitter<SmpEventTypes> {\n  private _aclStream: AclStream;\n  private _iat: any;\n  private _ia: any;\n  private _rat: any;\n  private _ra: any;\n  private onAclStreamDataBinded: any;\n  private onAclStreamEndBinded: any;\n  private _preq: any;\n  private _pres: any;\n  private _tk: any;\n  private _r: any;\n  private _rand: any;\n  private _ediv: any;\n  private _pcnf: any;\n  private _stk: any = null;\n  private _ltk: any = null;\n  private _options?: SmpEncryptOptions = undefined;\n\n  constructor(\n    aclStream: AclStream,\n    localAddressType: BleDeviceAddressType,\n    localAddress: BleDeviceAddress,\n    remoteAddressType: BleDeviceAddressType,\n    remoteAddress: BleDeviceAddress,\n  ) {\n    super();\n    this._aclStream = aclStream;\n\n    this._iat = Buffer.from([localAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ia = Buffer.from(\n      localAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n    this._rat = Buffer.from([remoteAddressType === \"random\" ? 0x01 : 0x00]);\n    this._ra = Buffer.from(\n      remoteAddress\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    );\n\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public debugHandler: any = () => {};\n\n  public async pairingWithKeyWait(key: string) {\n    this.debug(`Pairing using keys ${key}`);\n    this.setKeys(key);\n    const encResult = await this._aclStream.onSmpLtkWait(this._ltk, this._rand, this._ediv);\n    return encResult;\n  }\n\n  public setPairingOption(options: SmpEncryptOptions) {\n    this._options = options;\n  }\n\n  public async pairingWait(options?: SmpEncryptOptions) {\n    this._options = { ...this._options, ...options };\n    if (this._options && this._options.keys) {\n      return await this.pairingWithKeyWait(this._options.keys);\n    }\n    this.debug(`Going to Pairing`);\n    await this.sendPairingRequestWait();\n    this.debug(`Waiting Pairing Response`);\n    const pairingResponse = await this._readWait(SMP.PAIRING_RESPONSE);\n    await this.handlePairingResponse(pairingResponse);\n    this.debug(`Waiting Pairing Confirm`);\n    const confirm = await this._readWait(SMP.PAIRING_CONFIRM, 60 * 1000); // 60sec timeout\n    this.handlePairingConfirm(confirm);\n    this.debug(`Waiting Pairing Random`);\n    const random = await this._readWait(SMP.PAIRING_RANDOM);\n    const encResultPromise = this.handlePairingRandomWait(random);\n    this.debug(`Got Pairing Encryption Result`);\n\n    const encInfoPromise = this._readWait(SMP.ENCRYPT_INFO);\n    const masterIdentPromise = this._readWait(SMP.MASTER_IDENT);\n    await Promise.all([encResultPromise, encInfoPromise, masterIdentPromise]);\n    const encResult = await encResultPromise;\n    const encInfo = await encInfoPromise;\n    const masterIdent = await masterIdentPromise;\n    this.handleEncryptInfo(encInfo);\n    this.handleMasterIdent(masterIdent);\n\n    if (this._options && this._options.onPairedCallback) {\n      this._options.onPairedCallback(this.getKeys());\n    }\n    return encResult;\n  }\n\n  public onAclStreamData(cid: any, data?: any) {\n    if (cid !== SMP.CID) {\n      return;\n    }\n\n    const code: any = data.readUInt8(0);\n    if (SMP.PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    } else if (SMP.SMP_SECURITY_REQUEST === code) {\n      this.handleSecurityRequest(data);\n    }\n    // console.warn(\"SMP: \" + code);\n    return;\n    if (SMP.PAIRING_RESPONSE === code) {\n      this.handlePairingResponse(data);\n    } else if (SMP.PAIRING_CONFIRM === code) {\n      this.handlePairingConfirm(data);\n    } else if (SMP.PAIRING_RANDOM === code) {\n      this.handlePairingRandomWait(data);\n    } else if (SMP.PAIRING_FAILED === code) {\n      this.handlePairingFailed(data);\n    } else if (SMP.ENCRYPT_INFO === code) {\n      this.handleEncryptInfo(data);\n    } else if (SMP.MASTER_IDENT === code) {\n      this.handleMasterIdent(data);\n    } else if (SMP.SMP_SECURITY_REQUEST === code) {\n      this.handleSecurityRequest(data);\n    } else {\n      throw new Error();\n    }\n  }\n\n  public onAclStreamEnd() {\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\n\n    this.emit(\"end\");\n  }\n\n  public async handlePairingResponse(data: any) {\n    this._pres = data;\n\n    if (this.isPasskeyMode()) {\n      let passkeyNumber = 0;\n      passkeyNumber = await this._options!.passkeyCallback!();\n      this.debug(`PassKey=${passkeyNumber}`);\n      const passkey = new Array(16);\n      for (let i = 0; i < 3; i++) {\n        passkey[i] = (passkeyNumber >> (i * 8)) & 0xff;\n      }\n\n      this._tk = Buffer.from(passkey);\n    } else {\n      this._tk = Buffer.from(\"00000000000000000000000000000000\", \"hex\");\n    }\n\n    this._r = crypto.r();\n\n    this.write(\n      Buffer.concat([\n        Buffer.from([SMP.PAIRING_CONFIRM]),\n        crypto.c1(this._tk, this._r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),\n      ]),\n    );\n  }\n\n  public handlePairingConfirm(data: any) {\n    this._pcnf = data;\n\n    this.write(Buffer.concat([Buffer.from([SMP.PAIRING_RANDOM]), this._r]));\n  }\n\n  public async handlePairingRandomWait(data: any) {\n    const r: any = data.slice(1);\n    let encResult = null;\n    const pcnf: any = Buffer.concat([\n      Buffer.from([SMP.PAIRING_CONFIRM]),\n      crypto.c1(this._tk, r, this._pres, this._preq, this._iat, this._ia, this._rat, this._ra),\n    ]);\n\n    if (this._pcnf.toString(\"hex\") === pcnf.toString(\"hex\")) {\n      if (this._stk !== null) {\n        console.error(\"second stk\");\n      }\n      this._stk = crypto.s1(this._tk, r, this._r);\n\n      // this.emit(\"stk\", this._stk);\n      encResult = await this._aclStream.onSmpStkWait(this._stk);\n    } else {\n      this.write(Buffer.from([SMP.PAIRING_RANDOM, SMP.PAIRING_CONFIRM]));\n\n      this.emit(\"fail\", 0);\n      throw new Error(\"Encryption pcnf error\");\n    }\n    return encResult;\n  }\n\n  public handlePairingFailed(data: Buffer) {\n    this.emit(\"fail\", data.readUInt8(1));\n  }\n\n  public handleEncryptInfo(data: any) {\n    this._ltk = data.slice(1);\n    this.emit(\"ltk\", this._ltk);\n  }\n\n  public handleMasterIdent(data: any) {\n    const ediv: any = data.slice(1, 3);\n    const rand: any = data.slice(3);\n\n    this._ediv = ediv;\n    this._rand = rand;\n    this.emit(\"masterIdent\", ediv, rand);\n  }\n\n  public write(data: any) {\n    this._aclStream.write(SMP.CID, data);\n  }\n\n  public handleSecurityRequest(data: any) {\n    this.pairingWait();\n  }\n\n  public setKeys(keyStringBase64: string) {\n    const keyString = Buffer.from(keyStringBase64, \"base64\").toString(\"ascii\");\n    this.debug(`restored keys ${keyString}`);\n    const keys = JSON.parse(keyString);\n    this._stk = Buffer.from(keys.stk, \"hex\");\n    this._preq = Buffer.from(keys.preq, \"hex\");\n    this._pres = Buffer.from(keys.pres, \"hex\");\n    this._tk = Buffer.from(keys.tk, \"hex\");\n    this._r = Buffer.from(keys.r, \"hex\");\n    this._pcnf = Buffer.from(keys.pcnf, \"hex\");\n    this._ltk = Buffer.from(keys.ltk, \"hex\");\n    this._ediv = Buffer.from(keys.ediv, \"hex\");\n    this._rand = Buffer.from(keys.rand, \"hex\");\n  }\n\n  public getKeys() {\n    const keys = {\n      stk: this._stk.toString(\"hex\"),\n      preq: this._preq.toString(\"hex\"),\n      pres: this._pres.toString(\"hex\"),\n      tk: this._tk.toString(\"hex\"),\n      r: this._r.toString(\"hex\"),\n      pcnf: this._pcnf.toString(\"hex\"),\n      ltk: this._ltk.toString(\"hex\"),\n      ediv: this._ediv.toString(\"hex\"),\n      rand: this._rand.toString(\"hex\"),\n    };\n    const jsonString = JSON.stringify(keys);\n    const keyString = Buffer.from(jsonString, \"ascii\").toString(\"base64\");\n    return keyString;\n  }\n\n  private async sendPairingRequestWait() {\n    if (this.isPasskeyMode()) {\n      this.debug(`pair capable passkey`);\n      this._preq = Buffer.from([\n        SMP.PAIRING_REQUEST,\n        0x02, // IO capability: Keyboard\n        0x00, // OOB data: Authentication data not present\n        0x05, // Authentication requirement: Bonding - MITM\n        0x10, // Max encryption key size\n        0x00, // Initiator key distribution: <none>\n        0x01, // Responder key distribution: EncKey\n      ]);\n    } else {\n      this.debug(`pair No Input and No Output`);\n      this._preq = Buffer.from([\n        SMP.PAIRING_REQUEST,\n        0x03, // IO capability: NoInputNoOutput\n        0x00, // OOB data: Authentication data not present\n        0x01, // Authentication requirement: Bonding - No MITM\n        0x10, // Max encryption key size\n        0x00, // Initiator key distribution: <none>\n        0x01, // Responder key distribution: EncKey\n      ]);\n    }\n    this.write(this._preq);\n  }\n\n  private isPasskeyMode() {\n    if (this._options && this._options.passkeyCallback) {\n      return true;\n    }\n    return false;\n  }\n\n  private _readWait(flag: number, timeout?: number): Promise<Buffer> {\n    return Promise.race([this._aclStream.readWait(SMP.CID, flag, timeout), this._pairingFailReject()]);\n  }\n\n  private _pairingFailReject(): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      this.on(\"fail\", (reason) => {\n        reject(new ObnizBlePairingRejectByRemoteError(reason));\n      });\n    });\n  }\n\n  private debug(text: any) {\n    this.debugHandler(`SMP: ${text}`);\n  }\n}\n\nexport default Smp;\n"]}