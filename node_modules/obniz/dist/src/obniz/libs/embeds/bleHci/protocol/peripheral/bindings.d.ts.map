{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/bindings.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAGH,OAAO,GAAG,MAAM,QAAQ,CAAC;AAMzB,OAAO,YAAY,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAExC,OAAO,GAAG,MAAM,OAAO,CAAC;AACxB,OAAO,IAAI,MAAM,QAAQ,CAAC;AAE1B,aAAK,sBAAsB,GAAG,aAAa,GAAG,WAAW,GAAG,QAAQ,GAAG,YAAY,CAAC;AAEpF;;GAEG;AACH,cAAM,aAAc,SAAQ,YAAY,CAAC,sBAAsB,CAAC;IACvD,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;IAClB,IAAI,EAAE,GAAG,CAAC;IACV,IAAI,EAAE,GAAG,CAAC;IACV,KAAK,EAAE,IAAI,CAAC;IACZ,QAAQ,EAAE,GAAG,CAAC;IACd,OAAO,EAAE,MAAM,GAAG,IAAI,CAAC;IAC9B,OAAO,CAAC,UAAU,CAAmB;gBAEzB,WAAW,EAAE,GAAG;IAef,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAMjD,2BAA2B,CAAC,IAAI,EAAE,GAAG;IAMrC,+BAA+B,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAMrE,mBAAmB;IAMnB,WAAW,CAAC,QAAQ,EAAE,GAAG;IAI/B,UAAU;IAQJ,cAAc,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAQ9C,IAAI;IAYJ,aAAa,CAAC,KAAK,EAAE,GAAG;IAmBxB,gBAAgB,CACrB,MAAM,EAAE,GAAG,EACX,MAAM,CAAC,EAAE,GAAG,EACZ,IAAI,CAAC,EAAE,GAAG,EACV,WAAW,CAAC,EAAE,GAAG,EACjB,OAAO,CAAC,EAAE,GAAG,EACb,QAAQ,CAAC,EAAE,GAAG,EACd,OAAO,CAAC,EAAE,GAAG,EACb,kBAAkB,CAAC,EAAE,GAAG,EACxB,mBAAmB,CAAC,EAAE,GAAG;IAepB,sBAAsB,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,kBAAkB,CAAC,EAAE,GAAG;IAIrF,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG;IAuBrD,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,GAAG;IAM1C,WAAW,CAAC,GAAG,EAAE,GAAG;IAIpB,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG;CAK1D;AAED,eAAe,aAAa,CAAC","file":"bindings.d.ts","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\n// var debug = require('debug')('bindings');\n\nimport Hci from \"../hci\";\n\n/**\n * @ignore\n */\nconst debug: any = () => {};\nimport EventEmitter from \"eventemitter3\";\nimport os from \"os\";\nimport { Handle } from \"../../bleTypes\";\nimport AclStream from \"./acl-stream\";\nimport Gap from \"./gap\";\nimport Gatt from \"./gatt\";\n\ntype BlenoBindingsEventType = \"stateChange\" | \"mtuChange\" | \"accept\" | \"disconnect\";\n\n/**\n * @ignore\n */\nclass BlenoBindings extends EventEmitter<BlenoBindingsEventType> {\n  public _state: any;\n  public _advertising: any;\n  public _hci: Hci;\n  public _gap: Gap;\n  public _gatt: Gatt;\n  public _address: any;\n  public _handle: Handle | null;\n  private _aclStream: AclStream | null;\n\n  constructor(hciProtocol: any) {\n    super();\n    this._state = null;\n\n    this._advertising = false;\n\n    this._hci = hciProtocol;\n    this._gap = new Gap(this._hci);\n    this._gatt = new Gatt();\n\n    this._address = null;\n    this._handle = null;\n    this._aclStream = null;\n  }\n\n  public async startAdvertisingWait(name: any, serviceUuids: any) {\n    this._advertising = true;\n\n    await this._gap.startAdvertisingWait(name, serviceUuids);\n  }\n\n  public async startAdvertisingIBeaconWait(data: any) {\n    this._advertising = true;\n\n    await this._gap.startAdvertisingIBeaconWait(data);\n  }\n\n  public async startAdvertisingWithEIRDataWait(advertisementData: any, scanData: any) {\n    this._advertising = true;\n\n    await this._gap.startAdvertisingWithEIRDataWait(advertisementData, scanData);\n  }\n\n  public async stopAdvertisingWait() {\n    this._advertising = false;\n\n    await this._gap.stopAdvertisingWait();\n  }\n\n  public async setServices(services: any) {\n    this._gatt.setServices(services);\n  }\n\n  public disconnect() {\n    if (this._handle) {\n      debug(\"disconnect by server\");\n\n      this._hci.disconnect(this._handle);\n    }\n  }\n\n  public async updateRssiWait(): Promise<number | null> {\n    if (this._handle) {\n      const rssi = await this._hci.readRssiWait(this._handle);\n      return rssi;\n    }\n    return null;\n  }\n\n  public init() {\n    this._gatt.on(\"mtuChange\", this.onMtuChange.bind(this));\n\n    this._hci.on(\"stateChange\", this.onStateChange.bind(this));\n    this._hci.on(\"leConnComplete\", this.onLeConnComplete.bind(this));\n    this._hci.on(\"leConnUpdateComplete\", this.onLeConnUpdateComplete.bind(this));\n\n    this._hci.on(\"disconnComplete\", this.onDisconnCompleteWait.bind(this));\n    this._hci.on(\"encryptChange\", this.onEncryptChange.bind(this));\n    this._hci.on(\"aclDataPkt\", this.onAclDataPkt.bind(this));\n  }\n\n  public onStateChange(state: any) {\n    if (this._state === state) {\n      return;\n    }\n    this._state = state;\n\n    if (state === \"unauthorized\") {\n      console.log(\"bleno warning: adapter state unauthorized, please run as root or with sudo\");\n      console.log(\"               or see README for information on running without root/sudo:\");\n      console.log(\"               https://github.com/sandeepmistry/bleno#running-on-linux\");\n    } else if (state === \"unsupported\") {\n      console.log(\"bleno warning: adapter does not support Bluetooth Low Energy (BLE, Bluetooth Smart).\");\n      console.log(\"               Try to run with environment variable:\");\n      console.log(\"               [sudo] BLENO_HCI_DEVICE_ID=x node ...\");\n    }\n\n    this.emit(\"stateChange\", state);\n  }\n\n  public onLeConnComplete(\n    status: any,\n    handle?: any,\n    role?: any,\n    addressType?: any,\n    address?: any,\n    interval?: any,\n    latency?: any,\n    supervisionTimeout?: any,\n    masterClockAccuracy?: any,\n  ) {\n    if (role !== 1) {\n      // not slave, ignore\n      return;\n    }\n\n    this._address = address;\n    this._handle = handle;\n    this._aclStream = new AclStream(this._hci, handle, this._hci.addressType, this._hci.address, addressType, address);\n    this._gatt.setAclStream(this._aclStream);\n\n    this.emit(\"accept\", address);\n  }\n\n  public onLeConnUpdateComplete(handle: any, interval?: any, latency?: any, supervisionTimeout?: any) {\n    // no-op\n  }\n\n  public async onDisconnCompleteWait(handle: any, reason?: any) {\n    if (this._handle !== handle) {\n      return; // not peripheral\n    }\n    if (this._aclStream) {\n      this._aclStream.end();\n    }\n\n    const address: any = this._address;\n\n    this._address = null;\n    this._handle = null;\n    this._aclStream = null;\n\n    if (address) {\n      this.emit(\"disconnect\", address, reason); // TODO: use reason\n    }\n\n    if (this._advertising) {\n      await this._gap.restartAdvertisingWait();\n    }\n  }\n\n  public onEncryptChange(handle: any, encrypt?: any) {\n    if (this._handle === handle && this._aclStream) {\n      this._aclStream.pushEncrypt(encrypt);\n    }\n  }\n\n  public onMtuChange(mtu: any) {\n    this.emit(\"mtuChange\", mtu);\n  }\n\n  public onAclDataPkt(handle: Handle, cid?: any, data?: any) {\n    if (this._handle === handle && this._aclStream) {\n      this._aclStream.push(cid, data);\n    }\n  }\n}\n\nexport default BlenoBindings;\n"]}