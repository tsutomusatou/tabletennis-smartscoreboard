{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/blePeripheral.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,QAAQ,MAAM,OAAO,CAAC;AAE7B,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAEtE,oBAAY,kBAAkB,GAAG,WAAW,GAAG,cAAc,CAAC;AAE9D,MAAM,WAAW,wBAAwB;IACvC,OAAO,EAAE,gBAAgB,CAAC;IAC1B,MAAM,EAAE,kBAAkB,CAAC;IAC3B,MAAM,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC;CACzB;AAED;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,aAAa;IAChC;;OAEG;IACI,6BAA6B,EAAE,gBAAgB,GAAG,IAAI,CAAC;IAE9D;;;;;;;;;;OAUG;IACI,mBAAmB,CAAC,EAAE,CAAC,KAAK,EAAE,wBAAwB,KAAK,IAAI,CAAC;IACvE,OAAO,CAAC,QAAQ,CAAW;IAC3B,OAAO,CAAC,SAAS,CAAe;gBAEpB,QAAQ,EAAE,QAAQ;IAM9B;;;OAGG;IACU,eAAe;IAK5B;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACI,UAAU,CAAC,OAAO,EAAE,gBAAgB,GAAG,UAAU;IAUxD;;;;OAIG;IACI,OAAO,CAAC,IAAI,EAAE,GAAG;IAQxB;;;OAGG;IACI,UAAU,CAAC,IAAI,EAAE,IAAI,GAAG,UAAU,GAAG,IAAI;IAchD;;;OAGG;IACI,aAAa,CAAC,IAAI,EAAE,IAAI;IAQ/B;;OAEG;IACI,cAAc;IAKrB;;OAEG;IACI,MAAM;;;IAMb;;;OAGG;IACI,kBAAkB,CAAC,KAAK,EAAE,GAAG;IAUpC;;;OAGG;IACI,cAAc,CAAC,KAAK,EAAE,GAAG;IAShC;;;;;;;OAOG;IACI,GAAG;IAIV;;;OAGG;IACI,OAAO,CAAC,KAAK,EAAE,GAAG;CAC1B","file":"blePeripheral.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport ObnizBLE from \"./ble\";\nimport BleHelper from \"./bleHelper\";\nimport BleService from \"./bleService\";\nimport { BleDeviceAddress, BleServiceDefine, UUID } from \"./bleTypes\";\n\nexport type BleConnectionState = \"connected\" | \"disconnected\";\n\nexport interface BleConnectionUpdateParam {\n  address: BleDeviceAddress;\n  status: BleConnectionState;\n  reason?: string | Error;\n}\n\n/**\n * @category Use as Peripheral\n */\nexport default class BlePeripheral {\n  /**\n   * Current connected device address\n   */\n  public currentConnectedDeviceAddress: BleDeviceAddress | null;\n\n  /**\n   * This is a callback function used when an external device gets connected or disconnected.\n   *\n   * ```javascript\n   * await obniz.ble.initWait();\n   * obniz.ble.peripheral.onconnectionupdates = function(data){\n   *   console.log(\"remote device \", data.address, data.status)\n   * };\n   * ```\n   *\n   */\n  public onconnectionupdates?: (param: BleConnectionUpdateParam) => void;\n  private obnizBle: ObnizBLE;\n  private _services: BleService[];\n\n  constructor(obnizBle: ObnizBLE) {\n    this.obnizBle = obnizBle;\n    this._services = [];\n    this.currentConnectedDeviceAddress = null;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public async _updateServices() {\n    const bufData: any = this._services.map((e: any) => e.toBufferObj());\n    await this.obnizBle.peripheralBindings.setServices(bufData);\n  }\n\n  /**\n   * This starts a service as peripheral.\n   *\n   *\n   * ```javascript\n   *\n   * await obniz.ble.initWait();\n   * // Service without characteristics\n   * var service1 = new obniz.ble.service({\"uuid\" : \"fff0\"});\n   * obniz.ble.peripheral.addService(service1);\n   *\n   * // Service with characteristics/descriptor\n   * var service2 = new obniz.ble.service({\"uuid\" : \"fff0\"});\n   * var characteristic = new obniz.ble.characteristic({\"uuid\" : \"FFF1\", \"text\": \"Hi\"});\n   * var descriptor = new obniz.ble.descriptor({\"uuid\" : \"2901\", \"text\" : \"hello world characteristic\"});\n   *\n   * service2.addCharacteristic(characteristic);\n   * characteristic.addDescriptor(descriptor);\n   *\n   * obniz.ble.peripheral.addService(service2); // call this after all descriptors and characteristics added to service.\n   * ```\n   *\n   * @param service\n   */\n  public addService(service: BleServiceDefine | BleService) {\n    this.obnizBle.warningIfNotInitialize();\n    if (!(service instanceof BleService)) {\n      service = new BleService(service);\n    }\n    this._services.push(service as BleService);\n    (service as BleService).peripheral = this;\n\n    this._updateServices();\n  }\n  /**\n   * @ignore\n   * @private\n   * @param json\n   */\n  public setJson(json: any) {\n    if (json.services) {\n      for (const service of json.services) {\n        this.addService(service);\n      }\n    }\n  }\n\n  /**\n   * Get service by UUID\n   * @param uuid\n   */\n  public getService(uuid: UUID): BleService | null {\n    uuid = BleHelper.uuidFilter(uuid);\n    const result = this._services\n      .filter((element: any) => {\n        return BleHelper.uuidFilter(element.uuid) === uuid;\n      })\n      .shift();\n\n    if (!result) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * Terminate service by UUID\n   * @param uuid\n   */\n  public removeService(uuid: UUID) {\n    this._services = this._services.filter((element: any) => {\n      return BleHelper.uuidFilter(element.uuid) !== uuid;\n    });\n\n    this._updateServices();\n  }\n\n  /**\n   * @ignore\n   */\n  public stopAllService() {\n    this._services = [];\n    this._updateServices();\n  }\n\n  /**\n   * @ignore\n   */\n  public toJSON() {\n    return {\n      services: this._services,\n    };\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public findCharacteristic(param: any) {\n    const serviceUuid: any = BleHelper.uuidFilter(param.service_uuid);\n    const characteristicUuid: any = BleHelper.uuidFilter(param.characteristic_uuid);\n    const s: any = this.getService(serviceUuid);\n    if (s) {\n      return s.getCharacteristic(characteristicUuid);\n    }\n    return null;\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public findDescriptor(param: any) {\n    const descriptorUuid: any = BleHelper.uuidFilter(param.descriptor_uuid);\n    const c: any = this.findCharacteristic(param);\n    if (c) {\n      return c.getDescriptor(descriptorUuid);\n    }\n    return null;\n  }\n\n  /**\n   * This ends all the peripheral service\n   *\n   * ```javascript\n   * obniz.ble.peripheral.addService(setting);\n   * obniz.ble.peripheral.end();\n   * ```\n   */\n  public end() {\n    this.stopAllService();\n  }\n\n  /**\n   * @ignore\n   * @param error\n   */\n  public onerror(error: any) {}\n}\n"]}