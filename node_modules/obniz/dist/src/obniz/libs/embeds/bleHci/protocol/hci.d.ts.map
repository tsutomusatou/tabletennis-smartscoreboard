{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/hci.ts"],"names":[],"mappings":"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","file":"hci.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @ignore\n */\nimport EventEmitter from \"eventemitter3\";\nimport ObnizBLEHci from \"../hci\";\n\nimport { ObnizBleHciStateError, ObnizBleUnsupportedHciError } from \"../../../../ObnizError\";\nimport { Handle } from \"../bleTypes\";\n\nnamespace COMMANDS {\n  export const HCI_COMMAND_PKT: any = 0x01;\n  export const HCI_ACLDATA_PKT: any = 0x02;\n  export const HCI_EVENT_PKT: any = 0x04;\n\n  export const ACL_START_NO_FLUSH: any = 0x00;\n  export const ACL_CONT: any = 0x01;\n  export const ACL_START: any = 0x02;\n\n  export const EVT_DISCONN_COMPLETE: any = 0x05;\n  export const EVT_ENCRYPT_CHANGE: any = 0x08;\n  export const EVT_CMD_COMPLETE: any = 0x0e;\n  export const EVT_CMD_STATUS: any = 0x0f;\n  export const EVT_NUMBER_OF_COMPLETED_PACKETS: any = 0x13;\n  export const EVT_ENCRYPTION_KEY_REFRESH_COMPLETE: any = 0x30;\n  export const EVT_LE_META_EVENT: any = 0x3e;\n\n  export const EVT_LE_CONN_COMPLETE: any = 0x01;\n  export const EVT_LE_ADVERTISING_REPORT: any = 0x02;\n  export const EVT_LE_CONN_UPDATE_COMPLETE: any = 0x03;\n\n  export const OGF_LINK_CTL: any = 0x01;\n  export const OCF_DISCONNECT: any = 0x0006;\n\n  export const OGF_HOST_CTL: any = 0x03;\n  export const OCF_SET_EVENT_MASK: any = 0x0001;\n  export const OCF_RESET: any = 0x0003;\n  export const OCF_READ_LE_HOST_SUPPORTED: any = 0x006c;\n  export const OCF_WRITE_LE_HOST_SUPPORTED: any = 0x006d;\n\n  export const OGF_INFO_PARAM: any = 0x04;\n  export const OCF_READ_LOCAL_VERSION: any = 0x0001;\n  export const OCF_READ_BUFFER_SIZE: any = 0x0005;\n  export const OCF_READ_BD_ADDR: any = 0x0009;\n\n  export const OGF_STATUS_PARAM: any = 0x05;\n  export const OCF_READ_RSSI: any = 0x0005;\n\n  export const OGF_LE_CTL: any = 0x08;\n  export const OCF_LE_SET_EVENT_MASK: any = 0x0001;\n  export const OCF_LE_READ_BUFFER_SIZE: any = 0x0002;\n  export const OCF_LE_SET_ADVERTISING_PARAMETERS: any = 0x0006;\n  export const OCF_LE_SET_ADVERTISING_DATA: any = 0x0008;\n  export const OCF_LE_SET_SCAN_RESPONSE_DATA: any = 0x0009;\n  export const OCF_LE_SET_ADVERTISE_ENABLE: any = 0x000a;\n  export const OCF_LE_SET_SCAN_PARAMETERS: any = 0x000b;\n  export const OCF_LE_SET_SCAN_ENABLE: any = 0x000c;\n  export const OCF_LE_CREATE_CONN: any = 0x000d;\n  export const OCF_LE_CREATE_CONN_CANCEL: any = 0x000e;\n  export const OCF_LE_CONN_UPDATE: any = 0x0013;\n  export const OCF_LE_START_ENCRYPTION: any = 0x0019;\n  export const OCF_LE_LTK_NEG_REPLY: any = 0x001b;\n\n  export const DISCONNECT_CMD: any = OCF_DISCONNECT | (OGF_LINK_CTL << 10);\n\n  export const SET_EVENT_MASK_CMD: any = OCF_SET_EVENT_MASK | (OGF_HOST_CTL << 10);\n  export const RESET_CMD: any = OCF_RESET | (OGF_HOST_CTL << 10);\n  export const READ_LE_HOST_SUPPORTED_CMD: any = OCF_READ_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\n  export const WRITE_LE_HOST_SUPPORTED_CMD: any = OCF_WRITE_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\n\n  export const READ_LOCAL_VERSION_CMD: any = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM << 10);\n  export const READ_BUFFER_SIZE_CMD: any = OCF_READ_BUFFER_SIZE | (OGF_INFO_PARAM << 10);\n  export const READ_BD_ADDR_CMD: any = OCF_READ_BD_ADDR | (OGF_INFO_PARAM << 10);\n\n  export const READ_RSSI_CMD: any = OCF_READ_RSSI | (OGF_STATUS_PARAM << 10);\n\n  export const LE_SET_EVENT_MASK_CMD: any = OCF_LE_SET_EVENT_MASK | (OGF_LE_CTL << 10);\n  export const LE_READ_BUFFER_SIZE_CMD: any = OCF_LE_READ_BUFFER_SIZE | (OGF_LE_CTL << 10);\n  export const LE_SET_SCAN_PARAMETERS_CMD: any = OCF_LE_SET_SCAN_PARAMETERS | (OGF_LE_CTL << 10);\n  export const LE_SET_SCAN_ENABLE_CMD: any = OCF_LE_SET_SCAN_ENABLE | (OGF_LE_CTL << 10);\n  export const LE_CREATE_CONN_CMD: any = OCF_LE_CREATE_CONN | (OGF_LE_CTL << 10);\n  export const LE_CREATE_CONN_CANCEL_CMD: any = OCF_LE_CREATE_CONN_CANCEL | (OGF_LE_CTL << 10);\n  export const LE_CONN_UPDATE_CMD: any = OCF_LE_CONN_UPDATE | (OGF_LE_CTL << 10);\n  export const LE_START_ENCRYPTION_CMD: any = OCF_LE_START_ENCRYPTION | (OGF_LE_CTL << 10);\n  export const LE_SET_ADVERTISING_PARAMETERS_CMD: any = OCF_LE_SET_ADVERTISING_PARAMETERS | (OGF_LE_CTL << 10);\n\n  export const LE_SET_ADVERTISING_DATA_CMD: any = OCF_LE_SET_ADVERTISING_DATA | (OGF_LE_CTL << 10);\n  export const LE_SET_SCAN_RESPONSE_DATA_CMD: any = OCF_LE_SET_SCAN_RESPONSE_DATA | (OGF_LE_CTL << 10);\n  export const LE_SET_ADVERTISE_ENABLE_CMD: any = OCF_LE_SET_ADVERTISE_ENABLE | (OGF_LE_CTL << 10);\n  export const LE_LTK_NEG_REPLY_CMD: any = OCF_LE_LTK_NEG_REPLY | (OGF_LE_CTL << 10);\n\n  export const HCI_OE_USER_ENDED_CONNECTION: any = 0x13;\n}\n\n/**\n * @ignore\n */\nconst STATUS_MAPPER: any = require(\"./hci-status\");\n\ntype HciEventTypes =\n  // central\n  | \"leAdvertisingReport\"\n\n  // peripheral\n  | \"leConnComplete\" // central also use, but slave only emit\n\n  // common\n  | \"stateChange\"\n  | \"leConnUpdateComplete\" // update interval, latency, timeout are complete\n  | \"disconnComplete\"\n  | \"encryptChange\"\n  | \"aclDataPkt\";\n\ntype HciState = \"poweredOn\" | \"poweredOff\";\n\n/**\n * @ignore\n */\nclass Hci extends EventEmitter<HciEventTypes> {\n  public static STATUS_MAPPER: any;\n  public _obnizHci: ObnizBLEHci;\n  public _handleBuffers: any;\n  public _socket: any;\n  public _handleAclsInProgress: any;\n  public _aclOutQueue: any;\n  public _aclMtu: any;\n  public _aclMaxInProgress: any;\n  public addressType: any;\n  public address: any;\n  private _state: HciState;\n  private _aclStreamObservers: { [handle: string]: { [key: string]: Array<(arg0: Buffer) => any> } } = {};\n\n  constructor(obnizHci: any) {\n    super();\n    this._obnizHci = obnizHci;\n    this._state = \"poweredOff\";\n\n    this.resetBuffers();\n\n    this._obnizHci.Obniz.on(\"disconnect\", () => {\n      this.stateChange(\"poweredOff\");\n    });\n\n    this._socket = {\n      write: (data: any) => {\n        const arr: any = Array.from(data);\n        this._obnizHci.write(arr);\n      },\n    };\n    this._obnizHci.onread = this.onSocketData.bind(this);\n  }\n  public debugHandler: any = () => {};\n\n  public async initWait() {\n    await this.resetWait();\n  }\n\n  public setEventMask() {\n    const cmd: any = Buffer.alloc(12);\n    const eventMask: any = Buffer.from(\"fffffbff07f8bf3d\", \"hex\");\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.SET_EVENT_MASK_CMD, 1);\n\n    // length\n    cmd.writeUInt8(eventMask.length, 3);\n\n    eventMask.copy(cmd, 4);\n\n    this.debug(\"set event mask - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async resetWait(): Promise<void> {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.OCF_RESET | (COMMANDS.OGF_HOST_CTL << 10), 1);\n\n    // length\n    cmd.writeUInt8(0x00, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.RESET_CMD);\n    this.debug(\"reset - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const resetResult = await p;\n    this.resetBuffers();\n    this.setEventMask();\n    this.setLeEventMask();\n    const p1 = this.readLocalVersionWait();\n    const p2 = this.readBdAddrWait();\n    this.writeLeHostSupported();\n    const p3 = this.readLeHostSupportedWait();\n    const p4 = this.leReadBufferSizeWait();\n    await Promise.all([p1, p2, p3, p4]);\n\n    if (this._state !== \"poweredOn\") {\n      const p5 = this.setScanEnabledWait(false, true);\n      const p6 = this.setScanParametersWait(false);\n      await Promise.all([p5, p6]);\n      this.stateChange(\"poweredOn\");\n    }\n  }\n\n  public resetBuffers() {\n    this._handleAclsInProgress = {};\n    this._handleBuffers = {};\n    this._aclOutQueue = [];\n  }\n\n  public async readLocalVersionWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_LOCAL_VERSION_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_LOCAL_VERSION_CMD);\n    this.debug(\"read local version - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    const hciVer: any = data.result.readUInt8(0);\n    const hciRev: any = data.result.readUInt16LE(1);\n    const lmpVer: any = data.result.readInt8(3);\n    const manufacturer: any = data.result.readUInt16LE(4);\n    const lmpSubVer: any = data.result.readUInt16LE(6);\n\n    if (hciVer < 0x06) {\n      throw new ObnizBleUnsupportedHciError(0x06, hciVer);\n    }\n\n    return { hciVer, hciRev, lmpVer, manufacturer, lmpSubVer };\n  }\n\n  public async readBdAddrWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_BD_ADDR_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_BD_ADDR_CMD);\n    this.debug(\"read bd addr - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n    this.addressType = \"public\";\n    this.address = data.result\n      .toString(\"hex\")\n      .match(/.{1,2}/g)!\n      .reverse()\n      .join(\":\");\n\n    this.debug(\"address = \" + this.address);\n\n    return this.address;\n  }\n\n  public setLeEventMask() {\n    const cmd: any = Buffer.alloc(12);\n    const leEventMask: any = Buffer.from(\"1f00000000000000\", \"hex\");\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_EVENT_MASK_CMD, 1);\n\n    // length\n    cmd.writeUInt8(leEventMask.length, 3);\n\n    leEventMask.copy(cmd, 4);\n\n    this.debug(\"set le event mask - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async readLeHostSupportedWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_LE_HOST_SUPPORTED_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x00, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_LE_HOST_SUPPORTED_CMD);\n    this.debug(\"read LE host supported - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n\n    if (data.status === 0) {\n      const le: any = data.result.readUInt8(0);\n      const simul: any = data.result.readUInt8(1);\n\n      this.debug(\"\\t\\t\\tle = \" + le);\n      this.debug(\"\\t\\t\\tsimul = \" + simul);\n    }\n    return data;\n  }\n\n  public writeLeHostSupported() {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.WRITE_LE_HOST_SUPPORTED_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt8(0x01, 4); // le\n    cmd.writeUInt8(0x00, 5); // simul\n\n    this.debug(\"write LE host supported - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async setScanParametersWait(isActiveScan: boolean) {\n    const cmd: any = Buffer.alloc(11);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_PARAMETERS_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x07, 3);\n\n    // data\n    cmd.writeUInt8(isActiveScan ? 0x01 : 0x00, 4); // type: 0 -> passive, 1 -> active\n    cmd.writeUInt16LE(0x0010, 5); // internal, ms * 1.6\n    cmd.writeUInt16LE(0x0010, 7); // window, ms * 1.6\n    cmd.writeUInt8(0x00, 9); // own address type: 0 -> public, 1 -> random\n    cmd.writeUInt8(0x00, 10); // filter: 0 -> all event types\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_PARAMETERS_CMD);\n    this.debug(\"set scan parameters - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public async setScanEnabledWait(enabled: boolean, filterDuplicates: boolean) {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_ENABLE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n    cmd.writeUInt8(filterDuplicates ? 0x01 : 0x00, 5); // duplicates: 0 -> duplicates, 0 -> duplicates\n\n    this.debug(\"set scan enabled - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_ENABLE_CMD);\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public async createLeConnWait(address: any, addressType: any, timeout: number = 90 * 1000) {\n    const cmd: any = Buffer.alloc(29);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_CREATE_CONN_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x19, 3);\n\n    // data\n    cmd.writeUInt16LE(0x0060, 4); // interval\n    cmd.writeUInt16LE(0x0030, 6); // window\n    cmd.writeUInt8(0x00, 8); // initiator filter\n\n    cmd.writeUInt8(addressType === \"random\" ? 0x01 : 0x00, 9); // peer address type\n    Buffer.from(\n      address\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    ).copy(cmd, 10); // peer address\n\n    cmd.writeUInt8(0x00, 16); // own address type\n\n    cmd.writeUInt16LE(0x0006, 17); // min interval\n    cmd.writeUInt16LE(0x000c, 19); // max interval\n    cmd.writeUInt16LE(0x0000, 21); // latency\n    cmd.writeUInt16LE(0x00c8, 23); // supervision timeout\n    cmd.writeUInt16LE(0x0004, 25); // min ce length\n    cmd.writeUInt16LE(0x0006, 27); // max ce length\n\n    this.debug(\"create le conn - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readLeMetaEventWait(COMMANDS.EVT_LE_CONN_COMPLETE, {\n      timeout,\n      onTimeout: async () => {\n        // 一定時間経過。onTimeoutをオーバーライドしてreject()されるのを防ぎ、キャンセルリクエストする。キャンセルされると接続失敗が返るので待つ\n        await this.createLeConnCancelWait();\n      },\n    });\n    this._socket.write(cmd);\n\n    try {\n      const { status, data } = await p;\n      return this.processLeConnComplete(status, data);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  public async createLeConnCancelWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_CREATE_CONN_CANCEL_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    /*\n     * 成功すると0x00 失敗で 0x01~0xFFが帰る\n     * 特に接続処理中じゃない場合は 0x0x(command disallowed)がかえる\n     * キャンセルに成功してその応答が来たあとには\n     * LE Connection Complete or an HCI_LE_Enhanced_Connection_Complete event\n     * のどちらかがちゃんと返る\n     */\n    this.debug(\"create le conn cancel - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_CREATE_CONN_CANCEL_CMD);\n    this._socket.write(cmd);\n\n    const { status } = await p;\n    if (status !== 0x00) {\n      throw new ObnizBleHciStateError(status);\n    }\n  }\n\n  public async connUpdateLeWait(\n    handle: Handle,\n    minInterval: number,\n    maxInterval: number,\n    latency: number,\n    supervisionTimeout: number,\n  ) {\n    const cmd: any = Buffer.alloc(18);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_CONN_UPDATE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0e, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4);\n    cmd.writeUInt16LE(Math.floor(minInterval / 1.25), 6); // min interval\n    cmd.writeUInt16LE(Math.floor(maxInterval / 1.25), 8); // max interval\n    cmd.writeUInt16LE(latency, 10); // latency\n    cmd.writeUInt16LE(Math.floor(supervisionTimeout / 10), 12); // supervision timeout\n    cmd.writeUInt16LE(0x0000, 14); // min ce length\n    cmd.writeUInt16LE(0x0000, 16); // max ce length\n\n    this.debug(\"conn update le - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readLeMetaEventWait(COMMANDS.EVT_LE_CONN_UPDATE_COMPLETE);\n    this._socket.write(cmd);\n\n    const { status, data } = await p;\n    return this.processLeConnUpdateComplete(status, data);\n  }\n\n  // this function is use by connUpdateLeWait / processLeMetaEvent.\n  public processLeConnUpdateComplete(status: any, data: any) {\n    const handle: Handle = data.readUInt16LE(0);\n    const interval: any = data.readUInt16LE(2) * 1.25;\n    const latency: any = data.readUInt16LE(4); // TODO: multiplier?\n    const supervisionTimeout: any = data.readUInt16LE(6) * 10;\n\n    this.debug(\"\\t\\t\\thandle = \" + handle);\n    this.debug(\"\\t\\t\\tinterval = \" + interval);\n    this.debug(\"\\t\\t\\tlatency = \" + latency);\n    this.debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\n\n    return { status, handle, interval, latency, supervisionTimeout };\n  }\n\n  public async startLeEncryptionWait(handle: Handle, random: Buffer, diversifier: Buffer, key: Buffer) {\n    const cmd: any = Buffer.alloc(32);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_START_ENCRYPTION_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x1c, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n    random.copy(cmd, 6);\n    diversifier.copy(cmd, 14);\n    key.copy(cmd, 16);\n\n    // console.log(\"start le encryption - writing: \" + cmd.toString(\"hex\"));\n    const p1 = this._obnizHci.readWait([COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_ENCRYPT_CHANGE], {\n      waitingFor: \"EVT_ENCRYPT_CHANGE\",\n    });\n    const p2 = this._obnizHci.readWait([COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_ENCRYPTION_KEY_REFRESH_COMPLETE], {\n      waitingFor: \"EVT_ENCRYPTION_KEY_REFRESH_COMPLETE\",\n    });\n\n    this.debug(\"start le encryption - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await Promise.race([p1, p2]);\n    // const data = await p1;\n    // console.log(\"start le encryption - data: \" + data.toString(\"hex\"));\n    if (data.readUInt8(1) === COMMANDS.EVT_ENCRYPT_CHANGE) {\n      if (data.length !== 7) {\n        throw new Error(`le encryption event EVT_ENCRYPT_CHANGE length must be 7 but recieved ${data.length}`);\n      }\n      const status = data.readUInt8(3);\n      if (status !== 0x00) {\n        throw new Error(`le encryption event EVT_ENCRYPT_CHANGE failed with error ${status}`);\n      }\n      const encHandle: Handle = data.readUInt16LE(4);\n      const encrypt: any = data.readUInt8(6);\n\n      this.debug(\"\\t\\thandle = \" + encHandle);\n      this.debug(\"\\t\\tencrypt = \" + encrypt);\n\n      this.emit(\"encryptChange\", encHandle, encrypt);\n      return encrypt;\n    } else if (data[1] === COMMANDS.EVT_ENCRYPTION_KEY_REFRESH_COMPLETE) {\n      if (data.length !== 6) {\n        throw new Error(\n          `le encryption event EVT_ENCRYPTION_KEY_REFRESH_COMPLETE length must be 7 but recieved ${data.length}`,\n        );\n      }\n      const status = data.readUInt8(3);\n      if (status !== 0x00) {\n        throw new Error(`le encryption event EVT_ENCRYPTION_KEY_REFRESH_COMPLETE failed with error ${status}`);\n      }\n      const encHandle: Handle = data.readUInt16LE(4);\n\n      this.debug(\"\\t\\thandle = \" + encHandle);\n      return \"refresh\";\n    }\n    throw new Error(\"Never Happend\");\n  }\n\n  public disconnect(handle: Handle, reason?: number) {\n    const cmd: any = Buffer.alloc(7);\n\n    reason = reason || COMMANDS.HCI_OE_USER_ENDED_CONNECTION;\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.DISCONNECT_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x03, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n    cmd.writeUInt8(reason, 6); // reason\n\n    this.debug(\"disconnect - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async readRssiWait(handle: Handle) {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_RSSI_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_RSSI_CMD, [handle & 0xff, (handle >> 8) & 0xff]);\n    this.debug(\"read rssi - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n    if (handle !== data.result.readUInt16LE(0)) {\n      throw new Error(\"handle is different\");\n    }\n    const rssi: any = data.result.readInt8(2);\n\n    this.debug(\"\\t\\t\\thandle = \" + handle);\n    this.debug(\"\\t\\t\\trssi = \" + rssi);\n\n    return rssi;\n  }\n\n  public async setAdvertisingParametersWait() {\n    const cmd: any = Buffer.alloc(19);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISING_PARAMETERS_CMD, 1);\n\n    // length\n    cmd.writeUInt8(15, 3);\n\n    const advertisementInterval: any = Math.floor(\n      (process.env.BLENO_ADVERTISING_INTERVAL ? parseFloat(process.env.BLENO_ADVERTISING_INTERVAL) : 100) * 1.6,\n    );\n\n    // data\n    cmd.writeUInt16LE(advertisementInterval, 4); // min interval\n    cmd.writeUInt16LE(advertisementInterval, 6); // max interval\n    cmd.writeUInt8(0x00, 8); // adv type\n    cmd.writeUInt8(0x00, 9); // own addr typ\n    cmd.writeUInt8(0x00, 10); // direct addr type\n    Buffer.from(\"000000000000\", \"hex\").copy(cmd, 11); // direct addr\n    cmd.writeUInt8(0x07, 17);\n    cmd.writeUInt8(0x00, 18);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISING_PARAMETERS_CMD);\n    this.debug(\"set advertisement parameters - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n\n    // this.emit(\"stateChange\", \"poweredOn\"); // TODO : really need?\n    return data.status;\n  }\n\n  public async setAdvertisingDataWait(data: any) {\n    const cmd: any = Buffer.alloc(36);\n\n    cmd.fill(0x00);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISING_DATA_CMD, 1);\n\n    // length\n    cmd.writeUInt8(32, 3);\n\n    // data\n    cmd.writeUInt8(data.length, 4);\n    data.copy(cmd, 5);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISING_DATA_CMD);\n\n    this.debug(\"set advertisement data - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const result = await p;\n\n    return result.status;\n  }\n\n  public async setScanResponseDataWait(data: any) {\n    const cmd: any = Buffer.alloc(36);\n\n    cmd.fill(0x00);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_RESPONSE_DATA_CMD, 1);\n\n    // length\n    cmd.writeUInt8(32, 3);\n\n    // data\n    cmd.writeUInt8(data.length, 4);\n    data.copy(cmd, 5);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_RESPONSE_DATA_CMD);\n    this.debug(\"set scan response data - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const result = await p;\n\n    return result.status;\n  }\n\n  public async setAdvertiseEnableWait(enabled: any) {\n    const cmd: any = Buffer.alloc(5);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISE_ENABLE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x01, 3);\n\n    // data\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISE_ENABLE_CMD);\n    this.debug(\"set advertise enable - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public async leReadBufferSizeWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_READ_BUFFER_SIZE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_READ_BUFFER_SIZE_CMD);\n    this.debug(\"le read buffer size - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n    if (!data.status) {\n      await this.processLeReadBufferSizeWait(data.result);\n    }\n  }\n\n  public async readBufferSizeWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_BUFFER_SIZE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_BUFFER_SIZE_CMD);\n    this.debug(\"read buffer size - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    if (!data.status) {\n      const aclMtu: any = data.result.readUInt16LE(0);\n      const aclMaxInProgress: any = data.result.readUInt16LE(3);\n      // sanity\n      if (aclMtu && aclMaxInProgress) {\n        this.debug(\"br/edr acl mtu = \" + aclMtu);\n        this.debug(\"br/edr acl max pkts = \" + aclMaxInProgress);\n        this._aclMtu = aclMtu;\n        this._aclMaxInProgress = aclMaxInProgress;\n        return { aclMtu, aclMaxInProgress };\n      }\n    }\n    return null;\n  }\n\n  public queueAclDataPkt(handle: Handle, cid: any, data: any) {\n    let hf: any = handle | (COMMANDS.ACL_START_NO_FLUSH << 12);\n    // l2cap pdu may be fragmented on hci level\n    let l2capPdu: any = Buffer.alloc(4 + data.length);\n    l2capPdu.writeUInt16LE(data.length, 0);\n    l2capPdu.writeUInt16LE(cid, 2);\n    data.copy(l2capPdu, 4);\n    let fragId: any = 0;\n\n    while (l2capPdu.length) {\n      const frag: any = l2capPdu.slice(0, this._aclMtu);\n      l2capPdu = l2capPdu.slice(frag.length);\n      const pkt: any = Buffer.alloc(5 + frag.length);\n\n      // hci header\n      pkt.writeUInt8(COMMANDS.HCI_ACLDATA_PKT, 0);\n      pkt.writeUInt16LE(hf, 1);\n      hf |= COMMANDS.ACL_CONT << 12;\n      pkt.writeUInt16LE(frag.length, 3); // hci pdu length\n\n      frag.copy(pkt, 5);\n\n      this._aclOutQueue.push({\n        handle,\n        pkt,\n        fragId: fragId++,\n      });\n    }\n\n    this.pushAclOutQueue();\n  }\n\n  public pushAclOutQueue() {\n    this.debug(\"pushAclOutQueue\");\n    let inProgress: any = 0;\n    for (const handle in this._handleAclsInProgress) {\n      inProgress += this._handleAclsInProgress[handle];\n    }\n    this.debug(inProgress, this._aclMaxInProgress, this._aclOutQueue.length);\n    while (inProgress < this._aclMaxInProgress && this._aclOutQueue.length) {\n      inProgress++;\n      this.writeOneAclDataPkt();\n    }\n\n    if (inProgress >= this._aclMaxInProgress && this._aclOutQueue.length) {\n      this.debug(\"acl out queue congested\");\n      this.debug(\"\\tin progress = \" + inProgress);\n      this.debug(\"\\twaiting = \" + this._aclOutQueue.length);\n    }\n  }\n\n  public writeOneAclDataPkt() {\n    this.debug(\"writeOneAclDataPkt\");\n    const pkt: any = this._aclOutQueue.shift();\n    this._handleAclsInProgress[pkt.handle]++;\n    this.debug(\n      \"write acl data pkt frag \" + pkt.fragId + \" handle \" + pkt.handle + \" - writing: \" + pkt.pkt.toString(\"hex\"),\n    );\n    this._socket.write(pkt.pkt);\n  }\n\n  public writeAclDataPkt(handle: Handle, cid: any, data: any) {\n    const pkt: any = Buffer.alloc(9 + data.length);\n\n    // header\n    pkt.writeUInt8(COMMANDS.HCI_ACLDATA_PKT, 0);\n    pkt.writeUInt16LE(handle | (COMMANDS.ACL_START_NO_FLUSH << 12), 1);\n    pkt.writeUInt16LE(data.length + 4, 3); // data length 1  for acl data on HCI\n    pkt.writeUInt16LE(data.length, 5); // data length 2  for l2cap\n    pkt.writeUInt16LE(cid, 7);\n\n    data.copy(pkt, 9);\n\n    this.debug(\"write acl data pkt - writing: \" + pkt.toString(\"hex\"));\n    this._socket.write(pkt);\n  }\n\n  public async longTermKeyRequestNegativeReply(handle: Handle) {\n    throw new Error(\"TODO: no checked\");\n\n    const cmd: any = Buffer.alloc(5);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_LTK_NEG_REPLY_CMD, 1);\n\n    // length\n    cmd.writeUInt16LE(handle, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_LTK_NEG_REPLY_CMD);\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public processLeMetaEvent(eventType: any, status: any, data: any) {\n    if (eventType === COMMANDS.EVT_LE_ADVERTISING_REPORT) {\n      this.processLeAdvertisingReport(status, data);\n    } else if (eventType === COMMANDS.EVT_LE_CONN_COMPLETE) {\n      this.processLeConnComplete(status, data);\n    } else if (eventType === COMMANDS.EVT_LE_CONN_UPDATE_COMPLETE) {\n      const { handle, interval, latency, supervisionTimeout } = this.processLeConnUpdateComplete(status, data);\n      this.emit(\"leConnUpdateComplete\", status, handle, interval, latency, supervisionTimeout);\n    }\n  }\n\n  public processLeConnComplete(status: any, data: any) {\n    const handle: Handle = data.readUInt16LE(0);\n    const role: any = data.readUInt8(2);\n    const addressType: any = data.readUInt8(3) === 0x01 ? \"random\" : \"public\";\n    const address: any = data\n      .slice(4, 10)\n      .toString(\"hex\")\n      .match(/.{1,2}/g)\n      .reverse()\n      .join(\":\");\n    const interval: any = data.readUInt16LE(10) * 1.25;\n    const latency: any = data.readUInt16LE(12); // TODO: multiplier?\n    const supervisionTimeout: any = data.readUInt16LE(14) * 10;\n    const masterClockAccuracy: any = data.readUInt8(16); // TODO: multiplier?\n\n    this.debug(\"\\t\\t\\thandle = \" + handle);\n    this.debug(\"\\t\\t\\trole = \" + role);\n    this.debug(\"\\t\\t\\taddress type = \" + addressType);\n    this.debug(\"\\t\\t\\taddress = \" + address);\n    this.debug(\"\\t\\t\\tinterval = \" + interval);\n    this.debug(\"\\t\\t\\tlatency = \" + latency);\n    this.debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\n    this.debug(\"\\t\\t\\tmaster clock accuracy = \" + masterClockAccuracy);\n\n    this._handleAclsInProgress[handle] = 0;\n\n    if (role === 1) {\n      // only slave, emit\n\n      this.emit(\n        \"leConnComplete\",\n        status,\n        handle,\n        role,\n        addressType,\n        address,\n        interval,\n        latency,\n        supervisionTimeout,\n        masterClockAccuracy,\n      );\n    }\n\n    return {\n      status,\n      handle,\n      role,\n      addressType,\n      address,\n      interval,\n      latency,\n      supervisionTimeout,\n      masterClockAccuracy,\n    };\n  }\n\n  public processLeAdvertisingReport(count: any, data: any) {\n    for (let i = 0; i < count; i++) {\n      const type: any = data.readUInt8(0);\n      const addressType: any = data.readUInt8(1) === 0x01 ? \"random\" : \"public\";\n      const address: any = data\n        .slice(2, 8)\n        .toString(\"hex\")\n        .match(/.{1,2}/g)\n        .reverse()\n        .join(\":\");\n      const eirLength: any = data.readUInt8(8);\n      const eir: any = data.slice(9, eirLength + 9);\n      const rssi: any = data.readInt8(eirLength + 9);\n\n      this.debug(\"\\t\\t\\ttype = \" + type);\n      this.debug(\"\\t\\t\\taddress = \" + address);\n      this.debug(\"\\t\\t\\taddress type = \" + addressType);\n      this.debug(\"\\t\\t\\teir = \" + eir.toString(\"hex\"));\n      this.debug(\"\\t\\t\\trssi = \" + rssi);\n\n      this.emit(\"leAdvertisingReport\", 0, type, address, addressType, eir, rssi);\n\n      data = data.slice(eirLength + 10);\n    }\n  }\n\n  public processCmdStatusEvent(cmd: any, status: any) {\n    if (cmd === COMMANDS.LE_CREATE_CONN_CMD) {\n      if (status !== 0) {\n        this.emit(\"leConnComplete\", status);\n      }\n    }\n  }\n\n  public async processLeReadBufferSizeWait(result: any) {\n    const aclMtu: any = result.readUInt16LE(0);\n    const aclMaxInProgress: any = result.readUInt8(2);\n    if (!aclMtu) {\n      // as per Bluetooth specs\n      this.debug(\"falling back to br/edr buffer size\");\n      await this.readBufferSizeWait();\n    } else {\n      this.debug(\"le acl mtu = \" + aclMtu);\n      this.debug(\"le acl max in progress = \" + aclMaxInProgress);\n      this._aclMtu = aclMtu;\n      this._aclMaxInProgress = aclMaxInProgress;\n    }\n  }\n\n  public stateChange(state: HciState) {\n    this._state = state;\n    this.emit(\"stateChange\", state);\n  }\n\n  public async readAclStreamWait(handle: Handle, cid: number, firstData: number, timeout?: number): Promise<Buffer> {\n    return this._obnizHci.timeoutPromiseWrapper(\n      new Promise((resolve) => {\n        const key = (cid << 8) + firstData;\n        this._aclStreamObservers[handle] = this._aclStreamObservers[handle] || [];\n        this._aclStreamObservers[handle][key] = this._aclStreamObservers[handle][cid] || [];\n        this._aclStreamObservers[handle][key].push(resolve);\n      }),\n      { timeout, waitingFor: `readAclStream handle:${handle} cid:${cid} firstData:${firstData}` },\n    );\n  }\n\n  protected async readLeMetaEventWait(eventType: number, options?: any) {\n    const filter = this.createLeMetaEventFilter(eventType);\n    options = options || {};\n    options.waitingFor = \"LeMetaEvent \" + JSON.stringify(filter);\n    const data = await this._obnizHci.readWait(filter, options);\n\n    const type: any = data.readUInt8(3);\n    const status: any = data.readUInt8(4);\n    const _data: any = data.slice(5);\n    return { type, status, data: _data };\n  }\n\n  protected createLeMetaEventFilter(eventType: number): number[] {\n    return [COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_LE_META_EVENT, -1, eventType];\n  }\n\n  protected async readCmdCompleteEventWait(\n    requestCmd: number,\n    additionalResultFilter?: number[],\n  ): Promise<{ eventType: number; subEventType: number; ncmd: number; cmd: number; status: number; result: Buffer }> {\n    additionalResultFilter = additionalResultFilter || [];\n    let filter = this.createCmdCompleteEventFilter(requestCmd);\n    if (additionalResultFilter.length > 0) {\n      filter = [\n        ...filter,\n        -1, // status\n        ...additionalResultFilter,\n      ];\n    }\n    const options: any = {};\n    options.waitingFor = \"CmdCompleteEvent \" + JSON.stringify(filter);\n    const data = await this._obnizHci.readWait(filter, options);\n\n    const eventType: any = data.readUInt8(0);\n    const subEventType: any = data.readUInt8(1);\n    const ncmd: any = data.readUInt8(3);\n    const cmd: any = data.readUInt16LE(4);\n    const status: any = data.readUInt8(6);\n    const result: any = data.slice(7);\n\n    return { eventType, subEventType, ncmd, cmd, status, result };\n  }\n\n  protected createCmdCompleteEventFilter(cmd: number): number[] {\n    return [COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_CMD_COMPLETE, -1, -1, (cmd >> 0) & 0xff, (cmd >> 8) & 0xff];\n  }\n\n  private debug(...args: any) {\n    this.debugHandler(`${args[0]}`);\n  }\n\n  private onHciAclData(data: Buffer) {\n    const flags: any = data.readUInt16LE(1) >> 12;\n    const handle: Handle = data.readUInt16LE(1) & 0x0fff;\n\n    if (COMMANDS.ACL_START === flags) {\n      const cid: any = data.readUInt16LE(7);\n\n      const length: any = data.readUInt16LE(5);\n      const pktData: Buffer = data.slice(9);\n\n      this.debug(\"\\t\\tcid = \" + cid);\n\n      if (length === pktData.length) {\n        this.debug(\"\\t\\thandle = \" + handle);\n        this.debug(\"\\t\\tdata = \" + pktData.toString(\"hex\"));\n\n        this.emit(\"aclDataPkt\", handle, cid, pktData);\n        const key = (cid << 8) + pktData.readUInt8(0);\n        if (\n          this._aclStreamObservers[handle] &&\n          this._aclStreamObservers[handle][key] &&\n          this._aclStreamObservers[handle][key].length > 0\n        ) {\n          const resolve = this._aclStreamObservers[handle][key].shift()!;\n          resolve(pktData);\n        }\n      } else {\n        this._handleBuffers[handle] = {\n          length,\n          cid,\n          data: pktData,\n        };\n      }\n    } else if (COMMANDS.ACL_CONT === flags) {\n      if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {\n        return;\n      }\n\n      this._handleBuffers[handle].data = Buffer.concat([this._handleBuffers[handle].data, data.slice(5)]);\n\n      if (this._handleBuffers[handle].data.length === this._handleBuffers[handle].length) {\n        this.emit(\"aclDataPkt\", handle, this._handleBuffers[handle].cid, this._handleBuffers[handle].data);\n        const key = (this._handleBuffers[handle].cid << 8) + this._handleBuffers[handle].data.readUInt8(0);\n        if (\n          this._aclStreamObservers[handle] &&\n          this._aclStreamObservers[handle][key] &&\n          this._aclStreamObservers[handle][key].length > 0\n        ) {\n          const resolve = this._aclStreamObservers[handle][key].shift()!;\n          resolve(this._handleBuffers[handle].data);\n        }\n        delete this._handleBuffers[handle];\n      }\n    }\n  }\n\n  private onHciEventData(data: Buffer) {\n    const subEventType: any = data.readUInt8(1);\n\n    this.debug(\"\\tsub event type = 0x\" + subEventType.toString(16));\n\n    if (subEventType === COMMANDS.EVT_DISCONN_COMPLETE) {\n      const handle: Handle = data.readUInt16LE(4);\n      const reason: any = data.readUInt8(6);\n\n      this.debug(\"\\t\\thandle = \" + handle);\n      this.debug(\"\\t\\treason = \" + reason);\n\n      delete this._handleAclsInProgress[handle];\n      const aclOutQueue: any = [];\n      let discarded: any = 0;\n      for (const i in this._aclOutQueue) {\n        if (this._aclOutQueue[i].handle !== handle) {\n          aclOutQueue.push(this._aclOutQueue[i]);\n        } else {\n          discarded++;\n        }\n      }\n      if (discarded) {\n        this.debug(\"\\t\\tacls discarded = \" + discarded);\n      }\n      this._aclOutQueue = aclOutQueue;\n      this.pushAclOutQueue();\n\n      this.emit(\"disconnComplete\", handle, reason);\n    } else if (subEventType === COMMANDS.EVT_ENCRYPT_CHANGE) {\n      const status: any = data.readUInt8(3);\n      const handle: Handle = data.readUInt16LE(4);\n      const encrypt: any = data.readUInt8(6);\n\n      if (status === 0) {\n        this.debug(\"\\t\\thandle = \" + handle);\n        this.debug(\"\\t\\tencrypt = \" + encrypt);\n        this.emit(\"encryptChange\", handle, encrypt);\n      } else {\n        this.debug(\"\\t\\tencrypt status = \" + status);\n        this.debug(\"\\t\\thandle = \" + handle);\n        this.debug(\"\\t\\tencrypt = \" + encrypt);\n        this.emit(\"encryptChange\", handle, encrypt);\n      }\n    } else if (subEventType === COMMANDS.EVT_CMD_COMPLETE) {\n      // command complete event are handle each command send functions;\n    } else if (subEventType === COMMANDS.EVT_CMD_STATUS) {\n      const status: any = data.readUInt8(3);\n      const cmd: any = data.readUInt16LE(5);\n\n      this.debug(\"\\t\\tstatus = \" + status);\n      this.debug(\"\\t\\tcmd = \" + cmd);\n\n      this.processCmdStatusEvent(cmd, status);\n    } else if (subEventType === COMMANDS.EVT_LE_META_EVENT) {\n      const leMetaEventType: any = data.readUInt8(3);\n      const leMetaEventStatus: any = data.readUInt8(4);\n      const leMetaEventData: any = data.slice(5);\n\n      this.debug(\"\\t\\tLE meta event type = \" + leMetaEventType);\n      this.debug(\"\\t\\tLE meta event status = \" + leMetaEventStatus);\n      this.debug(\"\\t\\tLE meta event data = \" + leMetaEventData.toString(\"hex\"));\n\n      this.processLeMetaEvent(leMetaEventType, leMetaEventStatus, leMetaEventData);\n    } else if (subEventType === COMMANDS.EVT_NUMBER_OF_COMPLETED_PACKETS) {\n      const handles: any = data.readUInt8(3);\n      for (let i = 0; i < handles; i++) {\n        const handle: Handle = data.readUInt16LE(4 + i * 4);\n        const pkts: any = data.readUInt16LE(6 + i * 4);\n        this.debug(\"\\thandle = \" + handle);\n        this.debug(\"\\t\\tcompleted = \" + pkts);\n        if (this._handleAclsInProgress[handle] === undefined) {\n          this.debug(\"\\t\\talready closed\");\n          continue;\n        }\n        if (pkts > this._handleAclsInProgress[handle]) {\n          // Linux kernel may send acl packets by itself, so be ready for underflow\n          this._handleAclsInProgress[handle] = 0;\n        } else {\n          this._handleAclsInProgress[handle] -= pkts;\n        }\n        this.debug(\"\\t\\tin progress = \" + this._handleAclsInProgress[handle]);\n      }\n      this.pushAclOutQueue();\n    }\n  }\n\n  private onSocketData(array: any) {\n    const data: any = Buffer.from(array);\n    this.debug(\"onSocketData: \" + data.toString(\"hex\"));\n\n    const eventType: any = data.readUInt8(0);\n\n    this.debug(\"\\tevent type = 0x\" + eventType.toString(16));\n\n    if (COMMANDS.HCI_EVENT_PKT === eventType) {\n      this.onHciEventData(data);\n    } else if (COMMANDS.HCI_ACLDATA_PKT === eventType) {\n      this.onHciAclData(data);\n    }\n  }\n}\n\nHci.STATUS_MAPPER = STATUS_MAPPER;\nexport default Hci;\n"]}