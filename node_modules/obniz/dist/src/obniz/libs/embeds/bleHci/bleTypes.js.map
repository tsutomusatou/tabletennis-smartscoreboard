{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleTypes.ts"],"names":[],"mappings":";AAAA;;;GAGG","file":"bleTypes.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\n\nimport BleCharacteristic from \"./bleCharacteristic\";\nimport BleDescriptor from \"./bleDescriptor\";\n\n/**\n * BLE UUID. Case is ignored. So aa00 and AA00 are the same.\n */\nexport type UUID = string;\nexport type BleDeviceAddress = string;\nexport type Handle = number;\n\nexport type BleDeviceType = \"ble\" | \"dumo\" | \"breder\";\nexport type BleDeviceAddressType = \"public\" | \"random\" | \"rpa_public\" | \"rpa_random\";\nexport type BleEventType =\n  | \"connectable_advertisemnt\"\n  | \"connectable_directed_advertisemnt\"\n  | \"scannable_advertising\"\n  | \"non_connectable_advertising\"\n  | \"scan_response\";\n\nexport type BleAttributePropery = \"broadcast\" | \"notify\" | \"read\" | \"write\" | \"write_without_response\" | \"indicate\";\n\nexport type BleAdvertisementFlag =\n  | \"limited_discoverable_mode\"\n  | \"general_discoverable_mode\"\n  | \"br_edr_not_supported\"\n  | \"le_br_edr_controller\"\n  | \"le_br_edr_host\";\n\nexport interface BleScanResponseData {\n  serviceUuids?: UUID[];\n  localName?: string;\n  manufacturerData?: {\n    companyCode?: number;\n    data?: number[];\n  };\n}\n\nexport interface BleAdvertisementData extends BleScanResponseData {\n  flags?: BleAdvertisementFlag[];\n}\n\nexport interface BleDescriptorDefine {\n  /**\n   * UUID\n   */\n  uuid: UUID;\n\n  /**\n   * Raw data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  data?: number[];\n\n  /**\n   * String data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  text?: string;\n}\n\nexport interface BleCharacteristicDefine {\n  /**\n   * UUID\n   */\n  uuid: UUID;\n\n  /**\n   * Raw data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  data?: number[];\n\n  /**\n   * String data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  text?: string;\n\n  properties?: BleAttributePropery[];\n\n  descriptors?: Array<BleDescriptorDefine | BleDescriptor>;\n}\n\nexport interface BleServiceDefine {\n  /**\n   * UUID\n   */\n  uuid: UUID;\n\n  characteristics?: Array<BleCharacteristicDefine | BleCharacteristic>;\n}\n\nexport interface BlePeripheralDefine {}\n"]}