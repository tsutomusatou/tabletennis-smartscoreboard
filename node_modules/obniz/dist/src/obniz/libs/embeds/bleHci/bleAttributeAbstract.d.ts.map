{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleAttributeAbstract.ts"],"names":[],"mappings":"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","file":"bleAttributeAbstract.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport EventEmitter from \"eventemitter3\";\nimport { ObnizDeprecatedFunctionError } from \"../../../ObnizError\";\nimport ObnizUtil from \"../../utils/util\";\nimport BleHelper from \"./bleHelper\";\nimport { BleDeviceAddress, UUID } from \"./bleTypes\";\n\nexport default abstract class BleAttributeAbstract<ParentClass, ChildrenClass> {\n  /**\n   * @ignore\n   */\n  get childrenClass(): any {\n    return Object;\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenName(): string | null {\n    return null;\n  }\n\n  /**\n   * @ignore\n   */\n  get parentName(): string | null {\n    return null;\n  }\n\n  /**\n   * It is uuid as string.\n   *\n   * ```javascript\n   * console.log(attr.uuid); // => '4C84'\n   * ```\n   */\n  public uuid: UUID;\n\n  /**\n   * @ignore\n   */\n  public onwrite?: (result: any) => void;\n\n  /**\n   * @ignore\n   */\n  public onread?: (data: any) => void;\n\n  /**\n   * @ignore\n   */\n  public onwritefromremote?: (address: BleDeviceAddress, data: number[]) => void;\n\n  /**\n   * @ignore\n   */\n  public onreadfromremote?: (address: BleDeviceAddress) => void;\n\n  protected parent: ParentClass | null;\n  protected children: ChildrenClass[];\n  protected isRemote: boolean;\n  protected discoverdOnRemote: any;\n  protected data: any;\n  protected emitter: EventEmitter;\n\n  constructor(params: any) {\n    this.uuid = BleHelper.uuidFilter(params.uuid);\n    this.parent = null;\n    this.children = [];\n\n    this.isRemote = false;\n    this.discoverdOnRemote = false;\n\n    this.data = params.data || null;\n    if (!this.data && params.text) {\n      this.data = ObnizUtil.string2dataArray(params.text);\n    }\n    if (!this.data && params.value) {\n      this.data = [params.value];\n    }\n\n    if (params[this.childrenName!]) {\n      for (const child of params[this.childrenName!]) {\n        this.addChild(child);\n      }\n    }\n\n    this.setFunctions();\n\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * @ignore\n   * @param child\n   */\n  public addChild(child: { uuid: UUID } | ChildrenClass): ChildrenClass {\n    if (!(child instanceof this.childrenClass)) {\n      const childrenClass: any = this.childrenClass;\n      child = new childrenClass(child);\n    }\n    const childobj = child as any;\n    childobj.parent = this;\n\n    this.children.push(childobj);\n    return childobj;\n  }\n\n  /**\n   * @ignore\n   * @param uuid\n   */\n  public getChild(uuid: UUID): ChildrenClass | null {\n    uuid = BleHelper.uuidFilter(uuid);\n    const result = this.children\n      .filter((element: any) => {\n        return BleHelper.uuidFilter(element.uuid) === uuid;\n      })\n      .shift();\n    if (!result) {\n      return null;\n    }\n    return result;\n  }\n\n  /**\n   * @ignore\n   */\n  public toJSON() {\n    const obj: any = {\n      uuid: BleHelper.uuidFilter(this.uuid),\n    };\n\n    if (this.childrenName) {\n      const key: any = this.childrenName;\n      obj[key] = this.children;\n    }\n    if (this.data) {\n      obj.data = this.data;\n    }\n    return obj;\n  }\n\n  /**\n   * WS COMMANDS\n   */\n\n  /**\n   * @ignore\n   */\n  public abstract readWait(): Promise<number[]>;\n\n  /**\n   * @ignore\n   */\n  public async readTextWait(): Promise<string | null> {\n    const data = await this.readWait();\n    return ObnizUtil.dataArray2string(data);\n  }\n\n  /**\n   * @ignore\n   */\n  public async readNumberWait(): Promise<number | null> {\n    const data = await this.readWait();\n    return data.length > 0 ? data[0] : null;\n  }\n\n  /**\n   * @ignore\n   */\n  public abstract writeWait(data: number[], needResponse?: boolean): Promise<boolean>;\n\n  /**\n   * Use writeTextWait() instead from 3.5.0\n   * @ignore\n   * @deprecated\n   */\n  public writeText(str: string, needResponse?: boolean) {\n    throw new ObnizDeprecatedFunctionError(\"writeText\", \"writeTextWait\");\n  }\n\n  /**\n   * @ignore\n   */\n  public async writeTextWait(str: string, needResponse?: boolean): Promise<boolean> {\n    return await this.writeWait(ObnizUtil.string2dataArray(str), needResponse);\n  }\n\n  /**\n   * Use writeNumberWait() instead from 3.5.0\n   * @ignore\n   * @deprecated\n   */\n  public writeNumber(val: number, needResponse?: boolean) {\n    throw new ObnizDeprecatedFunctionError(\"writeNumber\", \"writeNumberWait\");\n  }\n\n  /**\n   * @ignore\n   */\n  public async writeNumberWait(val: number, needResponse?: boolean): Promise<boolean> {\n    return await this.writeWait([val], needResponse);\n  }\n\n  /**\n   * @ignore\n   */\n  public readFromRemoteWait(): Promise<void> {\n    return new Promise((resolve: any) => {\n      this.emitter.once(\"onreadfromremote\", () => {\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public writeFromRemoteWait(): Promise<number[]> {\n    return new Promise((resolve: any) => {\n      this.emitter.once(\"onreadfromremote\", (params: any) => {\n        resolve(params.data);\n      });\n    });\n  }\n\n  /**\n   * @ignore\n   * @param err\n   */\n  public onerror(err: any) {\n    console.error(err.message);\n  }\n\n  /**\n   * @ignore\n   * @param notifyName\n   * @param params\n   */\n  public notifyFromServer(notifyName: any, params: any) {\n    this.emitter.emit(notifyName, params);\n    switch (notifyName) {\n      case \"onerror\": {\n        this.onerror(params);\n        break;\n      }\n    }\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _runUserCreatedFunction(func?: (...args: any) => any, ...args: any[]) {\n    if (!func) {\n      return;\n    }\n\n    if (typeof func !== \"function\") {\n      return;\n    }\n\n    try {\n      func(...args);\n    } catch (err) {\n      setTimeout(() => {\n        throw err;\n      });\n    }\n  }\n\n  protected setFunctions() {\n    let childrenName: any = this.childrenName;\n    if (childrenName) {\n      childrenName = childrenName.charAt(0).toUpperCase() + childrenName.slice(1);\n      const childName: any = childrenName.slice(0, -1);\n\n      let funcName: string = \"add\" + childName;\n      (this as any)[funcName] = this.addChild;\n\n      funcName = \"get\" + childName;\n      (this as any)[funcName] = this.getChild;\n    }\n\n    const parentName: any = this.parentName;\n    if (parentName) {\n      Object.defineProperty(this, parentName, {\n        get() {\n          return this.parent;\n        },\n        set(newValue: any) {\n          this.parent = newValue;\n        },\n      });\n    }\n  }\n}\n"]}