/// <reference types="node" />
/**
 * @packageDocumentation
 * @ignore
 */
import EventEmitter from "eventemitter3";
import ObnizBLEHci from "../hci";
import { Handle } from "../bleTypes";
declare type HciEventTypes = "leAdvertisingReport" | "leConnComplete" | "stateChange" | "leConnUpdateComplete" | "disconnComplete" | "encryptChange" | "aclDataPkt";
declare type HciState = "poweredOn" | "poweredOff";
/**
 * @ignore
 */
declare class Hci extends EventEmitter<HciEventTypes> {
    static STATUS_MAPPER: any;
    _obnizHci: ObnizBLEHci;
    _handleBuffers: any;
    _socket: any;
    _handleAclsInProgress: any;
    _aclOutQueue: any;
    _aclMtu: any;
    _aclMaxInProgress: any;
    addressType: any;
    address: any;
    private _state;
    private _aclStreamObservers;
    constructor(obnizHci: any);
    debugHandler: any;
    initWait(): Promise<void>;
    setEventMask(): void;
    resetWait(): Promise<void>;
    resetBuffers(): void;
    readLocalVersionWait(): Promise<{
        hciVer: any;
        hciRev: any;
        lmpVer: any;
        manufacturer: any;
        lmpSubVer: any;
    }>;
    readBdAddrWait(): Promise<any>;
    setLeEventMask(): void;
    readLeHostSupportedWait(): Promise<{
        eventType: number;
        subEventType: number;
        ncmd: number;
        cmd: number;
        status: number;
        result: Buffer;
    }>;
    writeLeHostSupported(): void;
    setScanParametersWait(isActiveScan: boolean): Promise<number>;
    setScanEnabledWait(enabled: boolean, filterDuplicates: boolean): Promise<number>;
    createLeConnWait(address: any, addressType: any, timeout?: number): Promise<{
        status: any;
        handle: number;
        role: any;
        addressType: any;
        address: any;
        interval: any;
        latency: any;
        supervisionTimeout: any;
        masterClockAccuracy: any;
    }>;
    createLeConnCancelWait(): Promise<void>;
    connUpdateLeWait(handle: Handle, minInterval: number, maxInterval: number, latency: number, supervisionTimeout: number): Promise<{
        status: any;
        handle: number;
        interval: any;
        latency: any;
        supervisionTimeout: any;
    }>;
    processLeConnUpdateComplete(status: any, data: any): {
        status: any;
        handle: number;
        interval: any;
        latency: any;
        supervisionTimeout: any;
    };
    startLeEncryptionWait(handle: Handle, random: Buffer, diversifier: Buffer, key: Buffer): Promise<any>;
    disconnect(handle: Handle, reason?: number): void;
    readRssiWait(handle: Handle): Promise<any>;
    setAdvertisingParametersWait(): Promise<number>;
    setAdvertisingDataWait(data: any): Promise<number>;
    setScanResponseDataWait(data: any): Promise<number>;
    setAdvertiseEnableWait(enabled: any): Promise<number>;
    leReadBufferSizeWait(): Promise<void>;
    readBufferSizeWait(): Promise<{
        aclMtu: any;
        aclMaxInProgress: any;
    } | null>;
    queueAclDataPkt(handle: Handle, cid: any, data: any): void;
    pushAclOutQueue(): void;
    writeOneAclDataPkt(): void;
    writeAclDataPkt(handle: Handle, cid: any, data: any): void;
    longTermKeyRequestNegativeReply(handle: Handle): Promise<number>;
    processLeMetaEvent(eventType: any, status: any, data: any): void;
    processLeConnComplete(status: any, data: any): {
        status: any;
        handle: number;
        role: any;
        addressType: any;
        address: any;
        interval: any;
        latency: any;
        supervisionTimeout: any;
        masterClockAccuracy: any;
    };
    processLeAdvertisingReport(count: any, data: any): void;
    processCmdStatusEvent(cmd: any, status: any): void;
    processLeReadBufferSizeWait(result: any): Promise<void>;
    stateChange(state: HciState): void;
    readAclStreamWait(handle: Handle, cid: number, firstData: number, timeout?: number): Promise<Buffer>;
    protected readLeMetaEventWait(eventType: number, options?: any): Promise<{
        type: any;
        status: any;
        data: any;
    }>;
    protected createLeMetaEventFilter(eventType: number): number[];
    protected readCmdCompleteEventWait(requestCmd: number, additionalResultFilter?: number[]): Promise<{
        eventType: number;
        subEventType: number;
        ncmd: number;
        cmd: number;
        status: number;
        result: Buffer;
    }>;
    protected createCmdCompleteEventFilter(cmd: number): number[];
    private debug;
    private onHciAclData;
    private onHciEventData;
    private onSocketData;
}
export default Hci;
