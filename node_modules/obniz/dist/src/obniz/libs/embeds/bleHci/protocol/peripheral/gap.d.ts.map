{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/gap.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAOH,OAAO,YAAY,MAAM,eAAe,CAAC;AACzC,OAAO,GAAG,MAAM,QAAQ,CAAC;AAEzB,aAAK,aAAa,GAAG,EAAE,CAAC;AAExB;;GAEG;AACH,cAAM,GAAI,SAAQ,YAAY,CAAC,aAAa,CAAC;IACpC,IAAI,EAAE,GAAG,CAAC;IACV,eAAe,EAAE,GAAG,CAAC;gBAEhB,GAAG,EAAE,GAAG;IAOP,oBAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG;IAwFjD,2BAA2B,CAAC,IAAI,EAAE,GAAG;IA2BrC,+BAA+B,CAAC,iBAAiB,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG;IAuCrE,sBAAsB;IAMtB,mBAAmB;CAKjC;AAED,eAAe,GAAG,CAAC","file":"gap.d.ts","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\n// var debug = require('debug')('gap');\n\n/**\n * @ignore\n */\nconst debug: any = () => {};\nimport EventEmitter from \"eventemitter3\";\nimport Hci from \"../hci\";\n\ntype GapEventTypes = \"\";\n\n/**\n * @ignore\n */\nclass Gap extends EventEmitter<GapEventTypes> {\n  public _hci: Hci;\n  public _advertiseState: any;\n\n  constructor(hci: any) {\n    super();\n    this._hci = hci;\n\n    this._advertiseState = null;\n  }\n\n  public async startAdvertisingWait(name: any, serviceUuids: any) {\n    debug(\"startAdvertising: name = \" + name + \", serviceUuids = \" + JSON.stringify(serviceUuids, null, 2));\n\n    let advertisementDataLength: any = 3;\n    let scanDataLength: any = 0;\n\n    const serviceUuids16bit: any = [];\n    const serviceUuids128bit: any = [];\n    let i: any = 0;\n\n    if (name && name.length) {\n      scanDataLength += 2 + name.length;\n    }\n\n    if (serviceUuids && serviceUuids.length) {\n      for (i = 0; i < serviceUuids.length; i++) {\n        const serviceUuid: any = Buffer.from(\n          serviceUuids[i]\n            .match(/.{1,2}/g)\n            .reverse()\n            .join(\"\"),\n          \"hex\",\n        );\n\n        if (serviceUuid.length === 2) {\n          serviceUuids16bit.push(serviceUuid);\n        } else if (serviceUuid.length === 16) {\n          serviceUuids128bit.push(serviceUuid);\n        }\n      }\n    }\n\n    if (serviceUuids16bit.length) {\n      advertisementDataLength += 2 + 2 * serviceUuids16bit.length;\n    }\n\n    if (serviceUuids128bit.length) {\n      advertisementDataLength += 2 + 16 * serviceUuids128bit.length;\n    }\n\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\n    const scanData: any = Buffer.alloc(scanDataLength);\n\n    // flags\n    advertisementData.writeUInt8(2, 0);\n    advertisementData.writeUInt8(0x01, 1);\n    advertisementData.writeUInt8(0x06, 2);\n\n    let advertisementDataOffset: any = 3;\n\n    if (serviceUuids16bit.length) {\n      advertisementData.writeUInt8(1 + 2 * serviceUuids16bit.length, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      advertisementData.writeUInt8(0x03, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      for (i = 0; i < serviceUuids16bit.length; i++) {\n        serviceUuids16bit[i].copy(advertisementData, advertisementDataOffset);\n        advertisementDataOffset += serviceUuids16bit[i].length;\n      }\n    }\n\n    if (serviceUuids128bit.length) {\n      advertisementData.writeUInt8(1 + 16 * serviceUuids128bit.length, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      advertisementData.writeUInt8(0x06, advertisementDataOffset);\n      advertisementDataOffset++;\n\n      for (i = 0; i < serviceUuids128bit.length; i++) {\n        serviceUuids128bit[i].copy(advertisementData, advertisementDataOffset);\n        advertisementDataOffset += serviceUuids128bit[i].length;\n      }\n    }\n\n    // name\n    if (name && name.length) {\n      const nameBuffer: any = Buffer.alloc(name);\n\n      scanData.writeUInt8(1 + nameBuffer.length, 0);\n      scanData.writeUInt8(0x08, 1);\n      nameBuffer.copy(scanData, 2);\n    }\n\n    await this.startAdvertisingWithEIRDataWait(advertisementData, scanData);\n  }\n\n  public async startAdvertisingIBeaconWait(data: any) {\n    debug(\"startAdvertisingIBeacon: data = \" + data.toString(\"hex\"));\n\n    const dataLength: any = data.length;\n    const manufacturerDataLength: any = 4 + dataLength;\n    const advertisementDataLength: any = 5 + manufacturerDataLength;\n    // let scanDataLength = 0;\n\n    const advertisementData: any = Buffer.alloc(advertisementDataLength);\n    const scanData: any = Buffer.alloc(0);\n\n    // flags\n    advertisementData.writeUInt8(2, 0);\n    advertisementData.writeUInt8(0x01, 1);\n    advertisementData.writeUInt8(0x06, 2);\n\n    advertisementData.writeUInt8(manufacturerDataLength + 1, 3);\n    advertisementData.writeUInt8(0xff, 4);\n    advertisementData.writeUInt16LE(0x004c, 5); // Apple Company Identifier LE (16 bit)\n    advertisementData.writeUInt8(0x02, 7); // type, 2 => iBeacon\n    advertisementData.writeUInt8(dataLength, 8);\n\n    data.copy(advertisementData, 9);\n\n    await this.startAdvertisingWithEIRDataWait(advertisementData, scanData);\n  }\n\n  public async startAdvertisingWithEIRDataWait(advertisementData: any, scanData: any) {\n    advertisementData = advertisementData || Buffer.alloc(0);\n    scanData = scanData || Buffer.alloc(0);\n\n    debug(\n      \"startAdvertisingWithEIRData: advertisement data = \" +\n        advertisementData.toString(\"hex\") +\n        \", scan data = \" +\n        scanData.toString(\"hex\"),\n    );\n\n    if (advertisementData.length > 31) {\n      throw new Error(\"Advertisement data is over maximum limit of 31 bytes\");\n    } else if (scanData.length > 31) {\n      throw new Error(\"Scan data is over maximum limit of 31 bytes\");\n    }\n\n    this._advertiseState = \"starting\";\n\n    const p1 = this._hci.setScanResponseDataWait(scanData);\n    const p2 = this._hci.setAdvertisingDataWait(advertisementData);\n    await Promise.all([p1, p2]);\n    const p3 = this._hci.setAdvertiseEnableWait(true);\n    const p4 = this._hci.setScanResponseDataWait(scanData);\n    const p5 = this._hci.setAdvertisingDataWait(advertisementData);\n    await Promise.all([p3, p4, p5]);\n\n    const status = await p3;\n\n    if (this._advertiseState === \"starting\") {\n      this._advertiseState = \"started\";\n      if (status) {\n        throw new Error(Hci.STATUS_MAPPER[status] || \"Unknown (\" + status + \")\");\n      }\n    } else if (this._advertiseState === \"stopping\") {\n      this._advertiseState = \"stopped\";\n    }\n  }\n\n  public async restartAdvertisingWait() {\n    this._advertiseState = \"restarting\";\n\n    await this._hci.setAdvertiseEnableWait(true);\n  }\n\n  public async stopAdvertisingWait() {\n    this._advertiseState = \"stopping\";\n\n    await this._hci.setAdvertiseEnableWait(false);\n  }\n}\n\nexport default Gap;\n"]}