{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleDescriptor.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAEpD,OAAO,8BAA8B,MAAM,kCAAkC,CAAC;AAE9E,OAAO,EAAE,mBAAmB,EAAE,MAAM,YAAY,CAAC;AAEjD;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,8BAA8B,CAAC,iBAAiB,EAAE,IAAI,CAAC;IAChG;;OAEG;IACI,cAAc,EAAG,iBAAiB,CAAC;IAI1C;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;gBACS,GAAG,EAAE,mBAAmB;IASpC;;OAEG;IACH,IAAI,UAAU,IAAI,MAAM,GAAG,IAAI,CAE9B;IAcD;;OAEG;IACI,MAAM;CAQd","file":"bleDescriptor.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleCharacteristic from \"./bleCharacteristic\";\nimport BleLocalAttributeAbstract from \"./bleLocalAttributeAbstract\";\nimport BleLocalValueAttributeAbstract from \"./bleLocalValueAttributeAbstract\";\nimport BleService from \"./bleService\";\nimport { BleDescriptorDefine } from \"./bleTypes\";\n\n/**\n * @category Use as Peripheral\n */\nexport default class BleDescriptor extends BleLocalValueAttributeAbstract<BleCharacteristic, null> {\n  /**\n   * Characteristic instance\n   */\n  public characteristic!: BleCharacteristic;\n\n  // public permissions: any;\n\n  /**\n   * Create descriptor.\n   *\n   * ```javascript\n   * await obniz.ble.initWait();\n   * var descriptor = new obniz.ble.characteristic({\n   *                     \"uuid\" : \"2901\",   //Characteristic User Description\n   *                     \"text\" : \"hello world characteristic\",\n   *                 });\n   *\n   *  var characteristic = new obniz.ble.characteristic({\n   *                  \"uuid\" : \"FFF1\",\n   *                  \"text\" : \"Hi\",\n   *                  \"descriptors\" : [ descriptor ]\n   *                });\n   *\n   * var service = new obniz.ble.service({\n   *                \"uuid\" : \"fff0\",\n   *                \"characteristics\" : [ characteristic ]\n   * });\n   * obniz.ble.peripheral.addService(service);\n   *\n   * ```\n   *\n   * @param obj\n   */\n  constructor(obj: BleDescriptorDefine) {\n    super(obj);\n\n    // this.permissions = obj.permissions || [];\n    // if (!Array.isArray(this.permissions)) {\n    //   this.permissions = [this.permissions];\n    // }\n  }\n\n  /**\n   * @ignore\n   */\n  get parentName(): string | null {\n    return \"characteristic\";\n  }\n\n  // public addPermission(param: any) {\n  //   if (!this.permissions.includes(param)) {\n  //     this.permissions.push(param);\n  //   }\n  // }\n\n  // public removePermission(param: any) {\n  //   this.permissions = this.permissions.filter ((elm: any ) => {\n  //     return elm !== param;\n  //   });\n  // }\n\n  /**\n   * @ignore\n   */\n  public toJSON() {\n    const obj: any = super.toJSON();\n\n    // if (this.permissions.length > 0) {\n    //   obj.permissions = this.permissions;\n    // }\n    return obj;\n  }\n}\n"]}