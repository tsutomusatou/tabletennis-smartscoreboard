{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleCharacteristic.ts"],"names":[],"mappings":"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","file":"bleCharacteristic.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleDescriptor from \"./bleDescriptor\";\nimport BleLocalAttributeAbstract from \"./bleLocalAttributeAbstract\";\nimport BleLocalValueAttributeAbstract from \"./bleLocalValueAttributeAbstract\";\nimport BleRemoteService from \"./bleRemoteService\";\nimport BleService from \"./bleService\";\nimport { BleAttributePropery, BleCharacteristicDefine, BleDescriptorDefine, BleDeviceAddress, UUID } from \"./bleTypes\";\n\n/**\n * @category Use as Peripheral\n */\nexport default class BleCharacteristic extends BleLocalValueAttributeAbstract<BleService, BleDescriptor> {\n  /**\n   * This is a callback function used when characteristic is read by an external device.\n   *\n   * ```javascript\n   * characteristic.onwritefromremote = function(address, newvalue){\n   *    console.log(\"remote address :\",address);\n   *    console.log(\"remote data :\",newvalue);\n   * }\n   * ```\n   *\n   * @param onwritefromremote.address central device address\n   * @param onwritefromremote.data written data\n   */\n  public onwritefromremote?: (address: BleDeviceAddress, data: number[]) => void;\n\n  /**\n   * This is a callback function used when characteristic is read by an external device.\n   *\n   * ```javascript\n   * characteristic.onreadfromremote = function(address){\n   *   console.log(\"remote address :\",address);\n   * }\n   * ```\n   *\n   * @param onreadfromremote.address central device address\n   */\n  public onreadfromremote?: (address: BleDeviceAddress) => void;\n\n  /**\n   * @ignore\n   */\n  get parentName(): string | null {\n    return \"service\";\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenClass(): any {\n    return BleDescriptor;\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenName(): string | null {\n    return \"descriptors\";\n  }\n\n  /**\n   * Service instance\n   */\n  public service!: BleService;\n\n  /**\n   * Get descriptor array\n   */\n  get descriptors(): BleDescriptor[] {\n    return this.children;\n  }\n\n  /**\n   * @ignore\n   */\n  public properties: BleAttributePropery[];\n  // public permissions: any;\n  private _maxValueSize: any;\n  private _updateValueCallback: any;\n\n  /**\n   * Create Characteristics\n   *\n   * ```javascript\n   * await obniz.ble.initWait();\n   * var characteristic = new obniz.ble.characteristic({\n   *      \"uuid\" : \"FFF1\",\n   *      \"properties\" : [\"read\",\"write\"],  // read, write, notify\n   *      \"data\" : [0x0e, 0x00, ...],     //data for dataArray or  text for string\n   *      \"descriptors\" : [{\n   *          \"uuid\" : \"2901\",   //Characteristic User Description\n   *          \"text\" : \"hello world characteristic\",    //data for dataArray or  text for string\n   *      }]\n   * });\n   *\n   * var service = new obniz.ble.service({\n   *                \"uuid\" : \"fff0\",\n   *                \"characteristics\" : [ characteristic ]\n   * });\n   * obniz.ble.peripheral.addService(service);\n   * ```\n   *\n   * @param obj\n   */\n  constructor(obj: BleCharacteristicDefine) {\n    super(obj);\n\n    this._maxValueSize = null;\n    this._updateValueCallback = null;\n\n    if (!Array.isArray(obj.properties) && typeof obj.properties === \"string\") {\n      this.properties = [obj.properties as BleAttributePropery];\n    } else {\n      this.properties = obj.properties || [];\n    }\n  }\n\n  /**\n   * Add new descriptor\n   * @param desc\n   */\n  public addDescriptor(desc: BleDescriptorDefine | BleDescriptor): BleDescriptor {\n    return this.addChild(desc);\n  }\n\n  /**\n   * Get descriptor\n   * @param uuid\n   */\n  public getDescriptor(uuid: UUID): BleDescriptor | null {\n    return this.getChild(uuid);\n  }\n\n  /**\n   * @ignore\n   */\n  public toJSON() {\n    const obj: any = super.toJSON();\n\n    if (this.properties.length > 0) {\n      obj.properties = this.properties;\n    }\n\n    // if (this.permissions.length > 0) {\n    //   obj.permissions = this.permissions;\n    // }\n    return obj;\n  }\n\n  /**\n   * @ignore\n   */\n  public toBufferObj() {\n    const obj: any = super.toBufferObj();\n\n    obj.properties = this.properties;\n    obj.secure = [];\n\n    return obj;\n  }\n\n  /**\n   * Add property\n   * @param param\n   */\n  public addProperty(param: BleAttributePropery) {\n    if (!this.properties.includes(param)) {\n      this.properties.push(param);\n    }\n  }\n\n  /**\n   * Remove property\n   * @param param\n   */\n  public removeProperty(param: BleAttributePropery) {\n    this.properties = this.properties.filter((elm: any) => {\n      return elm !== param;\n    });\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public addPermission(param: any) {}\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public removePermission(param: any) {}\n\n  /**\n   * @ignore\n   * @param name\n   * @param params\n   */\n  public emit(name: any, ...params: any) {\n    const result: any = super.emit(name, ...params);\n    if (result) {\n      return result;\n    }\n    switch (name) {\n      case \"subscribe\":\n        this._onSubscribe(...(params as [any, any]));\n        return true;\n      case \"unsubscribe\":\n        this._onUnsubscribe();\n        return true;\n      case \"notify\":\n        this._onNotify();\n        return true;\n      case \"indicate\":\n        this._onIndicate();\n        return true;\n      default:\n        throw new Error(\"unknown emit\");\n    }\n  }\n\n  /**\n   * @ignore\n   * @param maxValueSize\n   * @param updateValueCallback\n   * @private\n   */\n  public _onSubscribe(maxValueSize: any, updateValueCallback?: any) {\n    // console.log('_onSubscribe');\n    this._maxValueSize = maxValueSize;\n    this._updateValueCallback = updateValueCallback;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _onUnsubscribe() {\n    this._maxValueSize = null;\n    this._updateValueCallback = null;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _onNotify() {}\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _onIndicate() {}\n\n  /**\n   * This sends notify to the connected central.\n   *\n   * ```javascript\n   * var characteristic = new obniz.ble.characteristic({\n   *   uuid: 'FFF1',\n   *   data: [0x0e, 0x00],\n   *   properties : [\"read\",\"write\",\"notify\"],  // add notify properties\n   * });\n   *\n   *  var service = new obniz.ble.service({\n   *   uuid: 'FFF0',\n   *   characteristics: [characteristic],\n   * });\n   * obniz.ble.peripheral.addService(service);\n   *\n   *\n   * // after central connected\n   * characteristic.notify();\n   * ```\n   */\n  public notify() {\n    if (this._updateValueCallback) {\n      this._updateValueCallback(Buffer.from(this.data));\n    }\n  }\n}\n"]}