{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/acl-stream.ts"],"names":[],"mappings":"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","file":"acl-stream.js","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\n// var debug = require('debug')('acl-att-stream');\n\nimport EventEmitter from \"eventemitter3\";\n\nimport { Handle } from \"../../bleTypes\";\nimport Hci from \"../hci\";\nimport Smp from \"./smp\";\n\ntype AclStreamEventTypes = \"data\" | \"end\" | \"encrypt\" | \"encryptFail\";\n\n/**\n *\n * @ignore\n */\nexport default class AclStream extends EventEmitter<AclStreamEventTypes> {\n  public _hci: Hci;\n  public _handle: Handle;\n  public _smp: Smp;\n  public onSmpFailBinded: any;\n  public onSmpEndBinded: any;\n\n  constructor(\n    hci: Hci,\n    handle: Handle,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n  ) {\n    super();\n    this._hci = hci;\n    this._handle = handle;\n\n    this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress);\n    this._smp.debugHandler = (text: string) => {\n      this.debug(text);\n    };\n\n    this.onSmpFailBinded = this.onSmpFail.bind(this);\n    this.onSmpEndBinded = this.onSmpEnd.bind(this);\n\n    this._smp.on(\"fail\", this.onSmpFailBinded);\n    this._smp.on(\"end\", this.onSmpEndBinded);\n  }\n  public debugHandler: any = () => {};\n\n  public async encryptWait(options?: any) {\n    let encrpytResult = null;\n    encrpytResult = await this._smp.pairingWait(options);\n    return encrpytResult;\n  }\n\n  public setEncryptOption(options?: any) {\n    let encrpytResult = null;\n    encrpytResult = this._smp.setPairingOption(options);\n    return encrpytResult;\n  }\n\n  public write(cid: any, data: any) {\n    this._hci.writeAclDataPkt(this._handle, cid, data);\n  }\n\n  public async readWait(cid: any, flag: number, timeout?: number): Promise<Buffer> {\n    const data = await this._hci.readAclStreamWait(this._handle, cid, flag, timeout);\n    return data;\n  }\n\n  public push(cid: number, data: Buffer) {\n    if (data) {\n      this.emit(\"data\", cid, data);\n    } else {\n      this.emit(\"end\");\n    }\n  }\n\n  public end() {\n    this.emit(\"end\");\n  }\n\n  public async onSmpStkWait(stk: any) {\n    const random: any = Buffer.from(\"0000000000000000\", \"hex\");\n    const diversifier: any = Buffer.from(\"0000\", \"hex\");\n\n    const result = await this._hci.startLeEncryptionWait(this._handle, random, diversifier, stk);\n    this.emit(\"encrypt\", result);\n    return result;\n  }\n\n  public async onSmpLtkWait(ltk: any, random: Buffer, diversifier: Buffer) {\n    const result = await this._hci.startLeEncryptionWait(this._handle, random, diversifier, ltk);\n    this.emit(\"encrypt\", result);\n    return result;\n  }\n\n  public onSmpFail() {\n    this.emit(\"encryptFail\");\n  }\n\n  public onSmpEnd() {\n    this._smp.removeListener(\"fail\", this.onSmpFailBinded);\n    this._smp.removeListener(\"end\", this.onSmpEndBinded);\n  }\n\n  public startEncrypt(option: any) {}\n\n  private debug(text: any) {\n    this.debugHandler(`AclStream: ${text}`);\n  }\n}\n"]}