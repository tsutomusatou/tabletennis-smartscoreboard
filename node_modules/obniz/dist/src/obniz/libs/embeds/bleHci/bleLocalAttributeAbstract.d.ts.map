{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleLocalAttributeAbstract.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAC1D,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAEpD,OAAO,UAAU,MAAM,cAAc,CAAC;AAatC;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,yBAAyB,CAAC,WAAW,EAAE,aAAa,CAAE,SAAQ,oBAAoB,CACrG,WAAW,EACX,aAAa,CACd;IACC;;OAEG;IACH,SAAS,CAAC,cAAc,EAAG,iBAAiB,CAAC;IAE7C;;OAEG;IACH,SAAS,CAAC,OAAO,EAAG,UAAU,CAAC;gBAEnB,MAAM,EAAE,GAAG;IAIvB;;OAEG;IACI,WAAW;IAclB;;;;OAIG;IACI,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG;IAYrC;;;;;OAKG;IACI,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,GAAG;IAejD;;;;;;;OAOG;IACI,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,eAAe,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,GAAG;IAarF;;;OAGG;IACU,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC;IAM7D;;;OAGG;IACU,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;CAI3C","file":"bleLocalAttributeAbstract.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleAttributeAbstract from \"./bleAttributeAbstract\";\nimport BleCharacteristic from \"./bleCharacteristic\";\nimport BleHelper from \"./bleHelper\";\nimport BleService from \"./bleService\";\n\n/**\n * @ignore\n */\nenum BleResponseResult {\n  SUCCESS = 0x00,\n  INVALID_OFFSET = 0x07,\n  ATTR_NOT_LONG = 0x0b,\n  INVALID_ATTRIBUTE_LENGTH = 0x0d,\n  UNLIKELY_ERROR = 0x0e,\n}\n\n/**\n * @category Use as Peripheral\n */\nexport default class BleLocalAttributeAbstract<ParentClass, ChildrenClass> extends BleAttributeAbstract<\n  ParentClass,\n  ChildrenClass\n> {\n  /**\n   * @ignore\n   */\n  protected characteristic!: BleCharacteristic;\n\n  /**\n   * @ignore\n   */\n  protected service!: BleService;\n\n  constructor(params: any) {\n    super(params);\n  }\n\n  /**\n   * @ignore\n   */\n  public toBufferObj() {\n    const obj: any = {\n      uuid: BleHelper.uuidFilter(this.uuid),\n    };\n\n    if (this.childrenName) {\n      const key: any = this.childrenName;\n      obj[key] = this.children.map((e: any) => e.toBufferObj());\n    }\n\n    obj.emit = this.emit.bind(this);\n    return obj;\n  }\n\n  /**\n   * @ignore\n   * @param name\n   * @param params\n   */\n  public emit(name: any, ...params: any) {\n    switch (name) {\n      case \"readRequest\":\n        this._onReadRequest(...(params as [any, any]));\n        return true;\n      case \"writeRequest\":\n        this._onWriteRequest(...(params as [any, any]));\n        return true;\n    }\n    return false;\n  }\n\n  /**\n   * @ignore\n   * @param offset\n   * @param callback\n   * @private\n   */\n  public _onReadRequest(offset: any, callback?: any) {\n    if (this.data.length >= offset) {\n      callback(BleResponseResult.SUCCESS, Buffer.from(this.data.slice(offset)));\n      let address: any = null;\n      if (this.parentName === \"characteristic\") {\n        address = this.characteristic!.service.peripheral.currentConnectedDeviceAddress;\n      } else if (this.parentName === \"service\") {\n        address = this.service!.peripheral.currentConnectedDeviceAddress;\n      }\n      this.notifyFromServer(\"onreadfromremote\", { address });\n    } else {\n      callback(BleResponseResult.UNLIKELY_ERROR, null);\n    }\n  }\n\n  /**\n   * @ignore\n   * @param data\n   * @param offset\n   * @param withoutResponse\n   * @param callback\n   * @private\n   */\n  public _onWriteRequest(data: any, offset?: any, withoutResponse?: any, callback?: any) {\n    // console.log('onWriteRequest');\n    this.data = Array.from(data);\n    callback(BleResponseResult.SUCCESS);\n    let address: any = null;\n    if (this.parentName === \"characteristic\") {\n      address = this.characteristic.service.peripheral.currentConnectedDeviceAddress;\n    } else if (this.parentName === \"service\") {\n      address = this.service.peripheral.currentConnectedDeviceAddress;\n    }\n    this.notifyFromServer(\"onwritefromremote\", { address, data });\n  }\n\n  /**\n   * @ignore\n   * @param dataArray\n   */\n  public async writeWait(dataArray: number[]): Promise<boolean> {\n    this.data = dataArray;\n    this.notifyFromServer(\"onwrite\", { result: \"success\" });\n    return true;\n  }\n\n  /**\n   * @ignore\n   * @param dataArray\n   */\n  public async readWait(): Promise<number[]> {\n    this.notifyFromServer(\"onread\", { data: this.data });\n    return this.data;\n  }\n}\n"]}