{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleRemoteValueAttributeAbstract.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,0BAA0B,MAAM,8BAA8B,CAAC;AAEtE;;GAEG;AACH,MAAM,CAAC,OAAO,CAAC,QAAQ,OAAO,+BAA+B,CAC3D,WAAW,EACX,aAAa,CACb,SAAQ,0BAA0B,CAAC,WAAW,EAAE,aAAa,CAAC;IAC9D;;OAEG;IACI,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;IAEvC;;OAEG;IACI,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK,IAAI,CAAC;IAEpC;;;;;OAKG;IACI,YAAY,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAI7C;;;;;;;OAOG;IACI,cAAc,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAI/C;;;;;;OAMG;IACI,aAAa,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,EAAE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAI3E;;;;;;;OAOG;IACI,eAAe,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,EAAE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;CAG9E","file":"bleRemoteValueAttributeAbstract.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleRemoteAttributeAbstract from \"./bleRemoteAttributeAbstract\";\n\n/**\n * @category Use as Central\n */\nexport default abstract class BleRemoteValueAttributeAbstract<\n  ParentClass,\n  ChildrenClass\n> extends BleRemoteAttributeAbstract<ParentClass, ChildrenClass> {\n  /**\n   * Callback function when write value finished.\n   */\n  public onwrite?: (result: any) => void;\n\n  /**\n   * Callback function when read value.\n   */\n  public onread?: (data: any) => void;\n\n  /**\n   * Wrapper for [[readWait]] with data converting to text.\n   * It convert  UTF-8 and write binary array to string.\n   *\n   * It throws an error when failed.\n   */\n  public readTextWait(): Promise<string | null> {\n    return super.readTextWait();\n  }\n\n  /**\n   * Wrapper for [[writeWait]] with data converting from number.\n   * It writes data as 1byte.\n   *\n   * It throws an error when failed.\n   *\n   * @param val\n   */\n  public readNumberWait(): Promise<number | null> {\n    return super.readNumberWait();\n  }\n\n  /**\n   * Wrapper for [[writeWait]] with data converting from text.\n   * It convert string to UTF-8 and write binary array.\n   *\n   * It throws an error when failed.\n   * @param str\n   */\n  public writeTextWait(str: string, needResponse?: boolean): Promise<boolean> {\n    return super.writeTextWait(str, needResponse);\n  }\n\n  /**\n   * Wrapper for [[writeWait]] with data converting from number.\n   * It writes data as 1byte.\n   *\n   * It throws an error when failed.\n   *\n   * @param val\n   */\n  public writeNumberWait(val: number, needResponse?: boolean): Promise<boolean> {\n    return super.writeNumberWait(val, needResponse);\n  }\n}\n"]}