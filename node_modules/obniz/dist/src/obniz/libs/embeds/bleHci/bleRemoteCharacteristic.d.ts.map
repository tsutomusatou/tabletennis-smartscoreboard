{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleRemoteCharacteristic.ts"],"names":[],"mappings":"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","file":"bleRemoteCharacteristic.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport { ObnizDeprecatedFunctionError } from \"../../../ObnizError\";\nimport BleRemoteAttributeAbstract from \"./bleRemoteAttributeAbstract\";\nimport BleRemoteDescriptor from \"./bleRemoteDescriptor\";\nimport BleRemoteService from \"./bleRemoteService\";\nimport BleRemoteValueAttributeAbstract from \"./bleRemoteValueAttributeAbstract\";\nimport { BleAttributePropery, UUID } from \"./bleTypes\";\n\n/**\n * @category Use as Central\n */\nexport default class BleRemoteCharacteristic extends BleRemoteValueAttributeAbstract<\n  BleRemoteService,\n  BleRemoteDescriptor\n> {\n  /**\n   * @ignore\n   */\n  get parentName(): string | null {\n    return \"service\";\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenClass(): any {\n    return BleRemoteDescriptor;\n  }\n\n  /**\n   * @ignore\n   *\n   */\n  get childrenName(): string | null {\n    return \"descriptors\";\n  }\n\n  /**\n   * It contains descriptors in a characteristic.\n   * It was discovered when connection automatically.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *    uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(!peripheral) {\n   *    console.log('no such peripheral')\n   *    return;\n   * }\n   * try {\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   var service = peripheral.getService(\"1800\")\n   *   var c = service.getCharacteristic(\"fff0\")\n   *   for (var d of c.descriptors) {\n   *     console.log(d.uuid)\n   *  }\n   * } catch(e) {\n   *   console.error(e);\n   * }\n   * ```\n   */\n  get descriptors() {\n    return this.children;\n  }\n\n  /**\n   * It is an array of properties of a characteristics. It contains some of belows.\n   *\n   * ```javascript\n   * console.log(characteristics.properties); // => ['read', 'write', 'notify']\n   * ```\n   *\n   * See how works at https://www.bluetooth.com/ja-jp/specifications/bluetooth-core-specification/\n   *\n   */\n  public properties: BleAttributePropery[];\n\n  /**\n   * Service instance\n   */\n  public service!: BleRemoteService;\n\n  /**\n   * Callback function will be called when [[registerNotify]] finished.\n   *\n   * This doesn't call when notify arrived. It call when 'reiterate' finished.\n   *\n   *\n   */\n  public onregisternotify?: () => void;\n\n  /**\n   * @ignore\n   */\n  public ondiscoverdescriptor?: (descriptor: any) => void;\n\n  /**\n   * @ignore\n   */\n  public ondiscoverdescriptorfinished?: (descriptors: any) => void;\n\n  /**\n   * Callback function will be called when [[unregisterNotify]] finished.\n   */\n  public onunregisternotify?: () => void;\n\n  /**\n   * @ignore\n   */\n  public onnotify?: (data: any) => void;\n\n  constructor(params: any) {\n    super(params);\n\n    this.properties = params.properties || [];\n    if (!Array.isArray(this.properties)) {\n      this.properties = [this.properties];\n    }\n  }\n\n  /**\n   * @ignore\n   * @param params\n   */\n  public addDescriptor(params: { uuid: UUID } | BleRemoteDescriptor): BleRemoteDescriptor {\n    return this.addChild(params);\n  }\n\n  /**\n   * It returns a descriptors which having specified uuid in a characteristic.\n   * Return value is null when not matched.\n   *\n   * Case is ignored. So aa00 and AA00 are the same.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *  uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(!peripheral) {\n   *   console.log('no such peripheral')\n   *   return;\n   * }\n   * try {\n   *  await peripheral.connectWait();\n   *  console.log(\"connected\");\n   *  var service = peripheral.getService(\"1800\")\n   *  var c = service.getCharacteristic(\"fff0\")\n   *  var d = c.getDescriptor(\"fff0\")\n   *  console.log(d.uuid)\n   * } catch(e) {\n   *   console.error(e);\n   * }\n   * ```\n   * @param uuid\n   */\n  public getDescriptor(uuid: UUID): BleRemoteDescriptor | null {\n    return this.getChild(uuid);\n  }\n\n  /**\n   * This sets a callback function to receive notify when it comes from periperal.\n   * To receive notify, you need to register on CCCD Descriptor(0x2902).\n   *\n   * More infomation of BLE/CCCD is available at [bluetooth.com](https://www.bluetooth.com/specifications/gatt/descriptors/).\n   *\n   * ```javascript\n   * await obniz.ble.initWait();\n   * var target = {\n   *  localName: \"obniz-notify\"\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * await peripheral.connectWait();\n   * let char = peripheral.getService('fff0').getCharacteristic( 'fff1');\n   *\n   * char.onregisternotify = function() {\n   *   console.log(\"register finshed\")\n   * }\n   *\n   * char.registerNotify( function(data){\n   *   console.log(\"notify with data \" + data.join(','));\n   * });\n   * ```\n   *\n   * @param callback\n   */\n  public registerNotify(callback: (data: any) => void) {\n    this.registerNotifyWait(callback); // background\n  }\n\n  /**\n   * This sets a notify callback function and wait to finish register.\n   *\n   * ```javascript\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *   localName: \"obniz-notify\"\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * await peripheral.connectWait();\n   * let char = peripheral.getService('fff0').getCharacteristic( 'fff1');\n   *\n   * await char.registerNotifyWait( function(data){\n   *   console.log(\"notify with data \" + data.join(','));\n   * });\n   * ```\n   *\n   * @param callback\n   *\n   */\n  public async registerNotifyWait(callback: (data: any) => void): Promise<void> {\n    this.onnotify = callback;\n    await this.service.peripheral.obnizBle.centralBindings.notifyWait(\n      this.service.peripheral.address,\n      this.service.uuid,\n      this.uuid,\n      true,\n    );\n    if (this.onregisternotify) {\n      this.onregisternotify();\n    }\n  }\n\n  /**\n   * unregistrate a callback which is registrated by [[registerNotify]] or [[registerNotifyWait]].\n   *\n   *\n   * ```javascript\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *  localName: \"obniz-notify\"\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * await peripheral.connectWait();\n   * let char = peripheral.getService('fff0').getCharacteristic( 'fff1');\n   *\n   * char.onregisternotify = function() {\n   *  console.log(\"register finshed\")\n   *  char.unregisterNotify();\n   * }\n   *\n   * char.onunregisternotify = function() {\n   *   console.log(\"unregistrated\")\n   * }\n   *\n   * char.registerNotify( function(data){\n   *   console.log(\"notify with data \" + data.join(','));\n   * });\n   *\n   * ```\n   */\n  public unregisterNotify() {\n    this.unregisterNotifyWait(); // background\n  }\n\n  /**\n   * Unregistrate a callback which is registrated by [[registerNotify]] or [[registerNotifyWait]].\n   * And wait until done.\n   *\n   * ```javascript\n   *\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *  localName: \"obniz-notify\"\n   * };\n   *\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * await peripheral.connectWait();\n   * let char = peripheral.getService('fff0').getCharacteristic( 'fff1');\n   *\n   * await char.registerNotifyWait( function(data){\n   *   console.log(\"notify with data \" + data.join(','));\n   * });\n   * await char.unregisterNotifyWait();\n   * console.log(\"unregistrated\")\n   * ```\n   *\n   */\n  public async unregisterNotifyWait(): Promise<void> {\n    this.onnotify = () => {};\n\n    await this.service.peripheral.obnizBle.centralBindings.notifyWait(\n      this.service.peripheral.address,\n      this.service.uuid,\n      this.uuid,\n      false,\n    );\n    this._runUserCreatedFunction(this.onunregisternotify);\n  }\n\n  /**\n   * Use readWait() instead from 3.5.0\n   * @deprecated\n   */\n  public read() {\n    throw new ObnizDeprecatedFunctionError(\"read\", \"readWait\");\n  }\n\n  /**\n   * Use writeWait() instead from 3.5.0\n   * @deprecated\n   */\n  public write(array: number[], needResponse?: boolean) {\n    throw new ObnizDeprecatedFunctionError(\"read\", \"readWait\");\n  }\n\n  /**\n   * This writes dataArray to the characteristic.\n   * It throws an error when failed.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   *  await obniz.ble.initWait();\n   *   var target = {\n   *    uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(peripheral){\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   await obniz.wait(1000);\n   *\n   *   var dataArray = [0x02, 0xFF];\n   *   await peripheral.getService(\"FF00\").getCharacteristic(\"FF01\").writeWait(dataArray);\n   *   console.log(\"write success\");\n   * }\n   * ```\n   *\n   * @param data\n   * @param needResponse\n   */\n  public async writeWait(data: any, needResponse?: any): Promise<boolean> {\n    if (needResponse === undefined) {\n      needResponse = true;\n    }\n    await this.service.peripheral.obnizBle.centralBindings.writeWait(\n      this.service.peripheral.address,\n      this.service.uuid,\n      this.uuid,\n      Buffer.from(data),\n      !needResponse,\n    );\n    this._runUserCreatedFunction(this.onwrite, \"success\");\n    return true;\n  }\n\n  /**\n   * It reads data from the characteristic.\n   *\n   * Even you wrote string or number, it returns binary array.\n   * The returned value appears in the callback function (onread). If reading succeeds an Array with data will be returned.\n   * It throws an error when failed.\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait();\n   * var target = {\n   *  uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(peripheral){\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   await obniz.wait(1000);\n   *\n   *   var dataArray = await peripheral.getService(\"FF00\").getCharacteristic(\"FF01\").readWait();\n   *   console.log(dataArray);\n   * }\n   * ```\n   */\n  public async readWait(): Promise<number[]> {\n    const buf = await this.service.peripheral.obnizBle.centralBindings.readWait(\n      this.service.peripheral.address,\n      this.service.uuid,\n      this.uuid,\n    );\n    const data = Array.from(buf);\n\n    this._runUserCreatedFunction(this.onread, data);\n    return data;\n  }\n\n  /**\n   * Discover services.\n   *\n   * If connect setting param 'autoDiscovery' is true(default),\n   * services are automatically disvocer on connection established.\n   *\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   * if(peripheral.localName == \"my peripheral\"){\n   *      peripheral.onconnect = async function(){\n   *          console.log(\"success\");\n   *          await peripheral.discoverAllServicesWait(); //manually discover\n   *          let service = peripheral.getService(\"1800\");\n   *          await service.discoverAllCharacteristicsWait(); //manually discover\n   *          let characteristics = service.getCharacteristic(\"ff00\");\n   *          await characteristics.discoverAllDescriptorsWait(); //manually discover\n   *          let descriptor = characteristics.getDescriptor(\"fff1\");\n   *      }\n   *      peripheral.connect({autoDiscovery:false});\n   *     }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   */\n  public async discoverAllDescriptorsWait(): Promise<BleRemoteDescriptor[]> {\n    const descriptors = await this.service.peripheral.obnizBle.centralBindings.discoverDescriptorsWait(\n      this.service.peripheral.address,\n      this.service.uuid,\n      this.uuid,\n    );\n\n    for (const descr of descriptors) {\n      const uuid: any = descr;\n      let child: any = this.getChild(uuid);\n      if (!child) {\n        child = this.addChild({ uuid });\n      }\n      child.discoverdOnRemote = true;\n      this.ondiscover(child);\n    }\n\n    return this.descriptors.filter((elm: any) => {\n      return elm.discoverdOnRemote;\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public toJSON() {\n    const obj: any = super.toJSON();\n\n    if (this.properties.length > 0) {\n      obj.properties = this.properties;\n    }\n    return obj;\n  }\n\n  /**\n   * This characteristics can broadcast or not.\n   */\n  public canBroadcast(): boolean {\n    return this.properties.includes(\"broadcast\");\n  }\n\n  /**\n   * This characteristics can notify or not.\n   */\n  public canNotify(): boolean {\n    return this.properties.includes(\"notify\");\n  }\n\n  /**\n   * This characteristics can read or not.\n   */\n  public canRead(): boolean {\n    return this.properties.includes(\"read\");\n  }\n\n  /**\n   * This characteristics can write or not.\n   */\n  public canWrite(): boolean {\n    return this.properties.includes(\"write\");\n  }\n\n  /**\n   * This characteristics can 'write without response' or not.\n   */\n  public canWriteWithoutResponse(): boolean {\n    return this.properties.includes(\"write_without_response\");\n  }\n\n  /**\n   * This characteristics can indicate or not.\n   */\n  public canIndicate(): boolean {\n    return this.properties.includes(\"indicate\");\n  }\n\n  /**\n   * @ignore\n   * @param descriptor\n   */\n  public ondiscover(descriptor: any) {\n    this._runUserCreatedFunction(this.ondiscoverdescriptor, descriptor);\n  }\n\n  /**\n   * @ignore\n   * @param descriptors\n   */\n  public ondiscoverfinished(descriptors: any) {\n    this._runUserCreatedFunction(this.ondiscoverdescriptorfinished, descriptors);\n  }\n\n  /**\n   * @ignore\n   * @param notifyName\n   * @param params\n   */\n  public notifyFromServer(notifyName: any, params: any) {\n    super.notifyFromServer(notifyName, params);\n    switch (notifyName) {\n      case \"onnotify\": {\n        this._runUserCreatedFunction(this.onnotify, params.data || undefined);\n\n        break;\n      }\n    }\n  }\n}\n"]}