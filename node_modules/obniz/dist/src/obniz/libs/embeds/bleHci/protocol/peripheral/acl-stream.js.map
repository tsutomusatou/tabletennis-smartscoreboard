{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/peripheral/acl-stream.ts"],"names":[],"mappings":";;;;;AAAA;;;;GAIG;AACH,kEAAyC;AAGzC,gDAAwB;AAGxB;;GAEG;AACH,MAAM,SAAU,SAAQ,uBAAiC;IAOvD,YACE,GAAQ,EACR,MAAW,EACX,gBAAqB,EACrB,YAAiB,EACjB,iBAAsB,EACtB,aAAkB;QAElB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,aAAG,CAAC,IAAI,EAAE,gBAAgB,EAAE,YAAY,EAAE,iBAAiB,EAAE,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACzG,CAAC;IAEM,KAAK,CAAC,GAAW,EAAE,IAAY;QACpC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAEM,IAAI,CAAC,GAAW,EAAE,IAAY;QACnC,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAC9B;IACH,CAAC;IACM,GAAG;QACR,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC;IAEM,WAAW,CAAC,OAAY;QAC7B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAExC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC;CACF;AAED,kBAAe,SAAS,CAAC","file":"acl-stream.js","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\nimport EventEmitter from \"eventemitter3\";\n\nimport Hci from \"../hci\";\nimport Smp from \"./smp\";\n\ntype AclStreamEventTypes = \"data\" | \"end\" | \"encryptChange\";\n/**\n * @ignore\n */\nclass AclStream extends EventEmitter<AclStreamEventTypes> {\n  public _hci: Hci;\n  public _handle: any;\n  public encypted: any;\n  public _smp: any;\n  public encrypted: any;\n\n  constructor(\n    hci: any,\n    handle: any,\n    localAddressType: any,\n    localAddress: any,\n    remoteAddressType: any,\n    remoteAddress: any,\n  ) {\n    super();\n    this._hci = hci;\n    this._handle = handle;\n    this.encypted = false;\n\n    this._smp = new Smp(this, localAddressType, localAddress, remoteAddressType, remoteAddress, this._hci);\n  }\n\n  public write(cid: number, data: Buffer) {\n    this._hci.queueAclDataPkt(this._handle, cid, data);\n  }\n\n  public push(cid: number, data: Buffer) {\n    if (data) {\n      this.emit(\"data\", cid, data);\n    }\n  }\n  public end() {\n    this.emit(\"end\");\n  }\n\n  public pushEncrypt(encrypt: any) {\n    this.encrypted = encrypt ? true : false;\n\n    this.emit(\"encryptChange\", this.encrypted);\n  }\n}\n\nexport default AclStream;\n"]}