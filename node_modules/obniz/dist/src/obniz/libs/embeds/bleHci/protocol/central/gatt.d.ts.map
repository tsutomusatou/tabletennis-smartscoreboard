{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/central/gatt.ts"],"names":[],"mappings":"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","file":"gatt.d.ts","sourcesContent":["/**\n * @packageDocumentation\n *\n * @ignore\n */\nimport AclStream from \"./acl-stream\";\n\n// let debug = require('debug')('att');\nconst debug: any = () => {};\n\n/* eslint-disable no-unused-vars */\n\nimport EventEmitter from \"eventemitter3\";\nimport {\n  ObnizBleAttError,\n  ObnizBleOpError,\n  ObnizBleUnknownCharacteristicError,\n  ObnizBleUnknownDescriptorError,\n  ObnizBleUnknownServiceError,\n} from \"../../../../../ObnizError\";\nimport { UUID } from \"../../bleTypes\";\n\n/**\n * @ignore\n */\nnamespace ATT {\n  export const OP_ERROR: any = 0x01;\n  export const OP_MTU_REQ: any = 0x02;\n  export const OP_MTU_RESP: any = 0x03;\n  export const OP_FIND_INFO_REQ: any = 0x04;\n  export const OP_FIND_INFO_RESP: any = 0x05;\n  export const OP_READ_BY_TYPE_REQ: any = 0x08;\n  export const OP_READ_BY_TYPE_RESP: any = 0x09;\n  export const OP_READ_REQ: any = 0x0a;\n  export const OP_READ_RESP: any = 0x0b;\n  export const OP_READ_BLOB_REQ: any = 0x0c;\n  export const OP_READ_BLOB_RESP: any = 0x0d;\n  export const OP_READ_BY_GROUP_REQ: any = 0x10;\n  export const OP_READ_BY_GROUP_RESP: any = 0x11;\n  export const OP_WRITE_REQ: any = 0x12;\n  export const OP_WRITE_RESP: any = 0x13;\n  export const OP_PREPARE_WRITE_REQ: any = 0x16;\n  export const OP_PREPARE_WRITE_RESP: any = 0x17;\n  export const OP_EXECUTE_WRITE_REQ: any = 0x18;\n  export const OP_EXECUTE_WRITE_RESP: any = 0x19;\n  export const OP_HANDLE_NOTIFY: any = 0x1b;\n  export const OP_HANDLE_IND: any = 0x1d;\n  export const OP_HANDLE_CNF: any = 0x1e;\n  export const OP_WRITE_CMD: any = 0x52;\n\n  export const ECODE_SUCCESS: any = 0x00;\n  export const ECODE_INVALID_HANDLE: any = 0x01;\n  export const ECODE_READ_NOT_PERM: any = 0x02;\n  export const ECODE_WRITE_NOT_PERM: any = 0x03;\n  export const ECODE_INVALID_PDU: any = 0x04;\n  export const ECODE_AUTHENTICATION: any = 0x05;\n  export const ECODE_REQ_NOT_SUPP: any = 0x06;\n  export const ECODE_INVALID_OFFSET: any = 0x07;\n  export const ECODE_AUTHORIZATION: any = 0x08;\n  export const ECODE_PREP_QUEUE_FULL: any = 0x09;\n  export const ECODE_ATTR_NOT_FOUND: any = 0x0a;\n  export const ECODE_ATTR_NOT_LONG: any = 0x0b;\n  export const ECODE_INSUFF_ENCR_KEY_SIZE: any = 0x0c;\n  export const ECODE_INVAL_ATTR_VALUE_LEN: any = 0x0d;\n  export const ECODE_UNLIKELY: any = 0x0e;\n  export const ECODE_INSUFF_ENC: any = 0x0f;\n  export const ECODE_UNSUPP_GRP_TYPE: any = 0x10;\n  export const ECODE_INSUFF_RESOURCES: any = 0x11;\n\n  export const CID: any = 0x0004;\n}\n\nconst ATT_OP_READABLES: { [_: number]: string } = {\n  0x01: \"OP_ERROR\",\n  0x02: \"OP_MTU_REQ\",\n  0x03: \"OP_MTU_RESP\",\n  0x04: \"OP_FIND_INFO_REQ\",\n  0x05: \"OP_FIND_INFO_RESP\",\n  0x08: \"OP_READ_BY_TYPE_REQ\",\n  0x09: \"OP_READ_BY_TYPE_RESP\",\n  0x0a: \"OP_READ_REQ\",\n  0x0b: \"OP_READ_RESP\",\n  0x0c: \"OP_READ_BLOB_REQ\",\n  0x0d: \"OP_READ_BLOB_RESP\",\n  0x10: \"OP_READ_BY_GROUP_REQ\",\n  0x11: \"OP_READ_BY_GROUP_RESP\",\n  0x12: \"OP_WRITE_REQ\",\n  0x13: \"OP_WRITE_RESP\",\n  0x16: \"OP_PREPARE_WRITE_REQ\",\n  0x17: \"OP_PREPARE_WRITE_RESP\",\n  0x18: \"OP_EXECUTE_WRITE_REQ\",\n  0x19: \"OP_EXECUTE_WRITE_RESP\",\n  0x1b: \"OP_HANDLE_NOTIFY\",\n  0x1d: \"OP_HANDLE_IND\",\n  0x1e: \"OP_HANDLE_CNF\",\n  0x52: \"OP_WRITE_CMD\",\n};\n\nconst ATT_ECODE_READABLES: { [_: number]: string } = {\n  0x00: \"ECODE_SUCCESS\",\n  0x01: \"ECODE_INVALID_HANDLE\",\n  0x02: \"ECODE_READ_NOT_PERM\",\n  0x03: \"ECODE_WRITE_NOT_PERM\",\n  0x04: \"ECODE_INVALID_PDU\",\n  0x05: \"ECODE_AUTHENTICATION\",\n  0x06: \"ECODE_REQ_NOT_SUPP\",\n  0x07: \"ECODE_INVALID_OFFSET\",\n  0x08: \"ECODE_AUTHORIZATION\",\n  0x09: \"ECODE_PREP_QUEUE_FULL\",\n  0x0a: \"ECODE_ATTR_NOT_FOUND\",\n  0x0b: \"ECODE_ATTR_NOT_LONG\",\n  0x0c: \"ECODE_INSUFF_ENCR_KEY_SIZE\",\n  0x0d: \"ECODE_INVAL_ATTR_VALUE_LEN\",\n  0x0e: \"ECODE_UNLIKELY\",\n  0x0f: \"ECODE_INSUFF_ENC\",\n  0x10: \"ECODE_UNSUPP_GRP_TYPE\",\n  0x11: \"ECODE_INSUFF_RESOURCES\",\n};\n\n/**\n * @ignore\n */\nnamespace GATT {\n  export const PRIM_SVC_UUID: any = 0x2800;\n  export const INCLUDE_UUID: any = 0x2802;\n  export const CHARAC_UUID: any = 0x2803;\n\n  export const CLIENT_CHARAC_CFG_UUID: any = 0x2902;\n  export const SERVER_CHARAC_CFG_UUID: any = 0x2903;\n}\n\n/* eslint-enable no-unused-vars */\n\ntype GattEventTypes = \"notification\" | \"handleConfirmation\" | \"handleNotify\" | \"end\";\n\n/**\n * @ignore\n */\nclass Gatt extends EventEmitter<GattEventTypes> {\n  public _address: any;\n  public _aclStream: AclStream;\n  public _services: any;\n  public _characteristics: any;\n  public _descriptors: any;\n  public _currentCommand: any;\n  public _commandQueue: any;\n  public _mtu: any;\n  public _security: any;\n  public _commandPromises: Array<Promise<any>>;\n  public onAclStreamDataBinded: any;\n  public onAclStreamEndBinded: any;\n\n  constructor(address: any, aclStream: AclStream) {\n    super();\n    this._address = address;\n    this._aclStream = aclStream;\n\n    this._services = {};\n    this._characteristics = {};\n    this._descriptors = {};\n\n    this._currentCommand = null;\n    this._commandQueue = [];\n    this._commandPromises = [];\n\n    this._mtu = 23;\n    this._security = \"low\";\n\n    this.onAclStreamDataBinded = this.onAclStreamData.bind(this);\n    this.onAclStreamEndBinded = this.onAclStreamEnd.bind(this);\n\n    this._aclStream.on(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.on(\"end\", this.onAclStreamEndBinded);\n  }\n\n  public async encryptWait(options: any): Promise<string> {\n    const result = await this._serialPromiseQueueWait(async () => {\n      const encrypt = await this._aclStream.encryptWait(options);\n      if (encrypt === 0) {\n        throw new Error(\"Encript failed\");\n      }\n      this._security = \"medium\";\n      return this._aclStream._smp.getKeys();\n    });\n    return result;\n  }\n\n  public async setEncryptOption(options: any) {\n    this._aclStream.setEncryptOption(options);\n  }\n\n  public onEnd(reason: any) {\n    this.emit(\"end\", reason);\n  }\n\n  public async exchangeMtuWait(mtu: any) {\n    const data = await this._execCommandWait(this.mtuRequest(mtu), ATT.OP_MTU_RESP);\n    const opcode: any = data[0];\n\n    const newMtu: any = data.readUInt16LE(1);\n\n    debug(this._address + \": new MTU is \" + newMtu);\n\n    this._mtu = newMtu;\n\n    return this._mtu;\n  }\n\n  public async discoverServicesWait(uuids: any): Promise<any> {\n    const services: any = [];\n    let startHandle = 0x0001;\n\n    while (1) {\n      const data = await this._execCommandWait(this.readByGroupRequest(startHandle, 0xffff, GATT.PRIM_SVC_UUID), [\n        ATT.OP_READ_BY_GROUP_RESP,\n        ATT.OP_ERROR,\n      ]);\n      const opcode: any = data[0];\n      let i: any = 0;\n      if (opcode === ATT.OP_READ_BY_GROUP_RESP) {\n        const type: any = data[1];\n        const num: any = (data.length - 2) / type;\n\n        for (i = 0; i < num; i++) {\n          services.push({\n            startHandle: data.readUInt16LE(2 + i * type + 0),\n            endHandle: data.readUInt16LE(2 + i * type + 2),\n            uuid:\n              type === 6\n                ? data.readUInt16LE(2 + i * type + 4).toString(16)\n                : data\n                    .slice(2 + i * type + 4)\n                    .slice(0, 16)\n                    .toString(\"hex\")\n                    .match(/.{1,2}/g)!\n                    .reverse()\n                    .join(\"\"),\n          });\n        }\n      }\n\n      if (opcode !== ATT.OP_READ_BY_GROUP_RESP || services[services.length - 1].endHandle === 0xffff) {\n        const serviceUuids: any = [];\n        for (i = 0; i < services.length; i++) {\n          if (uuids.length === 0 || uuids.indexOf(services[i].uuid) !== -1) {\n            serviceUuids.push(services[i].uuid);\n          }\n\n          this._services[services[i].uuid] = services[i];\n        }\n        return serviceUuids;\n      }\n      startHandle = services[services.length - 1].endHandle + 1;\n    }\n  }\n\n  public async discoverIncludedServicesWait(serviceUuid: UUID, uuids: UUID[]) {\n    const service: any = this.getService(serviceUuid);\n    const includedServices: any = [];\n    let startHandle = service.startHandle;\n    while (1) {\n      const data = await this._execCommandWait(\n        this.readByTypeRequest(startHandle, service.endHandle, GATT.INCLUDE_UUID),\n        [ATT.OP_READ_BY_TYPE_RESP, ATT.OP_ERROR],\n      );\n      const opcode: any = data[0];\n      let i: any = 0;\n\n      if (opcode === ATT.OP_READ_BY_TYPE_RESP) {\n        const type: any = data[1];\n        const num: any = (data.length - 2) / type;\n\n        for (i = 0; i < num; i++) {\n          includedServices.push({\n            endHandle: data.readUInt16LE(2 + i * type + 0),\n            startHandle: data.readUInt16LE(2 + i * type + 2),\n            uuid:\n              type === 8\n                ? data.readUInt16LE(2 + i * type + 6).toString(16)\n                : data\n                    .slice(2 + i * type + 6)\n                    .slice(0, 16)\n                    .toString(\"hex\")\n                    .match(/.{1,2}/g)!\n                    .reverse()\n                    .join(\"\"),\n          });\n        }\n      }\n\n      if (\n        opcode !== ATT.OP_READ_BY_TYPE_RESP ||\n        includedServices[includedServices.length - 1].endHandle === service.endHandle\n      ) {\n        const includedServiceUuids: any = [];\n\n        for (i = 0; i < includedServices.length; i++) {\n          if (uuids.length === 0 || uuids.indexOf(includedServices[i].uuid) !== -1) {\n            includedServiceUuids.push(includedServices[i].uuid);\n          }\n        }\n\n        return includedServiceUuids;\n      }\n      startHandle = includedServices[includedServices.length - 1].endHandle + 1;\n    }\n  }\n\n  public async discoverCharacteristicsWait(serviceUuid: any, characteristicUuids: any) {\n    const service: any = this.getService(serviceUuid);\n    const characteristics: any = [];\n\n    this._characteristics[serviceUuid] = this._characteristics[serviceUuid] || {};\n    this._descriptors[serviceUuid] = this._descriptors[serviceUuid] || {};\n    let startHandle = service.startHandle;\n\n    while (1) {\n      const data = await this._execCommandWait(\n        this.readByTypeRequest(startHandle, service.endHandle, GATT.CHARAC_UUID),\n        [ATT.OP_READ_BY_TYPE_RESP, ATT.OP_ERROR],\n      );\n\n      const opcode: any = data[0];\n      let i: any = 0;\n\n      if (opcode === ATT.OP_READ_BY_TYPE_RESP) {\n        const type: any = data[1];\n        const num: any = (data.length - 2) / type;\n\n        for (i = 0; i < num; i++) {\n          characteristics.push({\n            startHandle: data.readUInt16LE(2 + i * type + 0),\n            properties: data.readUInt8(2 + i * type + 2),\n            valueHandle: data.readUInt16LE(2 + i * type + 3),\n            uuid:\n              type === 7\n                ? data.readUInt16LE(2 + i * type + 5).toString(16)\n                : data\n                    .slice(2 + i * type + 5)\n                    .slice(0, 16)\n                    .toString(\"hex\")\n                    .match(/.{1,2}/g)!\n                    .reverse()\n                    .join(\"\"),\n          });\n        }\n      }\n\n      if (\n        opcode !== ATT.OP_READ_BY_TYPE_RESP ||\n        characteristics[characteristics.length - 1].valueHandle === service.endHandle\n      ) {\n        const characteristicsDiscovered: any = [];\n        for (i = 0; i < characteristics.length; i++) {\n          const properties: any = characteristics[i].properties;\n\n          const characteristic: any = {\n            properties: [],\n            uuid: characteristics[i].uuid,\n          };\n\n          if (i !== 0) {\n            characteristics[i - 1].endHandle = characteristics[i].startHandle - 1;\n          }\n\n          if (i === characteristics.length - 1) {\n            characteristics[i].endHandle = service.endHandle;\n          }\n\n          this._characteristics[serviceUuid][characteristics[i].uuid] = characteristics[i];\n\n          if (properties & 0x01) {\n            characteristic.properties.push(\"broadcast\");\n          }\n\n          if (properties & 0x02) {\n            characteristic.properties.push(\"read\");\n          }\n\n          if (properties & 0x04) {\n            characteristic.properties.push(\"writeWithoutResponse\");\n          }\n\n          if (properties & 0x08) {\n            characteristic.properties.push(\"write\");\n          }\n\n          if (properties & 0x10) {\n            characteristic.properties.push(\"notify\");\n          }\n\n          if (properties & 0x20) {\n            characteristic.properties.push(\"indicate\");\n          }\n\n          if (properties & 0x40) {\n            characteristic.properties.push(\"authenticatedSignedWrites\");\n          }\n\n          if (properties & 0x80) {\n            characteristic.properties.push(\"extendedProperties\");\n          }\n\n          if (characteristicUuids.length === 0 || characteristicUuids.indexOf(characteristic.uuid) !== -1) {\n            characteristicsDiscovered.push(characteristic);\n          }\n        }\n\n        return characteristicsDiscovered;\n      }\n      startHandle = characteristics[characteristics.length - 1].valueHandle + 1;\n    }\n  }\n\n  public async readWait(serviceUuid: any, characteristicUuid: any): Promise<Buffer> {\n    const characteristic = this.getCharacteristic(serviceUuid, characteristicUuid);\n\n    let readData: any = Buffer.alloc(0);\n    while (1) {\n      let data;\n      if (readData.length === 0) {\n        data = await this._execCommandWait(this.readRequest(characteristic.valueHandle), ATT.OP_READ_RESP);\n      } else {\n        data = await this._execCommandWait(\n          this.readBlobRequest(characteristic.valueHandle, readData.length),\n          ATT.OP_READ_BLOB_RESP,\n        );\n      }\n      const opcode: any = data[0];\n\n      readData = Buffer.from(readData.toString(\"hex\") + data.slice(1).toString(\"hex\"), \"hex\");\n\n      if (data.length === this._mtu) {\n        continue;\n      } else {\n        return readData;\n      }\n    }\n    return readData;\n  }\n\n  public async writeWait(serviceUuid: any, characteristicUuid: any, data: any, withoutResponse: any): Promise<void> {\n    const characteristic: any = this.getCharacteristic(serviceUuid, characteristicUuid);\n    if (withoutResponse) {\n      await this._execNoRespCommandWait(this.writeRequest(characteristic.valueHandle, data, true));\n    } else if (data.length + 3 > this._mtu) {\n      await this.longWriteWait(serviceUuid, characteristicUuid, data, withoutResponse);\n    } else {\n      await this._execCommandWait(this.writeRequest(characteristic.valueHandle, data, false), ATT.OP_WRITE_RESP);\n    }\n  }\n\n  public async broadcastWait(serviceUuid: any, characteristicUuid: any, broadcast: any) {\n    const characteristic: any = this.getCharacteristic(serviceUuid, characteristicUuid);\n\n    const data = await this._execCommandWait(\n      this.readByTypeRequest(characteristic.startHandle, characteristic.endHandle, GATT.SERVER_CHARAC_CFG_UUID),\n      ATT.OP_READ_BY_TYPE_RESP,\n    );\n\n    const opcode: any = data[0];\n    // let type = data[1];\n    const handle: any = data.readUInt16LE(2);\n    let value: any = data.readUInt16LE(4);\n\n    if (broadcast) {\n      value |= 0x0001;\n    } else {\n      value &= 0xfffe;\n    }\n\n    const valueBuffer: any = Buffer.alloc(2);\n    valueBuffer.writeUInt16LE(value, 0);\n\n    const _data = await this._execCommandWait(this.writeRequest(handle, valueBuffer, false), ATT.OP_WRITE_RESP);\n  }\n\n  public async notifyWait(serviceUuid: any, characteristicUuid: any, notify: any): Promise<void> {\n    const characteristic: any = this.getCharacteristic(serviceUuid, characteristicUuid);\n\n    const data = await this._execCommandWait(\n      this.readByTypeRequest(characteristic.startHandle, characteristic.endHandle, GATT.CLIENT_CHARAC_CFG_UUID),\n      ATT.OP_READ_BY_TYPE_RESP,\n    );\n\n    const opcode: any = data[0];\n    // let type = data[1];\n    const handle: any = data.readUInt16LE(2);\n    let value: any = data.readUInt16LE(4);\n\n    const useNotify: any = characteristic.properties & 0x10;\n    const useIndicate: any = characteristic.properties & 0x20;\n\n    if (notify) {\n      if (useNotify) {\n        value |= 0x0001;\n      } else if (useIndicate) {\n        value |= 0x0002;\n      }\n    } else {\n      if (useNotify) {\n        value &= 0xfffe;\n      } else if (useIndicate) {\n        value &= 0xfffd;\n      }\n    }\n\n    const valueBuffer: any = Buffer.alloc(2);\n    valueBuffer.writeUInt16LE(value, 0);\n\n    const _data = await this._execCommandWait(this.writeRequest(handle, valueBuffer, false), ATT.OP_WRITE_RESP);\n    const _opcode: any = _data[0];\n    debug(\"set notify write results: \" + (_opcode === ATT.OP_WRITE_RESP));\n  }\n\n  public async discoverDescriptorsWait(serviceUuid: any, characteristicUuid: any) {\n    const characteristic: any = this.getCharacteristic(serviceUuid, characteristicUuid);\n    const descriptors: any = [];\n\n    this._descriptors[serviceUuid][characteristicUuid] = {};\n    let startHandle = characteristic.valueHandle + 1;\n    while (1) {\n      const data = await this._execCommandWait(this.findInfoRequest(startHandle, characteristic.endHandle), [\n        ATT.OP_FIND_INFO_RESP,\n        ATT.OP_ERROR,\n      ]);\n\n      const opcode: any = data[0];\n      let i: any = 0;\n\n      if (opcode === ATT.OP_FIND_INFO_RESP) {\n        const num: any = data[1];\n\n        for (i = 0; i < num; i++) {\n          descriptors.push({\n            handle: data.readUInt16LE(2 + i * 4 + 0),\n            uuid: data.readUInt16LE(2 + i * 4 + 2).toString(16),\n          });\n        }\n      }\n\n      if (opcode !== ATT.OP_FIND_INFO_RESP || descriptors[descriptors.length - 1].handle === characteristic.endHandle) {\n        const descriptorUuids: any = [];\n        for (i = 0; i < descriptors.length; i++) {\n          descriptorUuids.push(descriptors[i].uuid);\n\n          this._descriptors[serviceUuid][characteristicUuid][descriptors[i].uuid] = descriptors[i];\n        }\n\n        return descriptorUuids;\n      }\n      startHandle = descriptors[descriptors.length - 1].handle + 1;\n    }\n  }\n\n  public async readValueWait(serviceUuid: any, characteristicUuid: any, descriptorUuid: any): Promise<Buffer> {\n    const descriptor: any = this.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid);\n\n    const data = await this._execCommandWait(this.readRequest(descriptor.handle), ATT.OP_READ_RESP);\n\n    return data.slice(1);\n  }\n\n  public async writeValueWait(\n    serviceUuid: any,\n    characteristicUuid: any,\n    descriptorUuid: any,\n    data: any,\n  ): Promise<void> {\n    const descriptor: any = this.getDescriptor(serviceUuid, characteristicUuid, descriptorUuid);\n\n    await this._execCommandWait(this.writeRequest(descriptor.handle, data, false), ATT.OP_WRITE_RESP);\n  }\n\n  public async readHandleWait(handle: any): Promise<Buffer> {\n    const data = await this._execCommandWait(this.readRequest(handle), ATT.OP_READ_RESP);\n    return data.slice(1);\n  }\n\n  public async writeHandleWait(handle: any, data: any, withoutResponse: any) {\n    if (withoutResponse) {\n      await this._execNoRespCommandWait(this.writeRequest(handle, data, true));\n    } else {\n      await this._execCommandWait(this.writeRequest(handle, data, false), ATT.OP_WRITE_RESP);\n    }\n  }\n\n  private onAclStreamData(cid: any, data?: any) {\n    if (cid !== ATT.CID) {\n      return;\n    }\n\n    // notify / indicate\n    if (data[0] === ATT.OP_HANDLE_NOTIFY || data[0] === ATT.OP_HANDLE_IND) {\n      const valueHandle: any = data.readUInt16LE(1);\n      const valueData: any = data.slice(3);\n\n      this.emit(\"handleNotify\", this._address, valueHandle, valueData);\n\n      if (data[0] === ATT.OP_HANDLE_IND) {\n        // background\n        this._execNoRespCommandWait(this.handleConfirmation()).then(() => {\n          this.emit(\"handleConfirmation\", this._address, valueHandle);\n        });\n      }\n\n      for (const serviceUuid in this._services) {\n        for (const characteristicUuid in this._characteristics[serviceUuid]) {\n          if (this._characteristics[serviceUuid][characteristicUuid].valueHandle === valueHandle) {\n            this.emit(\"notification\", this._address, serviceUuid, characteristicUuid, valueData);\n          }\n        }\n      }\n    }\n  }\n\n  private onAclStreamEnd() {\n    this._aclStream.removeListener(\"data\", this.onAclStreamDataBinded);\n    this._aclStream.removeListener(\"end\", this.onAclStreamEndBinded);\n  }\n\n  private writeAtt(data: Buffer) {\n    const opCode = data[0];\n    const handle = data.length > 3 ? data.readUInt16LE(1) : \"none\";\n    debug(\n      `ATT: opCode=${opCode}(${ATT_OP_READABLES[opCode]}) handle=${handle} address=` +\n        this._address +\n        \": write: \" +\n        data.toString(\"hex\"),\n    );\n\n    this._aclStream.write(ATT.CID, data);\n  }\n\n  private errorResponse(opcode: any, handle: any, status: any) {\n    const buf: any = Buffer.alloc(5);\n\n    buf.writeUInt8(ATT.OP_ERROR, 0);\n    buf.writeUInt8(opcode, 1);\n    buf.writeUInt16LE(handle, 2);\n    buf.writeUInt8(status, 4);\n\n    return buf;\n  }\n\n  private mtuRequest(mtu: any) {\n    const buf: any = Buffer.alloc(3);\n\n    buf.writeUInt8(ATT.OP_MTU_REQ, 0);\n    buf.writeUInt16LE(mtu, 1);\n\n    return buf;\n  }\n\n  private readByGroupRequest(startHandle: any, endHandle: any, groupUuid: any) {\n    const buf: any = Buffer.alloc(7);\n\n    buf.writeUInt8(ATT.OP_READ_BY_GROUP_REQ, 0);\n    buf.writeUInt16LE(startHandle, 1);\n    buf.writeUInt16LE(endHandle, 3);\n    buf.writeUInt16LE(groupUuid, 5);\n\n    return buf;\n  }\n\n  private readByTypeRequest(startHandle: any, endHandle: any, groupUuid: any) {\n    const buf: any = Buffer.alloc(7);\n\n    buf.writeUInt8(ATT.OP_READ_BY_TYPE_REQ, 0);\n    buf.writeUInt16LE(startHandle, 1);\n    buf.writeUInt16LE(endHandle, 3);\n    buf.writeUInt16LE(groupUuid, 5);\n\n    return buf;\n  }\n\n  private readRequest(handle: any) {\n    const buf: any = Buffer.alloc(3);\n\n    buf.writeUInt8(ATT.OP_READ_REQ, 0);\n    buf.writeUInt16LE(handle, 1);\n\n    return buf;\n  }\n\n  private readBlobRequest(handle: any, offset: any) {\n    const buf: any = Buffer.alloc(5);\n\n    buf.writeUInt8(ATT.OP_READ_BLOB_REQ, 0);\n    buf.writeUInt16LE(handle, 1);\n    buf.writeUInt16LE(offset, 3);\n\n    return buf;\n  }\n\n  private findInfoRequest(startHandle: any, endHandle: any) {\n    const buf: any = Buffer.alloc(5);\n\n    buf.writeUInt8(ATT.OP_FIND_INFO_REQ, 0);\n    buf.writeUInt16LE(startHandle, 1);\n    buf.writeUInt16LE(endHandle, 3);\n\n    return buf;\n  }\n\n  private writeRequest(handle: any, data: any, withoutResponse: any) {\n    const buf: any = Buffer.alloc(3 + data.length);\n\n    buf.writeUInt8(withoutResponse ? ATT.OP_WRITE_CMD : ATT.OP_WRITE_REQ, 0);\n    buf.writeUInt16LE(handle, 1);\n\n    for (let i = 0; i < data.length; i++) {\n      buf.writeUInt8(data.readUInt8(i), i + 3);\n    }\n\n    return buf;\n  }\n\n  private prepareWriteRequest(handle: any, offset: any, data: any) {\n    const buf: any = Buffer.alloc(5 + data.length);\n\n    buf.writeUInt8(ATT.OP_PREPARE_WRITE_REQ, 0);\n    buf.writeUInt16LE(handle, 1);\n    buf.writeUInt16LE(offset, 3);\n\n    for (let i = 0; i < data.length; i++) {\n      buf.writeUInt8(data.readUInt8(i), i + 5);\n    }\n\n    return buf;\n  }\n\n  private executeWriteRequest(handle: any, cancelPreparedWrites?: any) {\n    const buf: any = Buffer.alloc(2);\n\n    buf.writeUInt8(ATT.OP_EXECUTE_WRITE_REQ, 0);\n    buf.writeUInt8(cancelPreparedWrites ? 0 : 1, 1);\n\n    return buf;\n  }\n\n  private handleConfirmation() {\n    const buf: any = Buffer.alloc(1);\n\n    buf.writeUInt8(ATT.OP_HANDLE_CNF, 0);\n\n    return buf;\n  }\n\n  /* Perform a \"long write\" as described Bluetooth Spec section 4.9.4 \"Write Long Characteristic Values\" */\n  private async longWriteWait(serviceUuid: any, characteristicUuid: any, data: any, withoutResponse: any) {\n    const characteristic: any = this.getCharacteristic(serviceUuid, characteristicUuid);\n    const limit: any = this._mtu - 5;\n\n    /* split into prepare-write chunks and queue them */\n    let offset: any = 0;\n\n    while (offset < data.length) {\n      const end: any = offset + limit;\n      const chunk: any = data.slice(offset, end);\n      const _resp = await this._execCommandWait(\n        this.prepareWriteRequest(characteristic.valueHandle, offset, chunk),\n        ATT.OP_PREPARE_WRITE_RESP,\n      );\n\n      const expected_length: any = chunk.length + 5;\n\n      if (_resp.length !== expected_length) {\n        /* the response should contain the data packet echoed back to the caller */\n        throw new Error(`unexpected prepareWriteResponse length ${_resp.length} (expecting ${expected_length})`);\n      }\n\n      offset = end;\n    }\n\n    if (withoutResponse) {\n      await this._execNoRespCommandWait(this.executeWriteRequest(characteristic.valueHandle));\n    } else {\n      await this._execCommandWait(this.executeWriteRequest(characteristic.valueHandle), ATT.OP_EXECUTE_WRITE_RESP);\n    }\n    throw new ObnizBleOpError();\n  }\n\n  private getService(serviceUuid: any) {\n    if (!this._services[serviceUuid]) {\n      throw new ObnizBleUnknownServiceError(this._address, serviceUuid);\n    }\n\n    return this._services[serviceUuid];\n  }\n\n  private getCharacteristic(serviceUuid: any, characteristicUuid: any) {\n    if (!this._characteristics[serviceUuid] || !this._characteristics[serviceUuid][characteristicUuid]) {\n      throw new ObnizBleUnknownCharacteristicError(this._address, serviceUuid, characteristicUuid);\n    }\n\n    return this._characteristics[serviceUuid][characteristicUuid];\n  }\n\n  private getDescriptor(serviceUuid: any, characteristicUuid: any, descriptorUuid: any) {\n    if (\n      !this._descriptors[serviceUuid] ||\n      !this._descriptors[serviceUuid][characteristicUuid] ||\n      !this._descriptors[serviceUuid][characteristicUuid][descriptorUuid]\n    ) {\n      throw new ObnizBleUnknownDescriptorError(this._address, serviceUuid, characteristicUuid, descriptorUuid);\n    }\n\n    return this._descriptors[serviceUuid][characteristicUuid][descriptorUuid];\n  }\n\n  private _queueCommand(buffer: Buffer, callback: any, writeCallback?: any) {\n    this._commandQueue.push({\n      buffer,\n      callback,\n      writeCallback,\n    });\n\n    this._runQueueCommand();\n  }\n\n  private _runQueueCommand() {\n    if (this._currentCommand === null) {\n      while (this._commandQueue.length) {\n        this._currentCommand = this._commandQueue.shift();\n\n        this.writeAtt(this._currentCommand.buffer);\n        if (this._currentCommand.callback) {\n          break;\n        } else if (this._currentCommand.writeCallback) {\n          this._currentCommand.writeCallback();\n          this._currentCommand = null;\n        }\n      }\n    }\n  }\n\n  private _serialPromiseQueueWait(func: any) {\n    const onfinish = () => {\n      this._commandPromises = this._commandPromises.filter((e) => e !== resultPromise);\n      if (disconnectReject) {\n        this.off(\"end\", disconnectReject);\n      }\n    };\n\n    let disconnectReject: any = null;\n    const doPromise = Promise.all(this._commandPromises)\n      .catch((error) => {\n        // nothing\n      })\n      .then(() => {\n        return func();\n      })\n      .catch((reason) => {\n        throw reason;\n      })\n      .then(\n        (result) => {\n          onfinish();\n          return Promise.resolve(result);\n        },\n        (error) => {\n          onfinish();\n          return Promise.reject(error);\n        },\n      );\n    const disconnectPromise = new Promise((resolve, reject) => {\n      disconnectReject = (reason: any) => {\n        onfinish();\n        reject(reason);\n      };\n      this.on(\"end\", disconnectReject);\n    });\n    const resultPromise = Promise.race([doPromise, disconnectPromise]);\n    this._commandPromises.push(resultPromise);\n    return resultPromise as Promise<any>;\n  }\n\n  private _execCommandWait(buffer: Buffer, waitOpcode: number | number[]): Promise<Buffer> {\n    const waitOpcodes: number[] = Array.isArray(waitOpcode) ? waitOpcode : [waitOpcode];\n    let errorHandle = true;\n    if (!waitOpcodes.includes(ATT.OP_ERROR)) {\n      waitOpcodes.push(ATT.OP_ERROR);\n      errorHandle = false;\n    }\n    return this._serialPromiseQueueWait(async () => {\n      while (1) {\n        this.writeAtt(buffer);\n        const promises = [];\n        for (const code of waitOpcodes) {\n          promises.push(this._aclStream.readWait(ATT.CID, code));\n        }\n        debug(`ATT: wait for opcode=${waitOpcodes}`);\n        const data: Buffer = await Promise.race(promises);\n        const opCode = data.readUInt8(0);\n        debug(`ATT: received opCode=${opCode}(${ATT_OP_READABLES[opCode]})`);\n        if (opCode === ATT.OP_ERROR) {\n          const errCode = data[4];\n          if (\n            (errCode === ATT.ECODE_AUTHENTICATION ||\n              errCode === ATT.ECODE_AUTHORIZATION ||\n              errCode === ATT.ECODE_INSUFF_ENC) &&\n            this._security !== \"medium\"\n          ) {\n            // retry after encrypt\n            debug(`ATT: going to encrypt and try it later.`);\n            await this._aclStream.encryptWait();\n            continue;\n          }\n          if (errorHandle) {\n            return data;\n          }\n          const requestOpCode = data.readUInt8(1);\n          const attributeHandle = data.readUInt16LE(2);\n\n          throw new ObnizBleAttError(\n            errCode,\n            `errorCode=${errCode}(${ATT_ECODE_READABLES[errCode]}) for request_opcode=${requestOpCode}(${ATT_OP_READABLES[requestOpCode]}) atributeHandle=${attributeHandle} `,\n          );\n        }\n        return data;\n      }\n    }).catch((reason) => {\n      throw reason;\n    });\n  }\n\n  private _execNoRespCommandWait(buffer: Buffer): Promise<Buffer> {\n    return this._serialPromiseQueueWait(async () => {\n      this.writeAtt(buffer);\n    });\n  }\n}\n\nexport default Gatt;\n"]}