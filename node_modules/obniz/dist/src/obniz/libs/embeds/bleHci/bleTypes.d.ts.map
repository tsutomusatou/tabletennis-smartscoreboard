{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleTypes.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C;;GAEG;AACH,oBAAY,IAAI,GAAG,MAAM,CAAC;AAC1B,oBAAY,gBAAgB,GAAG,MAAM,CAAC;AACtC,oBAAY,MAAM,GAAG,MAAM,CAAC;AAE5B,oBAAY,aAAa,GAAG,KAAK,GAAG,MAAM,GAAG,QAAQ,CAAC;AACtD,oBAAY,oBAAoB,GAAG,QAAQ,GAAG,QAAQ,GAAG,YAAY,GAAG,YAAY,CAAC;AACrF,oBAAY,YAAY,GACpB,0BAA0B,GAC1B,mCAAmC,GACnC,uBAAuB,GACvB,6BAA6B,GAC7B,eAAe,CAAC;AAEpB,oBAAY,mBAAmB,GAAG,WAAW,GAAG,QAAQ,GAAG,MAAM,GAAG,OAAO,GAAG,wBAAwB,GAAG,UAAU,CAAC;AAEpH,oBAAY,oBAAoB,GAC5B,2BAA2B,GAC3B,2BAA2B,GAC3B,sBAAsB,GACtB,sBAAsB,GACtB,gBAAgB,CAAC;AAErB,MAAM,WAAW,mBAAmB;IAClC,YAAY,CAAC,EAAE,IAAI,EAAE,CAAC;IACtB,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,gBAAgB,CAAC,EAAE;QACjB,WAAW,CAAC,EAAE,MAAM,CAAC;QACrB,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC;KACjB,CAAC;CACH;AAED,MAAM,WAAW,oBAAqB,SAAQ,mBAAmB;IAC/D,KAAK,CAAC,EAAE,oBAAoB,EAAE,CAAC;CAChC;AAED,MAAM,WAAW,mBAAmB;IAClC;;OAEG;IACH,IAAI,EAAE,IAAI,CAAC;IAEX;;;;OAIG;IACH,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC;IAEhB;;;;OAIG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;CACf;AAED,MAAM,WAAW,uBAAuB;IACtC;;OAEG;IACH,IAAI,EAAE,IAAI,CAAC;IAEX;;;;OAIG;IACH,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC;IAEhB;;;;OAIG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd,UAAU,CAAC,EAAE,mBAAmB,EAAE,CAAC;IAEnC,WAAW,CAAC,EAAE,KAAK,CAAC,mBAAmB,GAAG,aAAa,CAAC,CAAC;CAC1D;AAED,MAAM,WAAW,gBAAgB;IAC/B;;OAEG;IACH,IAAI,EAAE,IAAI,CAAC;IAEX,eAAe,CAAC,EAAE,KAAK,CAAC,uBAAuB,GAAG,iBAAiB,CAAC,CAAC;CACtE;AAED,MAAM,WAAW,mBAAmB;CAAG","file":"bleTypes.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\n\nimport BleCharacteristic from \"./bleCharacteristic\";\nimport BleDescriptor from \"./bleDescriptor\";\n\n/**\n * BLE UUID. Case is ignored. So aa00 and AA00 are the same.\n */\nexport type UUID = string;\nexport type BleDeviceAddress = string;\nexport type Handle = number;\n\nexport type BleDeviceType = \"ble\" | \"dumo\" | \"breder\";\nexport type BleDeviceAddressType = \"public\" | \"random\" | \"rpa_public\" | \"rpa_random\";\nexport type BleEventType =\n  | \"connectable_advertisemnt\"\n  | \"connectable_directed_advertisemnt\"\n  | \"scannable_advertising\"\n  | \"non_connectable_advertising\"\n  | \"scan_response\";\n\nexport type BleAttributePropery = \"broadcast\" | \"notify\" | \"read\" | \"write\" | \"write_without_response\" | \"indicate\";\n\nexport type BleAdvertisementFlag =\n  | \"limited_discoverable_mode\"\n  | \"general_discoverable_mode\"\n  | \"br_edr_not_supported\"\n  | \"le_br_edr_controller\"\n  | \"le_br_edr_host\";\n\nexport interface BleScanResponseData {\n  serviceUuids?: UUID[];\n  localName?: string;\n  manufacturerData?: {\n    companyCode?: number;\n    data?: number[];\n  };\n}\n\nexport interface BleAdvertisementData extends BleScanResponseData {\n  flags?: BleAdvertisementFlag[];\n}\n\nexport interface BleDescriptorDefine {\n  /**\n   * UUID\n   */\n  uuid: UUID;\n\n  /**\n   * Raw data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  data?: number[];\n\n  /**\n   * String data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  text?: string;\n}\n\nexport interface BleCharacteristicDefine {\n  /**\n   * UUID\n   */\n  uuid: UUID;\n\n  /**\n   * Raw data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  data?: number[];\n\n  /**\n   * String data\n   *\n   * Only one can be specifiedIf [[data]]  or [[text]]\n   */\n  text?: string;\n\n  properties?: BleAttributePropery[];\n\n  descriptors?: Array<BleDescriptorDefine | BleDescriptor>;\n}\n\nexport interface BleServiceDefine {\n  /**\n   * UUID\n   */\n  uuid: UUID;\n\n  characteristics?: Array<BleCharacteristicDefine | BleCharacteristic>;\n}\n\nexport interface BlePeripheralDefine {}\n"]}