{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/protocol/hci.ts"],"names":[],"mappings":"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","file":"hci.js","sourcesContent":["/**\n * @packageDocumentation\n * @ignore\n */\nimport EventEmitter from \"eventemitter3\";\nimport ObnizBLEHci from \"../hci\";\n\nimport { ObnizBleHciStateError, ObnizBleUnsupportedHciError } from \"../../../../ObnizError\";\nimport { Handle } from \"../bleTypes\";\n\nnamespace COMMANDS {\n  export const HCI_COMMAND_PKT: any = 0x01;\n  export const HCI_ACLDATA_PKT: any = 0x02;\n  export const HCI_EVENT_PKT: any = 0x04;\n\n  export const ACL_START_NO_FLUSH: any = 0x00;\n  export const ACL_CONT: any = 0x01;\n  export const ACL_START: any = 0x02;\n\n  export const EVT_DISCONN_COMPLETE: any = 0x05;\n  export const EVT_ENCRYPT_CHANGE: any = 0x08;\n  export const EVT_CMD_COMPLETE: any = 0x0e;\n  export const EVT_CMD_STATUS: any = 0x0f;\n  export const EVT_NUMBER_OF_COMPLETED_PACKETS: any = 0x13;\n  export const EVT_ENCRYPTION_KEY_REFRESH_COMPLETE: any = 0x30;\n  export const EVT_LE_META_EVENT: any = 0x3e;\n\n  export const EVT_LE_CONN_COMPLETE: any = 0x01;\n  export const EVT_LE_ADVERTISING_REPORT: any = 0x02;\n  export const EVT_LE_CONN_UPDATE_COMPLETE: any = 0x03;\n\n  export const OGF_LINK_CTL: any = 0x01;\n  export const OCF_DISCONNECT: any = 0x0006;\n\n  export const OGF_HOST_CTL: any = 0x03;\n  export const OCF_SET_EVENT_MASK: any = 0x0001;\n  export const OCF_RESET: any = 0x0003;\n  export const OCF_READ_LE_HOST_SUPPORTED: any = 0x006c;\n  export const OCF_WRITE_LE_HOST_SUPPORTED: any = 0x006d;\n\n  export const OGF_INFO_PARAM: any = 0x04;\n  export const OCF_READ_LOCAL_VERSION: any = 0x0001;\n  export const OCF_READ_BUFFER_SIZE: any = 0x0005;\n  export const OCF_READ_BD_ADDR: any = 0x0009;\n\n  export const OGF_STATUS_PARAM: any = 0x05;\n  export const OCF_READ_RSSI: any = 0x0005;\n\n  export const OGF_LE_CTL: any = 0x08;\n  export const OCF_LE_SET_EVENT_MASK: any = 0x0001;\n  export const OCF_LE_READ_BUFFER_SIZE: any = 0x0002;\n  export const OCF_LE_SET_ADVERTISING_PARAMETERS: any = 0x0006;\n  export const OCF_LE_SET_ADVERTISING_DATA: any = 0x0008;\n  export const OCF_LE_SET_SCAN_RESPONSE_DATA: any = 0x0009;\n  export const OCF_LE_SET_ADVERTISE_ENABLE: any = 0x000a;\n  export const OCF_LE_SET_SCAN_PARAMETERS: any = 0x000b;\n  export const OCF_LE_SET_SCAN_ENABLE: any = 0x000c;\n  export const OCF_LE_CREATE_CONN: any = 0x000d;\n  export const OCF_LE_CREATE_CONN_CANCEL: any = 0x000e;\n  export const OCF_LE_CONN_UPDATE: any = 0x0013;\n  export const OCF_LE_START_ENCRYPTION: any = 0x0019;\n  export const OCF_LE_LTK_NEG_REPLY: any = 0x001b;\n\n  export const DISCONNECT_CMD: any = OCF_DISCONNECT | (OGF_LINK_CTL << 10);\n\n  export const SET_EVENT_MASK_CMD: any = OCF_SET_EVENT_MASK | (OGF_HOST_CTL << 10);\n  export const RESET_CMD: any = OCF_RESET | (OGF_HOST_CTL << 10);\n  export const READ_LE_HOST_SUPPORTED_CMD: any = OCF_READ_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\n  export const WRITE_LE_HOST_SUPPORTED_CMD: any = OCF_WRITE_LE_HOST_SUPPORTED | (OGF_HOST_CTL << 10);\n\n  export const READ_LOCAL_VERSION_CMD: any = OCF_READ_LOCAL_VERSION | (OGF_INFO_PARAM << 10);\n  export const READ_BUFFER_SIZE_CMD: any = OCF_READ_BUFFER_SIZE | (OGF_INFO_PARAM << 10);\n  export const READ_BD_ADDR_CMD: any = OCF_READ_BD_ADDR | (OGF_INFO_PARAM << 10);\n\n  export const READ_RSSI_CMD: any = OCF_READ_RSSI | (OGF_STATUS_PARAM << 10);\n\n  export const LE_SET_EVENT_MASK_CMD: any = OCF_LE_SET_EVENT_MASK | (OGF_LE_CTL << 10);\n  export const LE_READ_BUFFER_SIZE_CMD: any = OCF_LE_READ_BUFFER_SIZE | (OGF_LE_CTL << 10);\n  export const LE_SET_SCAN_PARAMETERS_CMD: any = OCF_LE_SET_SCAN_PARAMETERS | (OGF_LE_CTL << 10);\n  export const LE_SET_SCAN_ENABLE_CMD: any = OCF_LE_SET_SCAN_ENABLE | (OGF_LE_CTL << 10);\n  export const LE_CREATE_CONN_CMD: any = OCF_LE_CREATE_CONN | (OGF_LE_CTL << 10);\n  export const LE_CREATE_CONN_CANCEL_CMD: any = OCF_LE_CREATE_CONN_CANCEL | (OGF_LE_CTL << 10);\n  export const LE_CONN_UPDATE_CMD: any = OCF_LE_CONN_UPDATE | (OGF_LE_CTL << 10);\n  export const LE_START_ENCRYPTION_CMD: any = OCF_LE_START_ENCRYPTION | (OGF_LE_CTL << 10);\n  export const LE_SET_ADVERTISING_PARAMETERS_CMD: any = OCF_LE_SET_ADVERTISING_PARAMETERS | (OGF_LE_CTL << 10);\n\n  export const LE_SET_ADVERTISING_DATA_CMD: any = OCF_LE_SET_ADVERTISING_DATA | (OGF_LE_CTL << 10);\n  export const LE_SET_SCAN_RESPONSE_DATA_CMD: any = OCF_LE_SET_SCAN_RESPONSE_DATA | (OGF_LE_CTL << 10);\n  export const LE_SET_ADVERTISE_ENABLE_CMD: any = OCF_LE_SET_ADVERTISE_ENABLE | (OGF_LE_CTL << 10);\n  export const LE_LTK_NEG_REPLY_CMD: any = OCF_LE_LTK_NEG_REPLY | (OGF_LE_CTL << 10);\n\n  export const HCI_OE_USER_ENDED_CONNECTION: any = 0x13;\n}\n\n/**\n * @ignore\n */\nconst STATUS_MAPPER: any = require(\"./hci-status\");\n\ntype HciEventTypes =\n  // central\n  | \"leAdvertisingReport\"\n\n  // peripheral\n  | \"leConnComplete\" // central also use, but slave only emit\n\n  // common\n  | \"stateChange\"\n  | \"leConnUpdateComplete\" // update interval, latency, timeout are complete\n  | \"disconnComplete\"\n  | \"encryptChange\"\n  | \"aclDataPkt\";\n\ntype HciState = \"poweredOn\" | \"poweredOff\";\n\n/**\n * @ignore\n */\nclass Hci extends EventEmitter<HciEventTypes> {\n  public static STATUS_MAPPER: any;\n  public _obnizHci: ObnizBLEHci;\n  public _handleBuffers: any;\n  public _socket: any;\n  public _handleAclsInProgress: any;\n  public _aclOutQueue: any;\n  public _aclMtu: any;\n  public _aclMaxInProgress: any;\n  public addressType: any;\n  public address: any;\n  private _state: HciState;\n  private _aclStreamObservers: { [handle: string]: { [key: string]: Array<(arg0: Buffer) => any> } } = {};\n\n  constructor(obnizHci: any) {\n    super();\n    this._obnizHci = obnizHci;\n    this._state = \"poweredOff\";\n\n    this.resetBuffers();\n\n    this._obnizHci.Obniz.on(\"disconnect\", () => {\n      this.stateChange(\"poweredOff\");\n    });\n\n    this._socket = {\n      write: (data: any) => {\n        const arr: any = Array.from(data);\n        this._obnizHci.write(arr);\n      },\n    };\n    this._obnizHci.onread = this.onSocketData.bind(this);\n  }\n  public debugHandler: any = () => {};\n\n  public async initWait() {\n    await this.resetWait();\n  }\n\n  public setEventMask() {\n    const cmd: any = Buffer.alloc(12);\n    const eventMask: any = Buffer.from(\"fffffbff07f8bf3d\", \"hex\");\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.SET_EVENT_MASK_CMD, 1);\n\n    // length\n    cmd.writeUInt8(eventMask.length, 3);\n\n    eventMask.copy(cmd, 4);\n\n    this.debug(\"set event mask - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async resetWait(): Promise<void> {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.OCF_RESET | (COMMANDS.OGF_HOST_CTL << 10), 1);\n\n    // length\n    cmd.writeUInt8(0x00, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.RESET_CMD);\n    this.debug(\"reset - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const resetResult = await p;\n    this.resetBuffers();\n    this.setEventMask();\n    this.setLeEventMask();\n    const p1 = this.readLocalVersionWait();\n    const p2 = this.readBdAddrWait();\n    this.writeLeHostSupported();\n    const p3 = this.readLeHostSupportedWait();\n    const p4 = this.leReadBufferSizeWait();\n    await Promise.all([p1, p2, p3, p4]);\n\n    if (this._state !== \"poweredOn\") {\n      const p5 = this.setScanEnabledWait(false, true);\n      const p6 = this.setScanParametersWait(false);\n      await Promise.all([p5, p6]);\n      this.stateChange(\"poweredOn\");\n    }\n  }\n\n  public resetBuffers() {\n    this._handleAclsInProgress = {};\n    this._handleBuffers = {};\n    this._aclOutQueue = [];\n  }\n\n  public async readLocalVersionWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_LOCAL_VERSION_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_LOCAL_VERSION_CMD);\n    this.debug(\"read local version - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    const hciVer: any = data.result.readUInt8(0);\n    const hciRev: any = data.result.readUInt16LE(1);\n    const lmpVer: any = data.result.readInt8(3);\n    const manufacturer: any = data.result.readUInt16LE(4);\n    const lmpSubVer: any = data.result.readUInt16LE(6);\n\n    if (hciVer < 0x06) {\n      throw new ObnizBleUnsupportedHciError(0x06, hciVer);\n    }\n\n    return { hciVer, hciRev, lmpVer, manufacturer, lmpSubVer };\n  }\n\n  public async readBdAddrWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_BD_ADDR_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_BD_ADDR_CMD);\n    this.debug(\"read bd addr - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n    this.addressType = \"public\";\n    this.address = data.result\n      .toString(\"hex\")\n      .match(/.{1,2}/g)!\n      .reverse()\n      .join(\":\");\n\n    this.debug(\"address = \" + this.address);\n\n    return this.address;\n  }\n\n  public setLeEventMask() {\n    const cmd: any = Buffer.alloc(12);\n    const leEventMask: any = Buffer.from(\"1f00000000000000\", \"hex\");\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_EVENT_MASK_CMD, 1);\n\n    // length\n    cmd.writeUInt8(leEventMask.length, 3);\n\n    leEventMask.copy(cmd, 4);\n\n    this.debug(\"set le event mask - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async readLeHostSupportedWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_LE_HOST_SUPPORTED_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x00, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_LE_HOST_SUPPORTED_CMD);\n    this.debug(\"read LE host supported - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n\n    if (data.status === 0) {\n      const le: any = data.result.readUInt8(0);\n      const simul: any = data.result.readUInt8(1);\n\n      this.debug(\"\\t\\t\\tle = \" + le);\n      this.debug(\"\\t\\t\\tsimul = \" + simul);\n    }\n    return data;\n  }\n\n  public writeLeHostSupported() {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.WRITE_LE_HOST_SUPPORTED_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt8(0x01, 4); // le\n    cmd.writeUInt8(0x00, 5); // simul\n\n    this.debug(\"write LE host supported - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async setScanParametersWait(isActiveScan: boolean) {\n    const cmd: any = Buffer.alloc(11);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_PARAMETERS_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x07, 3);\n\n    // data\n    cmd.writeUInt8(isActiveScan ? 0x01 : 0x00, 4); // type: 0 -> passive, 1 -> active\n    cmd.writeUInt16LE(0x0010, 5); // internal, ms * 1.6\n    cmd.writeUInt16LE(0x0010, 7); // window, ms * 1.6\n    cmd.writeUInt8(0x00, 9); // own address type: 0 -> public, 1 -> random\n    cmd.writeUInt8(0x00, 10); // filter: 0 -> all event types\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_PARAMETERS_CMD);\n    this.debug(\"set scan parameters - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public async setScanEnabledWait(enabled: boolean, filterDuplicates: boolean) {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_ENABLE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n    cmd.writeUInt8(filterDuplicates ? 0x01 : 0x00, 5); // duplicates: 0 -> duplicates, 0 -> duplicates\n\n    this.debug(\"set scan enabled - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_ENABLE_CMD);\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public async createLeConnWait(address: any, addressType: any, timeout: number = 90 * 1000) {\n    const cmd: any = Buffer.alloc(29);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_CREATE_CONN_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x19, 3);\n\n    // data\n    cmd.writeUInt16LE(0x0060, 4); // interval\n    cmd.writeUInt16LE(0x0030, 6); // window\n    cmd.writeUInt8(0x00, 8); // initiator filter\n\n    cmd.writeUInt8(addressType === \"random\" ? 0x01 : 0x00, 9); // peer address type\n    Buffer.from(\n      address\n        .split(\":\")\n        .reverse()\n        .join(\"\"),\n      \"hex\",\n    ).copy(cmd, 10); // peer address\n\n    cmd.writeUInt8(0x00, 16); // own address type\n\n    cmd.writeUInt16LE(0x0006, 17); // min interval\n    cmd.writeUInt16LE(0x000c, 19); // max interval\n    cmd.writeUInt16LE(0x0000, 21); // latency\n    cmd.writeUInt16LE(0x00c8, 23); // supervision timeout\n    cmd.writeUInt16LE(0x0004, 25); // min ce length\n    cmd.writeUInt16LE(0x0006, 27); // max ce length\n\n    this.debug(\"create le conn - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readLeMetaEventWait(COMMANDS.EVT_LE_CONN_COMPLETE, {\n      timeout,\n      onTimeout: async () => {\n        // 一定時間経過。onTimeoutをオーバーライドしてreject()されるのを防ぎ、キャンセルリクエストする。キャンセルされると接続失敗が返るので待つ\n        await this.createLeConnCancelWait();\n      },\n    });\n    this._socket.write(cmd);\n\n    try {\n      const { status, data } = await p;\n      return this.processLeConnComplete(status, data);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  public async createLeConnCancelWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_CREATE_CONN_CANCEL_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    /*\n     * 成功すると0x00 失敗で 0x01~0xFFが帰る\n     * 特に接続処理中じゃない場合は 0x0x(command disallowed)がかえる\n     * キャンセルに成功してその応答が来たあとには\n     * LE Connection Complete or an HCI_LE_Enhanced_Connection_Complete event\n     * のどちらかがちゃんと返る\n     */\n    this.debug(\"create le conn cancel - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_CREATE_CONN_CANCEL_CMD);\n    this._socket.write(cmd);\n\n    const { status } = await p;\n    if (status !== 0x00) {\n      throw new ObnizBleHciStateError(status);\n    }\n  }\n\n  public async connUpdateLeWait(\n    handle: Handle,\n    minInterval: number,\n    maxInterval: number,\n    latency: number,\n    supervisionTimeout: number,\n  ) {\n    const cmd: any = Buffer.alloc(18);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_CONN_UPDATE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0e, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4);\n    cmd.writeUInt16LE(Math.floor(minInterval / 1.25), 6); // min interval\n    cmd.writeUInt16LE(Math.floor(maxInterval / 1.25), 8); // max interval\n    cmd.writeUInt16LE(latency, 10); // latency\n    cmd.writeUInt16LE(Math.floor(supervisionTimeout / 10), 12); // supervision timeout\n    cmd.writeUInt16LE(0x0000, 14); // min ce length\n    cmd.writeUInt16LE(0x0000, 16); // max ce length\n\n    this.debug(\"conn update le - writing: \" + cmd.toString(\"hex\"));\n    const p = this.readLeMetaEventWait(COMMANDS.EVT_LE_CONN_UPDATE_COMPLETE);\n    this._socket.write(cmd);\n\n    const { status, data } = await p;\n    return this.processLeConnUpdateComplete(status, data);\n  }\n\n  // this function is use by connUpdateLeWait / processLeMetaEvent.\n  public processLeConnUpdateComplete(status: any, data: any) {\n    const handle: Handle = data.readUInt16LE(0);\n    const interval: any = data.readUInt16LE(2) * 1.25;\n    const latency: any = data.readUInt16LE(4); // TODO: multiplier?\n    const supervisionTimeout: any = data.readUInt16LE(6) * 10;\n\n    this.debug(\"\\t\\t\\thandle = \" + handle);\n    this.debug(\"\\t\\t\\tinterval = \" + interval);\n    this.debug(\"\\t\\t\\tlatency = \" + latency);\n    this.debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\n\n    return { status, handle, interval, latency, supervisionTimeout };\n  }\n\n  public async startLeEncryptionWait(handle: Handle, random: Buffer, diversifier: Buffer, key: Buffer) {\n    const cmd: any = Buffer.alloc(32);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_START_ENCRYPTION_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x1c, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n    random.copy(cmd, 6);\n    diversifier.copy(cmd, 14);\n    key.copy(cmd, 16);\n\n    // console.log(\"start le encryption - writing: \" + cmd.toString(\"hex\"));\n    const p1 = this._obnizHci.readWait([COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_ENCRYPT_CHANGE], {\n      waitingFor: \"EVT_ENCRYPT_CHANGE\",\n    });\n    const p2 = this._obnizHci.readWait([COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_ENCRYPTION_KEY_REFRESH_COMPLETE], {\n      waitingFor: \"EVT_ENCRYPTION_KEY_REFRESH_COMPLETE\",\n    });\n\n    this.debug(\"start le encryption - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await Promise.race([p1, p2]);\n    // const data = await p1;\n    // console.log(\"start le encryption - data: \" + data.toString(\"hex\"));\n    if (data.readUInt8(1) === COMMANDS.EVT_ENCRYPT_CHANGE) {\n      if (data.length !== 7) {\n        throw new Error(`le encryption event EVT_ENCRYPT_CHANGE length must be 7 but recieved ${data.length}`);\n      }\n      const status = data.readUInt8(3);\n      if (status !== 0x00) {\n        throw new Error(`le encryption event EVT_ENCRYPT_CHANGE failed with error ${status}`);\n      }\n      const encHandle: Handle = data.readUInt16LE(4);\n      const encrypt: any = data.readUInt8(6);\n\n      this.debug(\"\\t\\thandle = \" + encHandle);\n      this.debug(\"\\t\\tencrypt = \" + encrypt);\n\n      this.emit(\"encryptChange\", encHandle, encrypt);\n      return encrypt;\n    } else if (data[1] === COMMANDS.EVT_ENCRYPTION_KEY_REFRESH_COMPLETE) {\n      if (data.length !== 6) {\n        throw new Error(\n          `le encryption event EVT_ENCRYPTION_KEY_REFRESH_COMPLETE length must be 7 but recieved ${data.length}`,\n        );\n      }\n      const status = data.readUInt8(3);\n      if (status !== 0x00) {\n        throw new Error(`le encryption event EVT_ENCRYPTION_KEY_REFRESH_COMPLETE failed with error ${status}`);\n      }\n      const encHandle: Handle = data.readUInt16LE(4);\n\n      this.debug(\"\\t\\thandle = \" + encHandle);\n      return \"refresh\";\n    }\n    throw new Error(\"Never Happend\");\n  }\n\n  public disconnect(handle: Handle, reason?: number) {\n    const cmd: any = Buffer.alloc(7);\n\n    reason = reason || COMMANDS.HCI_OE_USER_ENDED_CONNECTION;\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.DISCONNECT_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x03, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n    cmd.writeUInt8(reason, 6); // reason\n\n    this.debug(\"disconnect - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n  }\n\n  public async readRssiWait(handle: Handle) {\n    const cmd: any = Buffer.alloc(6);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_RSSI_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x02, 3);\n\n    // data\n    cmd.writeUInt16LE(handle, 4); // handle\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_RSSI_CMD, [handle & 0xff, (handle >> 8) & 0xff]);\n    this.debug(\"read rssi - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n    if (handle !== data.result.readUInt16LE(0)) {\n      throw new Error(\"handle is different\");\n    }\n    const rssi: any = data.result.readInt8(2);\n\n    this.debug(\"\\t\\t\\thandle = \" + handle);\n    this.debug(\"\\t\\t\\trssi = \" + rssi);\n\n    return rssi;\n  }\n\n  public async setAdvertisingParametersWait() {\n    const cmd: any = Buffer.alloc(19);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISING_PARAMETERS_CMD, 1);\n\n    // length\n    cmd.writeUInt8(15, 3);\n\n    const advertisementInterval: any = Math.floor(\n      (process.env.BLENO_ADVERTISING_INTERVAL ? parseFloat(process.env.BLENO_ADVERTISING_INTERVAL) : 100) * 1.6,\n    );\n\n    // data\n    cmd.writeUInt16LE(advertisementInterval, 4); // min interval\n    cmd.writeUInt16LE(advertisementInterval, 6); // max interval\n    cmd.writeUInt8(0x00, 8); // adv type\n    cmd.writeUInt8(0x00, 9); // own addr typ\n    cmd.writeUInt8(0x00, 10); // direct addr type\n    Buffer.from(\"000000000000\", \"hex\").copy(cmd, 11); // direct addr\n    cmd.writeUInt8(0x07, 17);\n    cmd.writeUInt8(0x00, 18);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISING_PARAMETERS_CMD);\n    this.debug(\"set advertisement parameters - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n\n    // this.emit(\"stateChange\", \"poweredOn\"); // TODO : really need?\n    return data.status;\n  }\n\n  public async setAdvertisingDataWait(data: any) {\n    const cmd: any = Buffer.alloc(36);\n\n    cmd.fill(0x00);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISING_DATA_CMD, 1);\n\n    // length\n    cmd.writeUInt8(32, 3);\n\n    // data\n    cmd.writeUInt8(data.length, 4);\n    data.copy(cmd, 5);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISING_DATA_CMD);\n\n    this.debug(\"set advertisement data - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const result = await p;\n\n    return result.status;\n  }\n\n  public async setScanResponseDataWait(data: any) {\n    const cmd: any = Buffer.alloc(36);\n\n    cmd.fill(0x00);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_SCAN_RESPONSE_DATA_CMD, 1);\n\n    // length\n    cmd.writeUInt8(32, 3);\n\n    // data\n    cmd.writeUInt8(data.length, 4);\n    data.copy(cmd, 5);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_SCAN_RESPONSE_DATA_CMD);\n    this.debug(\"set scan response data - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const result = await p;\n\n    return result.status;\n  }\n\n  public async setAdvertiseEnableWait(enabled: any) {\n    const cmd: any = Buffer.alloc(5);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_SET_ADVERTISE_ENABLE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x01, 3);\n\n    // data\n    cmd.writeUInt8(enabled ? 0x01 : 0x00, 4); // enable: 0 -> disabled, 1 -> enabled\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_SET_ADVERTISE_ENABLE_CMD);\n    this.debug(\"set advertise enable - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public async leReadBufferSizeWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_READ_BUFFER_SIZE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_READ_BUFFER_SIZE_CMD);\n    this.debug(\"le read buffer size - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n\n    const data = await p;\n    if (!data.status) {\n      await this.processLeReadBufferSizeWait(data.result);\n    }\n  }\n\n  public async readBufferSizeWait() {\n    const cmd: any = Buffer.alloc(4);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.READ_BUFFER_SIZE_CMD, 1);\n\n    // length\n    cmd.writeUInt8(0x0, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.READ_BUFFER_SIZE_CMD);\n    this.debug(\"read buffer size - writing: \" + cmd.toString(\"hex\"));\n    this._socket.write(cmd);\n    const data = await p;\n    if (!data.status) {\n      const aclMtu: any = data.result.readUInt16LE(0);\n      const aclMaxInProgress: any = data.result.readUInt16LE(3);\n      // sanity\n      if (aclMtu && aclMaxInProgress) {\n        this.debug(\"br/edr acl mtu = \" + aclMtu);\n        this.debug(\"br/edr acl max pkts = \" + aclMaxInProgress);\n        this._aclMtu = aclMtu;\n        this._aclMaxInProgress = aclMaxInProgress;\n        return { aclMtu, aclMaxInProgress };\n      }\n    }\n    return null;\n  }\n\n  public queueAclDataPkt(handle: Handle, cid: any, data: any) {\n    let hf: any = handle | (COMMANDS.ACL_START_NO_FLUSH << 12);\n    // l2cap pdu may be fragmented on hci level\n    let l2capPdu: any = Buffer.alloc(4 + data.length);\n    l2capPdu.writeUInt16LE(data.length, 0);\n    l2capPdu.writeUInt16LE(cid, 2);\n    data.copy(l2capPdu, 4);\n    let fragId: any = 0;\n\n    while (l2capPdu.length) {\n      const frag: any = l2capPdu.slice(0, this._aclMtu);\n      l2capPdu = l2capPdu.slice(frag.length);\n      const pkt: any = Buffer.alloc(5 + frag.length);\n\n      // hci header\n      pkt.writeUInt8(COMMANDS.HCI_ACLDATA_PKT, 0);\n      pkt.writeUInt16LE(hf, 1);\n      hf |= COMMANDS.ACL_CONT << 12;\n      pkt.writeUInt16LE(frag.length, 3); // hci pdu length\n\n      frag.copy(pkt, 5);\n\n      this._aclOutQueue.push({\n        handle,\n        pkt,\n        fragId: fragId++,\n      });\n    }\n\n    this.pushAclOutQueue();\n  }\n\n  public pushAclOutQueue() {\n    this.debug(\"pushAclOutQueue\");\n    let inProgress: any = 0;\n    for (const handle in this._handleAclsInProgress) {\n      inProgress += this._handleAclsInProgress[handle];\n    }\n    this.debug(inProgress, this._aclMaxInProgress, this._aclOutQueue.length);\n    while (inProgress < this._aclMaxInProgress && this._aclOutQueue.length) {\n      inProgress++;\n      this.writeOneAclDataPkt();\n    }\n\n    if (inProgress >= this._aclMaxInProgress && this._aclOutQueue.length) {\n      this.debug(\"acl out queue congested\");\n      this.debug(\"\\tin progress = \" + inProgress);\n      this.debug(\"\\twaiting = \" + this._aclOutQueue.length);\n    }\n  }\n\n  public writeOneAclDataPkt() {\n    this.debug(\"writeOneAclDataPkt\");\n    const pkt: any = this._aclOutQueue.shift();\n    this._handleAclsInProgress[pkt.handle]++;\n    this.debug(\n      \"write acl data pkt frag \" + pkt.fragId + \" handle \" + pkt.handle + \" - writing: \" + pkt.pkt.toString(\"hex\"),\n    );\n    this._socket.write(pkt.pkt);\n  }\n\n  public writeAclDataPkt(handle: Handle, cid: any, data: any) {\n    const pkt: any = Buffer.alloc(9 + data.length);\n\n    // header\n    pkt.writeUInt8(COMMANDS.HCI_ACLDATA_PKT, 0);\n    pkt.writeUInt16LE(handle | (COMMANDS.ACL_START_NO_FLUSH << 12), 1);\n    pkt.writeUInt16LE(data.length + 4, 3); // data length 1  for acl data on HCI\n    pkt.writeUInt16LE(data.length, 5); // data length 2  for l2cap\n    pkt.writeUInt16LE(cid, 7);\n\n    data.copy(pkt, 9);\n\n    this.debug(\"write acl data pkt - writing: \" + pkt.toString(\"hex\"));\n    this._socket.write(pkt);\n  }\n\n  public async longTermKeyRequestNegativeReply(handle: Handle) {\n    throw new Error(\"TODO: no checked\");\n\n    const cmd: any = Buffer.alloc(5);\n\n    // header\n    cmd.writeUInt8(COMMANDS.HCI_COMMAND_PKT, 0);\n    cmd.writeUInt16LE(COMMANDS.LE_LTK_NEG_REPLY_CMD, 1);\n\n    // length\n    cmd.writeUInt16LE(handle, 3);\n\n    const p = this.readCmdCompleteEventWait(COMMANDS.LE_LTK_NEG_REPLY_CMD);\n    this._socket.write(cmd);\n    const data = await p;\n    return data.status;\n  }\n\n  public processLeMetaEvent(eventType: any, status: any, data: any) {\n    if (eventType === COMMANDS.EVT_LE_ADVERTISING_REPORT) {\n      this.processLeAdvertisingReport(status, data);\n    } else if (eventType === COMMANDS.EVT_LE_CONN_COMPLETE) {\n      this.processLeConnComplete(status, data);\n    } else if (eventType === COMMANDS.EVT_LE_CONN_UPDATE_COMPLETE) {\n      const { handle, interval, latency, supervisionTimeout } = this.processLeConnUpdateComplete(status, data);\n      this.emit(\"leConnUpdateComplete\", status, handle, interval, latency, supervisionTimeout);\n    }\n  }\n\n  public processLeConnComplete(status: any, data: any) {\n    const handle: Handle = data.readUInt16LE(0);\n    const role: any = data.readUInt8(2);\n    const addressType: any = data.readUInt8(3) === 0x01 ? \"random\" : \"public\";\n    const address: any = data\n      .slice(4, 10)\n      .toString(\"hex\")\n      .match(/.{1,2}/g)\n      .reverse()\n      .join(\":\");\n    const interval: any = data.readUInt16LE(10) * 1.25;\n    const latency: any = data.readUInt16LE(12); // TODO: multiplier?\n    const supervisionTimeout: any = data.readUInt16LE(14) * 10;\n    const masterClockAccuracy: any = data.readUInt8(16); // TODO: multiplier?\n\n    this.debug(\"\\t\\t\\thandle = \" + handle);\n    this.debug(\"\\t\\t\\trole = \" + role);\n    this.debug(\"\\t\\t\\taddress type = \" + addressType);\n    this.debug(\"\\t\\t\\taddress = \" + address);\n    this.debug(\"\\t\\t\\tinterval = \" + interval);\n    this.debug(\"\\t\\t\\tlatency = \" + latency);\n    this.debug(\"\\t\\t\\tsupervision timeout = \" + supervisionTimeout);\n    this.debug(\"\\t\\t\\tmaster clock accuracy = \" + masterClockAccuracy);\n\n    this._handleAclsInProgress[handle] = 0;\n\n    if (role === 1) {\n      // only slave, emit\n\n      this.emit(\n        \"leConnComplete\",\n        status,\n        handle,\n        role,\n        addressType,\n        address,\n        interval,\n        latency,\n        supervisionTimeout,\n        masterClockAccuracy,\n      );\n    }\n\n    return {\n      status,\n      handle,\n      role,\n      addressType,\n      address,\n      interval,\n      latency,\n      supervisionTimeout,\n      masterClockAccuracy,\n    };\n  }\n\n  public processLeAdvertisingReport(count: any, data: any) {\n    for (let i = 0; i < count; i++) {\n      const type: any = data.readUInt8(0);\n      const addressType: any = data.readUInt8(1) === 0x01 ? \"random\" : \"public\";\n      const address: any = data\n        .slice(2, 8)\n        .toString(\"hex\")\n        .match(/.{1,2}/g)\n        .reverse()\n        .join(\":\");\n      const eirLength: any = data.readUInt8(8);\n      const eir: any = data.slice(9, eirLength + 9);\n      const rssi: any = data.readInt8(eirLength + 9);\n\n      this.debug(\"\\t\\t\\ttype = \" + type);\n      this.debug(\"\\t\\t\\taddress = \" + address);\n      this.debug(\"\\t\\t\\taddress type = \" + addressType);\n      this.debug(\"\\t\\t\\teir = \" + eir.toString(\"hex\"));\n      this.debug(\"\\t\\t\\trssi = \" + rssi);\n\n      this.emit(\"leAdvertisingReport\", 0, type, address, addressType, eir, rssi);\n\n      data = data.slice(eirLength + 10);\n    }\n  }\n\n  public processCmdStatusEvent(cmd: any, status: any) {\n    if (cmd === COMMANDS.LE_CREATE_CONN_CMD) {\n      if (status !== 0) {\n        this.emit(\"leConnComplete\", status);\n      }\n    }\n  }\n\n  public async processLeReadBufferSizeWait(result: any) {\n    const aclMtu: any = result.readUInt16LE(0);\n    const aclMaxInProgress: any = result.readUInt8(2);\n    if (!aclMtu) {\n      // as per Bluetooth specs\n      this.debug(\"falling back to br/edr buffer size\");\n      await this.readBufferSizeWait();\n    } else {\n      this.debug(\"le acl mtu = \" + aclMtu);\n      this.debug(\"le acl max in progress = \" + aclMaxInProgress);\n      this._aclMtu = aclMtu;\n      this._aclMaxInProgress = aclMaxInProgress;\n    }\n  }\n\n  public stateChange(state: HciState) {\n    this._state = state;\n    this.emit(\"stateChange\", state);\n  }\n\n  public async readAclStreamWait(handle: Handle, cid: number, firstData: number, timeout?: number): Promise<Buffer> {\n    return this._obnizHci.timeoutPromiseWrapper(\n      new Promise((resolve) => {\n        const key = (cid << 8) + firstData;\n        this._aclStreamObservers[handle] = this._aclStreamObservers[handle] || [];\n        this._aclStreamObservers[handle][key] = this._aclStreamObservers[handle][cid] || [];\n        this._aclStreamObservers[handle][key].push(resolve);\n      }),\n      { timeout, waitingFor: `readAclStream handle:${handle} cid:${cid} firstData:${firstData}` },\n    );\n  }\n\n  protected async readLeMetaEventWait(eventType: number, options?: any) {\n    const filter = this.createLeMetaEventFilter(eventType);\n    options = options || {};\n    options.waitingFor = \"LeMetaEvent \" + JSON.stringify(filter);\n    const data = await this._obnizHci.readWait(filter, options);\n\n    const type: any = data.readUInt8(3);\n    const status: any = data.readUInt8(4);\n    const _data: any = data.slice(5);\n    return { type, status, data: _data };\n  }\n\n  protected createLeMetaEventFilter(eventType: number): number[] {\n    return [COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_LE_META_EVENT, -1, eventType];\n  }\n\n  protected async readCmdCompleteEventWait(\n    requestCmd: number,\n    additionalResultFilter?: number[],\n  ): Promise<{ eventType: number; subEventType: number; ncmd: number; cmd: number; status: number; result: Buffer }> {\n    additionalResultFilter = additionalResultFilter || [];\n    let filter = this.createCmdCompleteEventFilter(requestCmd);\n    if (additionalResultFilter.length > 0) {\n      filter = [\n        ...filter,\n        -1, // status\n        ...additionalResultFilter,\n      ];\n    }\n    const options: any = {};\n    options.waitingFor = \"CmdCompleteEvent \" + JSON.stringify(filter);\n    const data = await this._obnizHci.readWait(filter, options);\n\n    const eventType: any = data.readUInt8(0);\n    const subEventType: any = data.readUInt8(1);\n    const ncmd: any = data.readUInt8(3);\n    const cmd: any = data.readUInt16LE(4);\n    const status: any = data.readUInt8(6);\n    const result: any = data.slice(7);\n\n    return { eventType, subEventType, ncmd, cmd, status, result };\n  }\n\n  protected createCmdCompleteEventFilter(cmd: number): number[] {\n    return [COMMANDS.HCI_EVENT_PKT, COMMANDS.EVT_CMD_COMPLETE, -1, -1, (cmd >> 0) & 0xff, (cmd >> 8) & 0xff];\n  }\n\n  private debug(...args: any) {\n    this.debugHandler(`${args[0]}`);\n  }\n\n  private onHciAclData(data: Buffer) {\n    const flags: any = data.readUInt16LE(1) >> 12;\n    const handle: Handle = data.readUInt16LE(1) & 0x0fff;\n\n    if (COMMANDS.ACL_START === flags) {\n      const cid: any = data.readUInt16LE(7);\n\n      const length: any = data.readUInt16LE(5);\n      const pktData: Buffer = data.slice(9);\n\n      this.debug(\"\\t\\tcid = \" + cid);\n\n      if (length === pktData.length) {\n        this.debug(\"\\t\\thandle = \" + handle);\n        this.debug(\"\\t\\tdata = \" + pktData.toString(\"hex\"));\n\n        this.emit(\"aclDataPkt\", handle, cid, pktData);\n        const key = (cid << 8) + pktData.readUInt8(0);\n        if (\n          this._aclStreamObservers[handle] &&\n          this._aclStreamObservers[handle][key] &&\n          this._aclStreamObservers[handle][key].length > 0\n        ) {\n          const resolve = this._aclStreamObservers[handle][key].shift()!;\n          resolve(pktData);\n        }\n      } else {\n        this._handleBuffers[handle] = {\n          length,\n          cid,\n          data: pktData,\n        };\n      }\n    } else if (COMMANDS.ACL_CONT === flags) {\n      if (!this._handleBuffers[handle] || !this._handleBuffers[handle].data) {\n        return;\n      }\n\n      this._handleBuffers[handle].data = Buffer.concat([this._handleBuffers[handle].data, data.slice(5)]);\n\n      if (this._handleBuffers[handle].data.length === this._handleBuffers[handle].length) {\n        this.emit(\"aclDataPkt\", handle, this._handleBuffers[handle].cid, this._handleBuffers[handle].data);\n        const key = (this._handleBuffers[handle].cid << 8) + this._handleBuffers[handle].data.readUInt8(0);\n        if (\n          this._aclStreamObservers[handle] &&\n          this._aclStreamObservers[handle][key] &&\n          this._aclStreamObservers[handle][key].length > 0\n        ) {\n          const resolve = this._aclStreamObservers[handle][key].shift()!;\n          resolve(this._handleBuffers[handle].data);\n        }\n        delete this._handleBuffers[handle];\n      }\n    }\n  }\n\n  private onHciEventData(data: Buffer) {\n    const subEventType: any = data.readUInt8(1);\n\n    this.debug(\"\\tsub event type = 0x\" + subEventType.toString(16));\n\n    if (subEventType === COMMANDS.EVT_DISCONN_COMPLETE) {\n      const handle: Handle = data.readUInt16LE(4);\n      const reason: any = data.readUInt8(6);\n\n      this.debug(\"\\t\\thandle = \" + handle);\n      this.debug(\"\\t\\treason = \" + reason);\n\n      delete this._handleAclsInProgress[handle];\n      const aclOutQueue: any = [];\n      let discarded: any = 0;\n      for (const i in this._aclOutQueue) {\n        if (this._aclOutQueue[i].handle !== handle) {\n          aclOutQueue.push(this._aclOutQueue[i]);\n        } else {\n          discarded++;\n        }\n      }\n      if (discarded) {\n        this.debug(\"\\t\\tacls discarded = \" + discarded);\n      }\n      this._aclOutQueue = aclOutQueue;\n      this.pushAclOutQueue();\n\n      this.emit(\"disconnComplete\", handle, reason);\n    } else if (subEventType === COMMANDS.EVT_ENCRYPT_CHANGE) {\n      const status: any = data.readUInt8(3);\n      const handle: Handle = data.readUInt16LE(4);\n      const encrypt: any = data.readUInt8(6);\n\n      if (status === 0) {\n        this.debug(\"\\t\\thandle = \" + handle);\n        this.debug(\"\\t\\tencrypt = \" + encrypt);\n        this.emit(\"encryptChange\", handle, encrypt);\n      } else {\n        this.debug(\"\\t\\tencrypt status = \" + status);\n        this.debug(\"\\t\\thandle = \" + handle);\n        this.debug(\"\\t\\tencrypt = \" + encrypt);\n        this.emit(\"encryptChange\", handle, encrypt);\n      }\n    } else if (subEventType === COMMANDS.EVT_CMD_COMPLETE) {\n      // command complete event are handle each command send functions;\n    } else if (subEventType === COMMANDS.EVT_CMD_STATUS) {\n      const status: any = data.readUInt8(3);\n      const cmd: any = data.readUInt16LE(5);\n\n      this.debug(\"\\t\\tstatus = \" + status);\n      this.debug(\"\\t\\tcmd = \" + cmd);\n\n      this.processCmdStatusEvent(cmd, status);\n    } else if (subEventType === COMMANDS.EVT_LE_META_EVENT) {\n      const leMetaEventType: any = data.readUInt8(3);\n      const leMetaEventStatus: any = data.readUInt8(4);\n      const leMetaEventData: any = data.slice(5);\n\n      this.debug(\"\\t\\tLE meta event type = \" + leMetaEventType);\n      this.debug(\"\\t\\tLE meta event status = \" + leMetaEventStatus);\n      this.debug(\"\\t\\tLE meta event data = \" + leMetaEventData.toString(\"hex\"));\n\n      this.processLeMetaEvent(leMetaEventType, leMetaEventStatus, leMetaEventData);\n    } else if (subEventType === COMMANDS.EVT_NUMBER_OF_COMPLETED_PACKETS) {\n      const handles: any = data.readUInt8(3);\n      for (let i = 0; i < handles; i++) {\n        const handle: Handle = data.readUInt16LE(4 + i * 4);\n        const pkts: any = data.readUInt16LE(6 + i * 4);\n        this.debug(\"\\thandle = \" + handle);\n        this.debug(\"\\t\\tcompleted = \" + pkts);\n        if (this._handleAclsInProgress[handle] === undefined) {\n          this.debug(\"\\t\\talready closed\");\n          continue;\n        }\n        if (pkts > this._handleAclsInProgress[handle]) {\n          // Linux kernel may send acl packets by itself, so be ready for underflow\n          this._handleAclsInProgress[handle] = 0;\n        } else {\n          this._handleAclsInProgress[handle] -= pkts;\n        }\n        this.debug(\"\\t\\tin progress = \" + this._handleAclsInProgress[handle]);\n      }\n      this.pushAclOutQueue();\n    }\n  }\n\n  private onSocketData(array: any) {\n    const data: any = Buffer.from(array);\n    this.debug(\"onSocketData: \" + data.toString(\"hex\"));\n\n    const eventType: any = data.readUInt8(0);\n\n    this.debug(\"\\tevent type = 0x\" + eventType.toString(16));\n\n    if (COMMANDS.HCI_EVENT_PKT === eventType) {\n      this.onHciEventData(data);\n    } else if (COMMANDS.HCI_ACLDATA_PKT === eventType) {\n      this.onHciAclData(data);\n    }\n  }\n}\n\nHci.STATUS_MAPPER = STATUS_MAPPER;\nexport default Hci;\n"]}