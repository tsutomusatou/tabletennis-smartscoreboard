{"version":3,"sources":["../src/obniz/libs/embeds/bleHci/bleRemoteService.ts"],"names":[],"mappings":"AAKA,OAAO,0BAA0B,MAAM,8BAA8B,CAAC;AACtE,OAAO,uBAAuB,MAAM,2BAA2B,CAAC;AAChE,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAElC;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,gBAAiB,SAAQ,0BAA0B,CAAC,mBAAmB,EAAE,uBAAuB,CAAC;IACpH;;OAEG;IACI,UAAU,EAAG,mBAAmB,CAAC;gBAE5B,GAAG,EAAE,GAAG;IAIpB;;OAEG;IACH,IAAI,UAAU,IAAI,MAAM,GAAG,IAAI,CAE9B;IAED;;OAEG;IACH,IAAI,aAAa,IAAI,GAAG,CAEvB;IAED;;OAEG;IACH,IAAI,YAAY,IAAI,MAAM,GAAG,IAAI,CAEhC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACH,IAAI,eAAe,IAAI,uBAAuB,EAAE,CAE/C;IAED;;;OAGG;IACI,iBAAiB,CAAC,KAAK,EAAE;QAAE,IAAI,EAAE,IAAI,CAAA;KAAE,GAAG,uBAAuB;IAIxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6BG;IACI,iBAAiB,CAAC,IAAI,EAAE,IAAI,GAAG,uBAAuB,GAAG,IAAI;IAIpE;;OAEG;IACI,0BAA0B;IAIjC;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACU,8BAA8B,IAAI,OAAO,CAAC,uBAAuB,EAAE,CAAC;IAsBjF;;;OAGG;IACI,UAAU,CAAC,cAAc,EAAE,GAAG;IAIrC;;;OAGG;IACI,kBAAkB,CAAC,eAAe,EAAE,GAAG;IAI9C;;;OAGG;IACI,wBAAwB,CAAC,cAAc,EAAE,GAAG;IAEnD;;;OAGG;IACI,gCAAgC,CAAC,eAAe,EAAE,GAAG,EAAE;IAE9D;;OAEG;IACU,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAI1C;;OAEG;IACU,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC;CAG3C","file":"bleRemoteService.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components.Ble.Hci\n */\nimport BleHelper from \"./bleHelper\";\nimport BleRemoteAttributeAbstract from \"./bleRemoteAttributeAbstract\";\nimport BleRemoteCharacteristic from \"./bleRemoteCharacteristic\";\nimport BleRemotePeripheral from \"./bleRemotePeripheral\";\nimport { UUID } from \"./bleTypes\";\n\n/**\n * @category Use as Central\n */\nexport default class BleRemoteService extends BleRemoteAttributeAbstract<BleRemotePeripheral, BleRemoteCharacteristic> {\n  /**\n   * Peripheral instance\n   */\n  public peripheral!: BleRemotePeripheral;\n\n  constructor(obj: any) {\n    super(obj);\n  }\n\n  /**\n   * @ignore\n   */\n  get parentName(): string | null {\n    return \"peripheral\";\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenClass(): any {\n    return BleRemoteCharacteristic;\n  }\n\n  /**\n   * @ignore\n   */\n  get childrenName(): string | null {\n    return \"characteristics\";\n  }\n\n  /**\n   * It contains characteristics in a service.\n   * It was discovered when connection automatically.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *     uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   *  if(!peripheral) {\n   *     console.log('no such peripheral')\n   *     return;\n   * }\n   * try {\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   var service = peripheral.getService(\"1800\")\n   *   for (var c of service.characteristics) {\n   *     console.log(c.uuid)\n   *   }\n   * } catch(e) {\n   *   console.error(e);\n   * }\n   * ```\n   */\n  get characteristics(): BleRemoteCharacteristic[] {\n    return this.children;\n  }\n\n  /**\n   * @ignore\n   * @param param\n   */\n  public addCharacteristic(param: { uuid: UUID } | BleRemoteCharacteristic) {\n    return this.addChild(param);\n  }\n\n  /**\n   * It returns a characteristic which having specified uuid in a service.\n   * Return value is null when not matched.\n   *\n   * Case is ignored. So aa00 and AA00 are the same.\n   *\n   * ```javascript\n   * // Javascript Example\n   *\n   * await obniz.ble.initWait();\n   * var target = {\n   *   uuids: [\"fff0\"],\n   * };\n   * var peripheral = await obniz.ble.scan.startOneWait(target);\n   * if(!peripheral) {\n   *    console.log('no such peripheral')\n   *     return;\n   * }\n   * try {\n   *   await peripheral.connectWait();\n   *   console.log(\"connected\");\n   *   var service = peripheral.getService(\"1800\")\n   *   var c = service.getCharacteristic(\"fff0\")\n   *   console.log(c.uuid)\n   * } catch(e) {\n   *   console.error(e);\n   * }\n   * ```\n   * @param uuid\n   */\n  public getCharacteristic(uuid: UUID): BleRemoteCharacteristic | null {\n    return this.getChild(uuid);\n  }\n\n  /**\n   * @ignore\n   */\n  public discoverAllCharacteristics() {\n    this.discoverAllCharacteristicsWait(); // background\n  }\n\n  /**\n   * Discover services.\n   *\n   * If connect setting param 'autoDiscovery' is true(default),\n   * services are automatically disvocer on connection established.\n   *\n   *\n   * ```javascript\n   * // Javascript Example\n   * await obniz.ble.initWait({});\n   * obniz.ble.scan.onfind = function(peripheral){\n   * if(peripheral.localName == \"my peripheral\"){\n   *      peripheral.onconnect = async function(){\n   *          console.log(\"success\");\n   *          await peripheral.discoverAllServicesWait(); //manually discover\n   *          let service = peripheral.getService(\"1800\");\n   *          await service.discoverAllCharacteristicsWait(); //manually discover\n   *          let characteristics = service.getCharacteristic(\"ff00\")\n   *      }\n   *      peripheral.connect({autoDiscovery:false});\n   *     }\n   * }\n   * await obniz.ble.scan.startWait();\n   * ```\n   */\n  public async discoverAllCharacteristicsWait(): Promise<BleRemoteCharacteristic[]> {\n    const chars = await this.parent!.obnizBle.centralBindings.discoverCharacteristicsWait(\n      this.peripheral.address,\n      this.uuid,\n    );\n\n    for (const char of chars) {\n      const uuid = char.uuid;\n      const properties = char.properties.map((e: any) => BleHelper.toSnakeCase(e));\n      let child: any = this.getChild(uuid);\n      if (!child) {\n        child = this.addChild({ uuid });\n      }\n      child.discoverdOnRemote = true;\n      child.properties = properties || [];\n      this.ondiscover(child);\n    }\n    return this.characteristics.filter((elm: any) => {\n      return elm.discoverdOnRemote;\n    });\n  }\n\n  /**\n   * @ignore\n   * @param characteristic\n   */\n  public ondiscover(characteristic: any) {\n    this._runUserCreatedFunction(this.ondiscovercharacteristic, characteristic);\n  }\n\n  /**\n   * @ignore\n   * @param characteristics\n   */\n  public ondiscoverfinished(characteristics: any) {\n    this._runUserCreatedFunction(this.ondiscovercharacteristicfinished, characteristics);\n  }\n\n  /**\n   * @ignore\n   * @param characteristic\n   */\n  public ondiscovercharacteristic(characteristic: any) {}\n\n  /**\n   * @ignore\n   * @param characteristics\n   */\n  public ondiscovercharacteristicfinished(characteristics: any[]) {}\n\n  /**\n   * @ignore\n   */\n  public async readWait(): Promise<number[]> {\n    throw new Error(\"cannot read service\");\n  }\n\n  /**\n   * @ignore\n   */\n  public async writeWait(): Promise<boolean> {\n    throw new Error(\"cannot write service\");\n  }\n}\n"]}