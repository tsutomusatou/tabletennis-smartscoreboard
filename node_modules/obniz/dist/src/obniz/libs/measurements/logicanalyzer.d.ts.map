{"version":3,"sources":["../src/obniz/libs/measurements/logicanalyzer.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAGxD,MAAM,WAAW,oBAAoB;IACnC;;OAEG;IACH,EAAE,EAAE,MAAM,CAAC;IAEX;;OAEG;IACH,QAAQ,EAAE,MAAM,CAAC;IAEjB;;OAEG;IACH,QAAQ,EAAE,MAAM,CAAC;CAClB;AAED;;;;;;;GAOG;AACH,MAAM,WAAW,uBAAwB,SAAQ,oBAAoB;IACnE;;OAEG;IACH,YAAY,EAAE,OAAO,CAAC;IAEtB;;OAEG;IACH,mBAAmB,EAAE,MAAM,CAAC;CAC7B;AAED;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,iBAAiB;IAC1D;;;;;;;;;;;;;;OAcG;IACI,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC;IAC9C,OAAO,CAAC,QAAQ,CAAC,CAAW;IAC5B,OAAO,CAAC,MAAM,CAAM;gBAER,KAAK,EAAE,KAAK;IAgBxB;;;OAGG;IACI,MAAM;IAIb;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACI,KAAK,CAAC,MAAM,EAAE,oBAAoB,GAAG,uBAAuB;IAwBnE;;;;;;;;OAQG;IACI,GAAG;IAOH,cAAc,IAAI,MAAM;CAGhC","file":"logicanalyzer.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport ObnizUtil from \"../utils/util\";\n\nexport interface LogicAnalyzerOptions {\n  /**\n   * target pin no\n   */\n  io: number;\n\n  /**\n   * a period(second) to read io value. (ms)\n   */\n  interval: number;\n\n  /**\n   * how long the logicAnalyzer will collect the data.\n   */\n  duration: number;\n}\n\n/**\n * The default trigger is \"value change\", but it tends to be interrupted by some noise.\n * Configure triggerValue/triggerValueSamples to filter it.\n *\n * This trigger setting means \"trigger when true/(or false) continues for more than X times after io change\"\n *\n * ![](media://logiana_1.png)\n */\nexport interface LogicAnalyzerOptionsExt extends LogicAnalyzerOptions {\n  /**\n   * desired start value. true/false\n   */\n  triggerValue: boolean;\n\n  /**\n   * after how many samples will the recording start.\n   */\n  triggerValueSamples: number;\n}\n\n/**\n * LogicAnalyzer records samples read from io periodically.\n * This is useful for digital bus signal check.\n *\n * Only one LogicAnalyzer can be used per obniz Board.\n *\n * ### How it works\n * LogicAnalyzer starts logging by a trigger.\n * The default trigger is \"value change\".\n *\n * When it occurs, data will be recorded for a desired duration.\n * After that is done, LogicAnalyzer starts monitoring changes in io (= continue working).\n * One sample becomes one 1/0.\n *\n * ![](media://logiana_0.png)\n *\n * Sampling interval and duration can be configured.\n * For example, if interval is 1 ms and duration is 800ms, you will get 800 arrays of data.\n * The data will be in multiples of 8.\n *\n * @category Measurement\n */\nexport default class LogicAnalyzer extends ComponentAbstract {\n  /**\n   * This is a callback function that will be called when data arrives.\n   *\n   * The received data is in 0/1 array.\n   * And every data represents 0,1 of io in a particular instance.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.logicAnalyzer.start({io:0, interval:2, duration:1000});  // start on io0. 1ms interval and 1sec long.\n   *\n   * obniz.logicAnalyzer.onmeasured = function(array) {\n   *   console.log(array);\n   * }\n   * ```\n   */\n  public onmeasured?: (array: number[]) => void;\n  private measured?: number[];\n  private params: any;\n\n  constructor(obniz: Obniz) {\n    super(obniz);\n\n    this.on(\"/response/logicAnalyzer/data\", (obj) => {\n      if (this.onmeasured) {\n        this.Obniz._runUserCreatedFunction(this.onmeasured, obj.data);\n      } else {\n        if (!this.measured) {\n          this.measured = [];\n        }\n        this.measured.push(obj.data);\n      }\n    });\n    this._reset();\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _reset() {\n    this.onmeasured = undefined;\n  }\n\n  /**\n   * This starts the logic analyzer on a given io.\n   *\n   * For example, if you want to collect the data after io0 changes every 2ms for 1sec long, set as below.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.logicAnalyzer.start({io:0, interval:2, duration:1000});  // start on io0. 2ms interval and 1sec long.\n   * obniz.logicAnalyzer.onmeasured = function(array) {\n   *   console.log(array);\n   * }\n   * ```\n   *\n   * The trigger is an optional configuration.\n   *\n   * Without this, logicAnalyzer recognizes any io level change as trigger and start. Trigger specifies the start position.\n   * Value means start value, true/false. Samples means how much that value consists.\n   * So, with the below sample code, you will only receive data that start with \"0, 0, 0\"\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.logicAnalyzer.start({io:0, interval:2, duration:1000, triggerValue:false, triggerValueSamples:3});  // start on io0. 2ms interval and 1sec long.\n   * obniz.logicAnalyzer.onmeasured = function(array) {\n   *   console.log(array);\n   * }\n   * ```\n   * @param params\n   */\n  public start(params: LogicAnalyzerOptions | LogicAnalyzerOptionsExt) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\", \"interval\", \"duration\"]);\n    if (err) {\n      throw new Error(\"LogicAnalyzer start param '\" + err + \"' required, but not found \");\n    }\n    this.params = ObnizUtil._keyFilter(params, [\"io\", \"interval\", \"duration\", \"triggerValue\", \"triggerValueSamples\"]);\n\n    const obj: any = {};\n    obj.logic_analyzer = {\n      io: [this.params.io],\n      interval: this.params.interval,\n      duration: this.params.duration,\n    };\n    if (this.params.triggerValueSamples > 0) {\n      obj.logic_analyzer.trigger = {\n        value: !!this.params.triggerValue,\n        samples: this.params.triggerValueSamples,\n      };\n    }\n\n    this.Obniz.send(obj);\n    return;\n  }\n\n  /**\n   * This stops the logicAnalyzer.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.logicAnalyzer.start({io:0, interval:2, duration:1000});  // start on io0. 1ms interval and 1sec long.\n   * obniz.logicAnalyzer.end();\n   * ```\n   */\n  public end() {\n    const obj: any = {};\n    obj.logic_analyzer = null;\n    this.Obniz.send(obj);\n    return;\n  }\n\n  public schemaBasePath(): string {\n    return \"logic_analyzer\";\n  }\n}\n"]}