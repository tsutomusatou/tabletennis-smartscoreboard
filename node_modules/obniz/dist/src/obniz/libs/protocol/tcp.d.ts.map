{"version":3,"sources":["../src/obniz/libs/protocol/tcp.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAGH,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;;GAGG;AACH,aAAK,0BAA0B,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,IAAI,CAAC;AAE3D;;;;GAIG;AACH,aAAK,6BAA6B,GAAG,CAAC,SAAS,EAAE,OAAO,KAAK,IAAI,CAAC;AAElE;;;;GAIG;AACH,aAAK,wBAAwB,GAAG,CAAC,KAAK,EAAE,GAAG,KAAK,IAAI,CAAC;AAErD;;;;GAIG;AACH,MAAM,CAAC,OAAO,OAAO,GAAI,SAAQ,iBAAiB;IAChD;;;;;;;;;;;;OAYG;IACI,YAAY,CAAC,EAAE,6BAA6B,CAAC;IAEpD;;;;;;;;;;;;;OAaG;IACI,SAAS,CAAC,EAAE,0BAA0B,CAAC;IAE9C;;;;;;;;;;;;OAYG;IACI,OAAO,CAAC,EAAE,wBAAwB,CAAC;IAC1C,OAAO,CAAC,EAAE,CAAS;IACnB,OAAO,CAAC,gBAAgB,CAAM;IAC9B,OAAO,CAAC,aAAa,CAAgC;IACrD,OAAO,CAAC,IAAI,CAAW;gBAEX,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAiCpC;;;;;;;;;;;OAWG;IACI,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAgC/D;;;;;;;;;;;;;;;;;OAiBG;IACI,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM,EAAE,GAAG,MAAM,GAAG,MAAM;IA6BtD;;;;;;;;;;;OAWG;IACI,QAAQ,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IASpC;;;;;;;;OAQG;IACI,GAAG;IAIV;;OAEG;IACI,MAAM;IAIN,cAAc,IAAI,MAAM;IAI/B;;;OAGG;IACH,SAAS,CAAC,MAAM;IAMhB,OAAO,CAAC,KAAK;IAWb,OAAO,CAAC,mBAAmB;IAM3B,OAAO,CAAC,gBAAgB;CAKzB","file":"tcp.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport semver from \"semver\";\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\n\n/**\n * @param TCPReceiveCallbackFunction.data\n * received data\n */\ntype TCPReceiveCallbackFunction = (data: number[]) => void;\n\n/**\n * @param TCPConnectionCallbackFunction.connected\n * - True : Connect\n * - False : Disconnect\n */\ntype TCPConnectionCallbackFunction = (connected: boolean) => void;\n\n/**\n *\n * @param TCPErrorCallbackFunction.error\n * Error object\n */\ntype TCPErrorCallbackFunction = (error: any) => void;\n\n/**\n * Create a TCP connection from a device throught the network the device is currently connected to.\n *\n * @category Protocol\n */\nexport default class Tcp extends ComponentAbstract {\n  /**\n   * Callback function is called when there is a change in TCP connection status.\n   *\n   * ```\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   *\n   * tcp.onconnection = data => {\n   *  console.log(data);\n   * };\n   * tcp.connectWait(80,\"obniz.io\");\n   * ```\n   */\n  public onconnection?: TCPConnectionCallbackFunction;\n\n  /**\n   * Callback function is called when TCP is received.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * tcp.onreceive = data => {\n   *   console.log(data);\n   * };\n   * ```\n   *\n   */\n  public onreceive?: TCPReceiveCallbackFunction;\n\n  /**\n   * You can get the error message that occurred when connecting.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * tcp.onerror = state => {\n   *   console.log(state);\n   * };\n   * ```\n   */\n  public onerror?: TCPErrorCallbackFunction;\n  private id: number;\n  private connectObservers: any;\n  private readObservers!: TCPReceiveCallbackFunction[];\n  private used!: boolean;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n\n    this.on(\"/response/tcp/connection\", (obj) => {\n      /* Connectino state update. response of connect(), close from destination, response from */\n      this.Obniz._runUserCreatedFunction(this.onconnection, obj.connection.connected);\n      if (!obj.connection.connected) {\n        this._reset();\n      }\n    });\n    this.on(\"/response/tcp/read\", (obj) => {\n      this.Obniz._runUserCreatedFunction(this.onreceive, obj.read.data);\n      const callback: any = this.readObservers.shift();\n      if (callback) {\n        callback(obj.read.data);\n      }\n    });\n    this.on(\"/response/tcp/connect\", (obj) => {\n      /* response of connect() */\n      /* `this.connection` will called before this function */\n      if (obj.connect.code !== 0) {\n        this.Obniz._runUserCreatedFunction(this.onerror, obj.connect);\n      }\n      const callback: any = this.connectObservers.shift();\n      if (callback) {\n        callback(obj.connect.code);\n      }\n    });\n\n    this._reset();\n  }\n\n  /**\n   * Starts a connection on the port and domain for which TCP is specified.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   * ```\n   *\n   * @param port\n   * @param domain\n   */\n  public connectWait(port: number, domain: string): Promise<void> {\n    if (semver.lt(this.Obniz.firmware_ver!, \"2.1.0\")) {\n      throw new Error(`Please update obniz firmware >= 2.1.0`);\n    }\n\n    // TODO\n    // if (this.used) {\n    //   throw new Error(`tcp${this.id} is in used`);\n    // }\n\n    if (port < 0 || port > 65535) {\n      throw new Error(`tcp${this.id} is invalid port`);\n    }\n    if (domain.length > 30) {\n      throw new Error(`tcp${this.id} is domain length over`);\n    }\n\n    this.connectObservers = [];\n    this.used = true;\n    return new Promise((resolve: any, reject: any) => {\n      this._addConnectObserver(resolve);\n      const obj: any = {};\n      obj[\"tcp\" + this.id] = {\n        connect: {\n          port,\n          domain,\n        },\n      };\n      this.Obniz.send(obj);\n    });\n  }\n\n  /**\n   * The argument data is sent by TCP.\n   *\n   * If you pass a string or Array type argument, the data will be sent.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * // Array\n   * tcp.write([0,1,2,3,4]);\n   *\n   * // Text\n   * tcp.write('hello');\n   * ```\n   * @param data\n   */\n  public write(data: number | number[] | Buffer | string) {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    if (data === undefined) {\n      return;\n    }\n    if (typeof data === \"number\") {\n      data = [data];\n    }\n\n    let send_data: any = null;\n    if (this.Obniz.isNode && data instanceof Buffer) {\n      send_data = [...data];\n    } else if (data.constructor === Array) {\n      send_data = data;\n    } else if (typeof data === \"string\") {\n      const buf: any = Buffer.from(data);\n      send_data = [...buf];\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      write: {\n        data: send_data,\n      },\n    };\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * Wait for TCP reception.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * let data = await tcp.readWait();\n   * console.log(data);\n   * ```\n   */\n  public readWait(): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    return new Promise((resolve: any, reject: any) => {\n      this._addReadObserver(resolve);\n    });\n  }\n\n  /**\n   * Terminates the TCP session.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.end();\n   * ```\n   */\n  public end() {\n    this.close();\n  }\n\n  /**\n   * @ignore\n   */\n  public isUsed() {\n    return this.used;\n  }\n\n  public schemaBasePath(): string {\n    return \"tcp\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.connectObservers = [];\n    this.readObservers = [];\n    this.used = false;\n  }\n\n  private close() {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not used`);\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      disconnect: true,\n    };\n    this.Obniz.send(obj);\n  }\n\n  private _addConnectObserver(callback: any) {\n    if (callback) {\n      this.connectObservers.push(callback);\n    }\n  }\n\n  private _addReadObserver(callback: TCPReceiveCallbackFunction) {\n    if (callback) {\n      this.readObservers.push(callback);\n    }\n  }\n}\n"]}