{"version":3,"sources":["../src/obniz/libs/protocol/tcp.ts"],"names":[],"mappings":"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","file":"tcp.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport semver from \"semver\";\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\n\n/**\n * @param TCPReceiveCallbackFunction.data\n * received data\n */\ntype TCPReceiveCallbackFunction = (data: number[]) => void;\n\n/**\n * @param TCPConnectionCallbackFunction.connected\n * - True : Connect\n * - False : Disconnect\n */\ntype TCPConnectionCallbackFunction = (connected: boolean) => void;\n\n/**\n *\n * @param TCPErrorCallbackFunction.error\n * Error object\n */\ntype TCPErrorCallbackFunction = (error: any) => void;\n\n/**\n * Create a TCP connection from a device throught the network the device is currently connected to.\n *\n * @category Protocol\n */\nexport default class Tcp extends ComponentAbstract {\n  /**\n   * Callback function is called when there is a change in TCP connection status.\n   *\n   * ```\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   *\n   * tcp.onconnection = data => {\n   *  console.log(data);\n   * };\n   * tcp.connectWait(80,\"obniz.io\");\n   * ```\n   */\n  public onconnection?: TCPConnectionCallbackFunction;\n\n  /**\n   * Callback function is called when TCP is received.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * tcp.onreceive = data => {\n   *   console.log(data);\n   * };\n   * ```\n   *\n   */\n  public onreceive?: TCPReceiveCallbackFunction;\n\n  /**\n   * You can get the error message that occurred when connecting.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * tcp.onerror = state => {\n   *   console.log(state);\n   * };\n   * ```\n   */\n  public onerror?: TCPErrorCallbackFunction;\n  private id: number;\n  private connectObservers: any;\n  private readObservers!: TCPReceiveCallbackFunction[];\n  private used!: boolean;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n\n    this.on(\"/response/tcp/connection\", (obj) => {\n      /* Connectino state update. response of connect(), close from destination, response from */\n      this.Obniz._runUserCreatedFunction(this.onconnection, obj.connection.connected);\n      if (!obj.connection.connected) {\n        this._reset();\n      }\n    });\n    this.on(\"/response/tcp/read\", (obj) => {\n      this.Obniz._runUserCreatedFunction(this.onreceive, obj.read.data);\n      const callback: any = this.readObservers.shift();\n      if (callback) {\n        callback(obj.read.data);\n      }\n    });\n    this.on(\"/response/tcp/connect\", (obj) => {\n      /* response of connect() */\n      /* `this.connection` will called before this function */\n      if (obj.connect.code !== 0) {\n        this.Obniz._runUserCreatedFunction(this.onerror, obj.connect);\n      }\n      const callback: any = this.connectObservers.shift();\n      if (callback) {\n        callback(obj.connect.code);\n      }\n    });\n\n    this._reset();\n  }\n\n  /**\n   * Starts a connection on the port and domain for which TCP is specified.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   * ```\n   *\n   * @param port\n   * @param domain\n   */\n  public connectWait(port: number, domain: string): Promise<void> {\n    if (semver.lt(this.Obniz.firmware_ver!, \"2.1.0\")) {\n      throw new Error(`Please update obniz firmware >= 2.1.0`);\n    }\n\n    // TODO\n    // if (this.used) {\n    //   throw new Error(`tcp${this.id} is in used`);\n    // }\n\n    if (port < 0 || port > 65535) {\n      throw new Error(`tcp${this.id} is invalid port`);\n    }\n    if (domain.length > 30) {\n      throw new Error(`tcp${this.id} is domain length over`);\n    }\n\n    this.connectObservers = [];\n    this.used = true;\n    return new Promise((resolve: any, reject: any) => {\n      this._addConnectObserver(resolve);\n      const obj: any = {};\n      obj[\"tcp\" + this.id] = {\n        connect: {\n          port,\n          domain,\n        },\n      };\n      this.Obniz.send(obj);\n    });\n  }\n\n  /**\n   * The argument data is sent by TCP.\n   *\n   * If you pass a string or Array type argument, the data will be sent.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * // Array\n   * tcp.write([0,1,2,3,4]);\n   *\n   * // Text\n   * tcp.write('hello');\n   * ```\n   * @param data\n   */\n  public write(data: number | number[] | Buffer | string) {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    if (data === undefined) {\n      return;\n    }\n    if (typeof data === \"number\") {\n      data = [data];\n    }\n\n    let send_data: any = null;\n    if (this.Obniz.isNode && data instanceof Buffer) {\n      send_data = [...data];\n    } else if (data.constructor === Array) {\n      send_data = data;\n    } else if (typeof data === \"string\") {\n      const buf: any = Buffer.from(data);\n      send_data = [...buf];\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      write: {\n        data: send_data,\n      },\n    };\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * Wait for TCP reception.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.connectWait(80,\"obniz.io\");\n   *\n   * let data = await tcp.readWait();\n   * console.log(data);\n   * ```\n   */\n  public readWait(): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not started`);\n    }\n    return new Promise((resolve: any, reject: any) => {\n      this._addReadObserver(resolve);\n    });\n  }\n\n  /**\n   * Terminates the TCP session.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var tcp = obniz.getFreeTcp();\n   * tcp.end();\n   * ```\n   */\n  public end() {\n    this.close();\n  }\n\n  /**\n   * @ignore\n   */\n  public isUsed() {\n    return this.used;\n  }\n\n  public schemaBasePath(): string {\n    return \"tcp\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.connectObservers = [];\n    this.readObservers = [];\n    this.used = false;\n  }\n\n  private close() {\n    if (!this.used) {\n      throw new Error(`tcp${this.id} is not used`);\n    }\n    const obj: any = {};\n    obj[\"tcp\" + this.id] = {\n      disconnect: true,\n    };\n    this.Obniz.send(obj);\n  }\n\n  private _addConnectObserver(callback: any) {\n    if (callback) {\n      this.connectObservers.push(callback);\n    }\n  }\n\n  private _addReadObserver(callback: TCPReceiveCallbackFunction) {\n    if (callback) {\n      this.readObservers.push(callback);\n    }\n  }\n}\n"]}