{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandPlugin.ts"],"names":[],"mappings":"AAKA,OAAO,SAAS,MAAM,aAAa,CAAC;AAEpC,cAAM,eAAgB,SAAQ,SAAS;IAC9B,MAAM,EAAE,GAAG,CAAC;IACZ,eAAe,EAAE,GAAG,CAAC;IACrB,YAAY,EAAE,GAAG,CAAC;IAClB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAU5B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAK5B,aAAa,CAAC,IAAI,EAAE,GAAG;IAkBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAgBhE;AAED,eAAe,eAAe,CAAC","file":"WSCommandPlugin.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @ignore\n */\nimport JsonBinaryConverter from \"./jsonBinaryConverter\";\nimport WSCommand from \"./WSCommand\";\n\nclass WSCommandPlugin extends WSCommand {\n  public module: any;\n  public _CommandReceive: any; // js <- device\n  public _CommandSend: any; // js -> device\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n\n  constructor() {\n    super();\n    this.module = 15;\n\n    this._CommandSend = 0;\n    this._CommandReceive = 1;\n  }\n\n  public send(params: any, index: any) {\n    const buf: any = new Uint8Array(params.send);\n    this.sendCommand(this._CommandSend, buf);\n  }\n\n  public parseFromJson(json: any) {\n    const module: any = json.plugin;\n    if (module === undefined) {\n      return;\n    }\n\n    const schemaData: any = [{ uri: \"/request/plugin/send\", onValid: this.send }];\n    const res: any = this.validateCommandSchema(schemaData, module, \"plugin\");\n\n    if (res.valid === 0) {\n      if (res.invalidButLike.length > 0) {\n        throw new Error(res.invalidButLike[0].message);\n      } else {\n        throw new this.WSCommandNotFoundError(`[network]unknown command`);\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    switch (func) {\n      case this._CommandReceive: {\n        // convert buffer to array\n        const arr: any = new Array(payload.byteLength);\n        for (let i = 0; i < arr.length; i++) {\n          arr[i] = payload[i];\n        }\n\n        objToSend.plugin = {\n          receive: arr,\n        };\n        break;\n      }\n    }\n  }\n}\n\nexport default WSCommandPlugin;\n"]}