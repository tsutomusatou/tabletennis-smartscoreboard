{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandWiFi.ts"],"names":[],"mappings":"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","file":"WSCommandWiFi.js","sourcesContent":["/**\n * @packageDocumentation\n * @ignore\n */\nimport JsonBinaryConverter from \"./jsonBinaryConverter\";\nimport WSCommand from \"./WSCommand\";\nclass WSCommandWiFi extends WSCommand {\n  public module: any;\n  public _CommandScan: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n\n  constructor() {\n    super();\n    this.module = 14;\n\n    this._CommandScan = 0;\n  }\n\n  public scan(params: any, index: any) {\n    this.sendCommand(this._CommandScan, null);\n  }\n\n  public parseFromJson(json: any) {\n    const module: any = json.wifi;\n    if (module === undefined) {\n      return;\n    }\n\n    const schemaData: any = [{ uri: \"/request/wifi/scan\", onValid: this.scan }];\n    const res: any = this.validateCommandSchema(schemaData, module, \"wifi\");\n\n    if (res.valid === 0) {\n      if (res.invalidButLike.length > 0) {\n        throw new Error(res.invalidButLike[0].message);\n      } else {\n        throw new this.WSCommandNotFoundError(`[network]unknown command`);\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    switch (func) {\n      case this._CommandScan: {\n        enum ScanState {\n          SCAN_SSID_LEN,\n          SCAN_SSID,\n          SCAN_MAC,\n          SCAN_RSSI,\n        }\n        let mode: ScanState = ScanState.SCAN_SSID_LEN;\n        let tmpIndex = 0;\n        let ssid = \"\";\n        let macAddress = \"\";\n        let rssi = 0;\n        const scanArray = [];\n        for (let i = 0; i < payload.length; i++) {\n          switch (mode) {\n            case ScanState.SCAN_SSID_LEN:\n              tmpIndex = payload[i];\n              mode = ScanState.SCAN_SSID;\n              break;\n            case ScanState.SCAN_SSID:\n              ssid += String.fromCharCode(payload[i]);\n              tmpIndex--;\n              if (tmpIndex === 0) {\n                mode = ScanState.SCAN_MAC;\n                tmpIndex = 0;\n              }\n              break;\n            case ScanState.SCAN_MAC:\n              macAddress += String.fromCharCode(payload[i]);\n              tmpIndex++;\n              if (tmpIndex === 12) {\n                mode = ScanState.SCAN_RSSI;\n              }\n              break;\n            case ScanState.SCAN_RSSI:\n              rssi = JsonBinaryConverter.signedNumberFromBinary([payload[i]]);\n              mode = ScanState.SCAN_SSID_LEN;\n              scanArray.push({\n                ssid,\n                macAddress,\n                rssi,\n              });\n              ssid = \"\";\n              macAddress = \"\";\n              rssi = 0;\n              break;\n          }\n        }\n        objToSend.wifi = {\n          scan: scanArray,\n        };\n        break;\n      }\n    }\n  }\n}\n\nexport default WSCommandWiFi;\n"]}