{"version":3,"sources":["../src/obniz/libs/wscommand/WSCommandWiFi.ts"],"names":[],"mappings":"AAKA,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,cAAM,aAAc,SAAQ,SAAS;IAC5B,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,EAAE,GAAG,CAAC;IAClB,WAAW,EAAE,GAAG,CAAC;IACjB,qBAAqB,EAAE,GAAG,CAAC;IAC3B,sBAAsB,EAAE,GAAG,CAAC;;IAS5B,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;IAI5B,aAAa,CAAC,IAAI,EAAE,GAAG;IAkBvB,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;CAyDhE;AAED,eAAe,aAAa,CAAC","file":"WSCommandWiFi.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @ignore\n */\nimport JsonBinaryConverter from \"./jsonBinaryConverter\";\nimport WSCommand from \"./WSCommand\";\nclass WSCommandWiFi extends WSCommand {\n  public module: any;\n  public _CommandScan: any;\n  public sendCommand: any;\n  public validateCommandSchema: any;\n  public WSCommandNotFoundError: any;\n\n  constructor() {\n    super();\n    this.module = 14;\n\n    this._CommandScan = 0;\n  }\n\n  public scan(params: any, index: any) {\n    this.sendCommand(this._CommandScan, null);\n  }\n\n  public parseFromJson(json: any) {\n    const module: any = json.wifi;\n    if (module === undefined) {\n      return;\n    }\n\n    const schemaData: any = [{ uri: \"/request/wifi/scan\", onValid: this.scan }];\n    const res: any = this.validateCommandSchema(schemaData, module, \"wifi\");\n\n    if (res.valid === 0) {\n      if (res.invalidButLike.length > 0) {\n        throw new Error(res.invalidButLike[0].message);\n      } else {\n        throw new this.WSCommandNotFoundError(`[network]unknown command`);\n      }\n    }\n  }\n\n  public notifyFromBinary(objToSend: any, func: any, payload: any) {\n    switch (func) {\n      case this._CommandScan: {\n        enum ScanState {\n          SCAN_SSID_LEN,\n          SCAN_SSID,\n          SCAN_MAC,\n          SCAN_RSSI,\n        }\n        let mode: ScanState = ScanState.SCAN_SSID_LEN;\n        let tmpIndex = 0;\n        let ssid = \"\";\n        let macAddress = \"\";\n        let rssi = 0;\n        const scanArray = [];\n        for (let i = 0; i < payload.length; i++) {\n          switch (mode) {\n            case ScanState.SCAN_SSID_LEN:\n              tmpIndex = payload[i];\n              mode = ScanState.SCAN_SSID;\n              break;\n            case ScanState.SCAN_SSID:\n              ssid += String.fromCharCode(payload[i]);\n              tmpIndex--;\n              if (tmpIndex === 0) {\n                mode = ScanState.SCAN_MAC;\n                tmpIndex = 0;\n              }\n              break;\n            case ScanState.SCAN_MAC:\n              macAddress += String.fromCharCode(payload[i]);\n              tmpIndex++;\n              if (tmpIndex === 12) {\n                mode = ScanState.SCAN_RSSI;\n              }\n              break;\n            case ScanState.SCAN_RSSI:\n              rssi = JsonBinaryConverter.signedNumberFromBinary([payload[i]]);\n              mode = ScanState.SCAN_SSID_LEN;\n              scanArray.push({\n                ssid,\n                macAddress,\n                rssi,\n              });\n              ssid = \"\";\n              macAddress = \"\";\n              rssi = 0;\n              break;\n          }\n        }\n        objToSend.wifi = {\n          scan: scanArray,\n        };\n        break;\n      }\n    }\n  }\n}\n\nexport default WSCommandWiFi;\n"]}