{"version":3,"sources":["../src/obniz/libs/io_peripherals/i2c.ts"],"names":[],"mappings":"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","file":"i2c.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ObnizError, ObnizI2cError, ObnizI2cWarning } from \"../../ObnizError\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport ObnizUtil from \"../utils/util\";\nimport { PullType } from \"./common\";\n\ntype I2CMode = \"master\" | \"slave\";\n\ninterface PeripheralI2CState {\n  mode: I2CMode;\n  sda: number;\n  scl: number;\n  pull?: PullType;\n  gnd?: number;\n}\n\ninterface PeripheralI2COptions extends PeripheralI2CState {\n  mode: I2CMode;\n  sda: number;\n  scl: number;\n  clock?: number;\n  slave_address?: any;\n  slave_address_length?: number;\n}\n\n/**\n * i2c can be used.\n *  Master/Slave mode.\n *  But slave mode only works with \"written\" events. You can't set data to be read.\n * @category Peripherals\n */\nclass PeripheralI2C extends ComponentAbstract {\n  /**\n   * from obniz.js 1.14.0\n   *\n   * It sets a function to receive error when i2c bus error occurs.\n   * By setting a function, obniz.error will never be called.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.i2c0.start({mode:\"master\", sda:2, scl:3, clock:400000});\n   * obniz.i2c0.onerror = function(err) {\n   *   console.log('Error', err);\n   * }\n   * var ret = await obniz.i2c0.readWait(0x50, 1);\n   * ```\n   */\n  public onerror?: (error: any) => void;\n\n  /**\n   * @ignore\n   */\n  public used!: boolean;\n\n  /**\n   * Slave mode only.\n   *\n   * It is a callback that is called when data is written.\n   * Received data is fragmented.\n   * When written data is 100byte, you possibly receive it in 56 byte and 44 byte.\n   * For data over 1024 bytes, few bytes may be dropped.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.i2c0.start({mode: \"slave\", sda: 0, scl: 1, slave_address: 0x01});\n   * obniz.i2c0.onwritten = function(data){\n   *   console.log(data);\n   * }\n   * ```\n   */\n  public onwritten?: (data: number[], address: number) => void;\n  private state!: PeripheralI2CState;\n  private id: number;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n    this.onerror = undefined;\n\n    this.on(\"/response/i2c/slave\", (obj) => {\n      this.Obniz._runUserCreatedFunction(this.onwritten, obj.data, obj.address);\n    });\n\n    this.on(\"/response/i2c/error\", (obj) => {\n      const message: any = `i2c${this.id}: ${obj.error.message}`;\n      if (typeof this.onerror === \"function\") {\n        this.Obniz._runUserCreatedFunction(this.onerror, new Error(message));\n      } else {\n        this.Obniz.error({\n          alert: \"error\",\n          message,\n        });\n      }\n    });\n    this.on(\"/response/i2c/warning\", (obj) => {\n      this.Obniz.warning({\n        alert: \"warning\",\n        message: `i2c${this.id}: ${obj.warning.message}`,\n      });\n    });\n\n    this._reset();\n  }\n\n  /**\n   * It starts i2c on given io sda, scl.\n   *\n   *\n   * Internal pull up is optional for io output setting.\n   * By default it is pull:null.\n   * See more on obniz.ioX.pull().\n   *\n   * For using internal-pull-up, you should specify \"3v\" to connect to 3.3v targets, and \"5v\" for 5v targets.\n   * When you choose internal pull up, speed is limited to up to 100khz, because internal pull up is not so tough.\n   * Please add external pull-up resistor on scl/sda and choose pull:null when you need more speed.\n   *\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.i2c0.start({mode:\"master\", sda:2, scl:3, clock:400000});\n   * obniz.i2c0.write(0x50, [0x00, 0x00, 0x12]);\n   * var ret = await obniz.i2c0.readWait(0x50, 1);\n   * console.log(\"read \"+ret);\n   * ```\n   *\n   * - use internal pull up\n   *\n   * ```javascript\n   * obniz.i2c0.start({mode:\"master\", sda:2, scl:3, clock:400000, pull:\"5v\"});\n   * ```\n   *\n   * - save mode\n   *\n   * ```javascript\n   * obniz.i2c0.start({mode: \"slave\", sda: 0, scl: 1, slave_address: 0x01});\n   * ```\n   *\n   * @param arg\n   */\n  public start(arg: PeripheralI2COptions) {\n    const err: any = ObnizUtil._requiredKeys(arg, [\"mode\", \"sda\", \"scl\"]);\n    if (err) {\n      throw new Error(\"I2C start param '\" + err + \"' required, but not found \");\n    }\n    this.state = ObnizUtil._keyFilter(arg, [\"mode\", \"sda\", \"scl\", \"pull\", \"gnd\"]);\n\n    const ioKeys: Array<keyof PeripheralI2CState> = [\"sda\", \"scl\", \"gnd\"];\n    for (const key of ioKeys) {\n      if (this.state[key] && !this.Obniz.isValidIO(this.state[key])) {\n        throw new Error(\"i2c start param '\" + key + \"' are to be valid io no\");\n      }\n    }\n\n    const mode: I2CMode = this.state.mode!;\n    const clock: number | null = typeof arg.clock === \"number\" ? Math.floor(arg.clock) : null;\n    const slave_address: number | null = typeof arg.slave_address === \"number\" ? Math.floor(arg.slave_address) : null;\n    const slave_address_length: number | null =\n      typeof arg.slave_address_length === \"number\" ? Math.floor(arg.slave_address_length) : null;\n\n    if (mode !== \"master\" && mode !== \"slave\") {\n      throw new Error(\"i2c: invalid mode \" + mode);\n    }\n    if (mode === \"master\") {\n      if (clock === null) {\n        throw new Error(\"i2c: please specify clock when master mode\");\n      }\n      if (clock <= 0 || clock > 1 * 1000 * 1000) {\n        throw new Error(\"i2c: invalid clock \" + clock);\n      }\n      if (arg.pull === \"5v\" && clock > 400 * 1000) {\n        throw new Error(\"i2c: please use under 400khz when internal 5v internal pull-up\");\n      }\n      if (arg.pull === \"3v\" && clock > 100 * 1000) {\n        throw new Error(\"i2c: please use under 100khz when internal 3v internal pull-up\");\n      }\n    } else {\n      if (slave_address === null) {\n        throw new Error(\"i2c: please specify slave_address\");\n      }\n      if (slave_address < 0 || slave_address > 0x7f) {\n        throw new Error(\"i2c: invalid slave_address\");\n      }\n      if (slave_address < 0 || slave_address > 0x7f) {\n        throw new Error(\"i2c: invalid slave_address\");\n      }\n      if (slave_address_length !== null && slave_address_length !== 7) {\n        throw new Error(\"i2c: invalid slave_address_length. please specify 7\");\n      }\n    }\n\n    this.Obniz.getIO(this.state.sda).drive(\"open-drain\");\n    this.Obniz.getIO(this.state.scl).drive(\"open-drain\");\n\n    if (this.state.pull) {\n      this.Obniz.getIO(this.state.sda).pull(this.state.pull);\n      this.Obniz.getIO(this.state.scl).pull(this.state.pull);\n    } else {\n      this.Obniz.getIO(this.state.sda).pull(null);\n      this.Obniz.getIO(this.state.scl).pull(null);\n    }\n\n    if (this.state.gnd !== undefined) {\n      this.Obniz.getIO(this.state.gnd).output(false);\n      const ioNames: any = {};\n      ioNames[this.state.gnd] = \"gnd\";\n      if (this.Obniz.display) {\n        this.Obniz.display.setPinNames(\"i2c\" + this.id, ioNames);\n      }\n    }\n\n    const startObj: any = ObnizUtil._keyFilter(this.state, [\"mode\", \"sda\", \"scl\"]);\n    if (mode === \"master\") {\n      startObj.clock = clock;\n    } else {\n      startObj.slave_address = slave_address;\n      if (slave_address_length) {\n        startObj.slave_address_length = slave_address_length;\n      }\n    }\n\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = startObj;\n    this.used = true;\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * It sends data to device which has the address\n   *\n   * ```\n   * // Javascript Example\n   * obniz.i2c0.start({mode: \"master\",sda:2, scl:3, clock:400000, pull:null});\n   * obniz.i2c0.write(0x50, [0x00, 0x00, 0x12]);\n   * ```\n   * @param address 7bit address only.\n   * @param data Max length is 1024;\n   */\n  public write(address: number, data: number[]) {\n    if (!this.used) {\n      throw new Error(`i2c${this.id} is not started`);\n    }\n    address = parseInt(address as any);\n    if (isNaN(address)) {\n      throw new Error(\"i2c: please specify address\");\n    }\n    if (address < 0 || address > 0x7f) {\n      throw new Error(\"i2c: invalid address\");\n    }\n    if (!data) {\n      throw new Error(\"i2c: please provide data\");\n    }\n    if (data.length > 1024) {\n      throw new Error(\"i2c: data should be under 1024 bytes\");\n    }\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = {\n      address,\n      data,\n    };\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * It reads data from the device. length defines the length of bytes. The treatment of address is same as write() function.\n   * This function will wait until data is received.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.i2c0.start({mode: \"master\",sda:2, scl:3, clock:400000, pull:null});\n   * var ret = await obniz.i2c0.readWait(0x50, 1);\n   * console.log(\"read \"+ret);\n   * ```\n   *\n   * @param address\n   * @param length Max is 1024;\n   */\n  public async readWait(address: number, length: number): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`i2c${this.id} is not started`);\n    }\n    address = parseInt(address as any);\n    if (isNaN(address)) {\n      throw new Error(\"i2c: please specify address\");\n    }\n    if (address < 0 || address > 0x7f) {\n      throw new Error(\"i2c: invalid address\");\n    }\n    length = parseInt(length as any);\n    if (isNaN(length) || length < 0) {\n      throw new Error(\"i2c: invalid length to read\");\n    }\n    if (length > 1024) {\n      throw new Error(\"i2c: data length should be under 1024 bytes\");\n    }\n    const self: any = this;\n\n    const obj: any = {};\n    obj[\"i2c\" + self.id] = {\n      address,\n      read: length,\n    };\n\n    const errors = {\n      \"/response/i2c/error\": ObnizI2cError,\n      \"/response/i2c/warning\": ObnizI2cWarning,\n    };\n    const receiveData = await this.sendAndReceiveJsonWait(obj, \"/response/i2c/master\", { errors });\n    return receiveData.data;\n  }\n\n  /**\n   * @ignore\n   */\n  public isUsed() {\n    return this.used;\n  }\n\n  /**\n   * end i2c .\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.i2c0.start({mode:\"master\", sda:2, scl:3, clock:400000});\n   * obniz.i2c0.end();\n   * ```\n   */\n  public end() {\n    const obj: any = {};\n    obj[\"i2c\" + this.id] = null;\n    this.Obniz.send(obj);\n    this.used = false;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public schemaBasePath(): string {\n    return \"i2c\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.used = false;\n    this.onwritten = undefined;\n  }\n}\n\nexport default PeripheralI2C;\n"]}