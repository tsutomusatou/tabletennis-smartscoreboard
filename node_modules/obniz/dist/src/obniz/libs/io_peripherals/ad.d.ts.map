{"version":3,"sources":["../src/obniz/libs/io_peripherals/ad.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,iBAAiB;IAClD,EAAE,EAAE,MAAM,CAAC;IAElB;;;;OAIG;IACI,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IAE1C;;;;;;;;;;;;;OAaG;IACI,KAAK,EAAG,MAAM,CAAC;gBAEV,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAYpC;;;;;;;;;OASG;IACI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI;IAUjD;;;;;;;;;;;;;OAaG;IACU,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;IASvC;;;;;;OAMG;IACI,GAAG;IAQV;;;OAGG;IACI,cAAc,IAAI,MAAM;IAI/B;;;OAGG;IACH,SAAS,CAAC,MAAM;CAGjB","file":"ad.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\n\n/**\n * @category Peripherals\n */\nexport default class PeripheralAD extends ComponentAbstract {\n  public id: number;\n\n  /**\n   * called when voltage gets changed.\n   *\n   * @param onchange.value voltage of pin\n   */\n  public onchange?: (value: number) => void;\n\n  /**\n   * The value will be stored in the value variable.\n   *\n   * Note: This property stores the last received value.\n   * NOT the value when you read this property.\n   *\n   * ```Javascript\n   * obniz.ad0.start();\n   * while(true) {\n   * console.log(\"changed to \"+obniz.ad0.value+\" v\")\n   *  await obniz.wait(10); // 10ms wait\n   * }\n   * ```\n   */\n  public value!: number;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n\n    this.on(\"/response/ad/get\", (obj) => {\n      this.value = obj;\n      this.Obniz._runUserCreatedFunction(this.onchange, obj);\n    });\n\n    this._reset();\n  }\n\n  /**\n   * This starts measuring voltage on ioX until end() is called.\n   * ```Javascript\n   * obniz.ad0.start(function(voltage){\n   *  console.log(\"changed to \"+voltage+\" v\")\n   * });\n   * ```\n   * @param callback  called when voltage gets changed.\n   * @param callback.voltage  voltage\n   */\n  public start(callback?: (voltage: number) => void) {\n    this.onchange = callback;\n    const obj: any = {};\n    obj[\"ad\" + this.id] = {\n      stream: true,\n    };\n    this.Obniz.send(obj);\n    return this.value;\n  }\n\n  /**\n   * This measures the voltage just once and returns its value.\n   * This function will pause until ad result arrives to your js.\n   *\n   * ```javascript\n   * obniz.io0.output(true)\n   * var voltage = await obniz.ad0.getWait();\n   * obniz.io0.output(false)\n   * console.log(\"\"+voltage+\" should be closed to 5.00\");\n   * ```\n   *\n   * @return measured voltage\n   *\n   */\n  public async getWait(): Promise<number> {\n    const obj: any = {};\n    obj[\"ad\" + this.id] = {\n      stream: false,\n    };\n    const data = await this.sendAndReceiveJsonWait(obj, \"/response/ad/get\");\n    return data;\n  }\n\n  /**\n   * This stops measuring voltage on ioX.\n   * ```javascript\n   * obniz.ad0.start();\n   * obniz.ad0.end();\n   * ```\n   */\n  public end() {\n    this.onchange = undefined;\n    const obj: any = {};\n    obj[\"ad\" + this.id] = null;\n    this.Obniz.send(obj);\n    return;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public schemaBasePath(): string {\n    return \"ad\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.value = 0.0;\n  }\n}\n"]}