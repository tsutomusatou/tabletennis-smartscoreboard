{"version":3,"sources":["../src/obniz/libs/io_peripherals/grove.ts"],"names":[],"mappings":"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","file":"grove.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport PeripheralAD from \"./ad\";\nimport { DriveType } from \"./common\";\nimport PeripheralI2C from \"./i2c\";\nimport PeripheralIO from \"./io\";\nimport PeripheralPWM from \"./pwm\";\nimport PeripheralUART from \"./uart\";\n\nexport interface PeripheralGroveParams {\n  pin1: number;\n  pin2: number;\n  vcc?: number;\n  gnd?: number;\n}\n\nexport type PeripheralGroveType = \"digital\" | \"analog\" | \"analog-digital\" | \"i2c\" | \"uart\" | \"pwm\";\nexport type GrovePinOption = \"default\" | \"secondaryOnly\";\n/**\n * @category Peripherals\n */\nexport default class PeripheralGrove extends ComponentAbstract {\n  public no: number;\n  public used: boolean = false;\n  private _params: PeripheralGroveParams;\n  private _current: {\n    type?: PeripheralGroveType;\n    drive?: DriveType;\n    i2c?: PeripheralI2C;\n    uart?: PeripheralUART;\n    pwm?: PeripheralPWM;\n  } = {};\n\n  constructor(obniz: Obniz, no: number, params: PeripheralGroveParams) {\n    super(obniz);\n    this.no = no;\n    this._params = params;\n    this._reset();\n  }\n\n  public getDigital(\n    drive: DriveType = \"5v\",\n    pinOption: GrovePinOption = \"default\",\n  ): { primary: PeripheralIO; secondary?: PeripheralIO } {\n    this.useWithType(\"digital\", drive);\n    const primary = this.Obniz.isValidIO(this._params.pin1) ? this.Obniz.getIO(this._params.pin1) : undefined;\n    const secondary = this.Obniz.isValidIO(this._params.pin2) ? this.Obniz.getIO(this._params.pin2) : undefined;\n\n    if (!primary) {\n      // required\n      throw new Error(\"grove digital primary pin \" + this._params.pin1 + \" is not valid io\");\n    }\n    if (pinOption === \"default\" && !primary) {\n      // required\n      throw new Error(\"grove digital primary pin \" + this._params.pin1 + \" is not valid io\");\n    }\n\n    if (pinOption === \"secondaryOnly\" && !secondary) {\n      // required\n      throw new Error(\"grove digital secondary pin \" + this._params.pin2 + \" is not valid io\");\n    }\n    return { primary, secondary };\n  }\n\n  public getAnalog(\n    drive: DriveType = \"5v\",\n    pinOption: GrovePinOption = \"default\",\n  ): { primary?: PeripheralAD; secondary?: PeripheralAD } {\n    this.useWithType(\"analog\", drive);\n    const primary = this.Obniz.isValidAD(this._params.pin1) ? this.Obniz.getAD(this._params.pin1) : undefined;\n    const secondary = this.Obniz.isValidAD(this._params.pin2) ? this.Obniz.getAD(this._params.pin2) : undefined;\n\n    if (pinOption === \"default\" && !primary) {\n      // required\n      throw new Error(\"grove analog primary pin \" + this._params.pin1 + \" is not valid io\");\n    }\n    if (pinOption === \"secondaryOnly\" && !secondary) {\n      // required\n      throw new Error(\"grove analog secondary pin \" + this._params.pin2 + \" is not valid io\");\n    }\n    return { primary, secondary };\n  }\n\n  public getAnalogDigital(drive: DriveType = \"5v\"): { analog: PeripheralAD; digital: PeripheralIO } {\n    this.useWithType(\"analog-digital\", drive);\n    const analog = this.Obniz.isValidAD(this._params.pin1) ? this.Obniz.getAD(this._params.pin1) : undefined;\n    const digital = this.Obniz.isValidIO(this._params.pin2) ? this.Obniz.getIO(this._params.pin2) : undefined;\n\n    if (!analog) {\n      // required\n      throw new Error(\"grove analog pin \" + this._params.pin1 + \" is not valid io\");\n    }\n\n    if (!digital) {\n      // required\n      throw new Error(\"grove digital pin \" + this._params.pin2 + \" is not valid io\");\n    }\n    return { analog, digital };\n  }\n\n  public getI2c(frequency: number, drive: DriveType = \"5v\"): PeripheralI2C {\n    this.useWithType(\"i2c\", drive);\n    if (!this._current.i2c) {\n      this._current.i2c = this.Obniz.getI2CWithConfig({\n        mode: \"master\",\n        sda: this._params.pin2,\n        scl: this._params.pin1,\n        clock: frequency,\n      });\n    }\n    return this._current.i2c;\n  }\n\n  public getUart(baud: number, drive: DriveType = \"5v\"): PeripheralUART {\n    this.useWithType(\"uart\", drive);\n    this._current.uart = this.Obniz.getFreeUart();\n    this._current.uart.start({\n      rx: this._params.pin1,\n      tx: this._params.pin2,\n      baud,\n      drive,\n    });\n    return this._current.uart;\n  }\n\n  public getPwm(drive: DriveType = \"5v\"): PeripheralPWM {\n    this.useWithType(\"pwm\", drive);\n    this._current.pwm = this.Obniz.getFreePwm();\n    this._current.pwm.start({\n      io: this._params.pin1,\n    });\n    return this._current.pwm;\n  }\n\n  /**\n   * @ignore\n   */\n  public _reset() {}\n\n  public end() {\n    this.used = false;\n    if (this._current.uart) {\n      this._current.uart.end();\n    }\n    if (this._current.i2c) {\n      this._current.i2c.end();\n    }\n    if (this._current.type === \"analog\") {\n      if (this.Obniz.isValidAD(this._params.pin1)) {\n        this.Obniz.getAD(this._params.pin1).end();\n      }\n      if (this.Obniz.isValidAD(this._params.pin2)) {\n        this.Obniz.getAD(this._params.pin2).end();\n      }\n    } else if (this._current.type === \"analog-digital\") {\n      if (this.Obniz.isValidAD(this._params.pin1)) {\n        this.Obniz.getAD(this._params.pin1).end();\n      }\n      // if (this.Obniz.isValidIO(this._params.pin2)) {\n      //   this.Obniz.getIO(this._params.pin2).end();\n      // }\n    }\n    this._current = {};\n  }\n\n  /**\n   * @ignore\n   * @param obj\n   */\n  public notified(obj: number) {\n    // nothing\n  }\n\n  public schemaBasePath(): null {\n    return null;\n  }\n\n  private useWithType(type: PeripheralGroveType, drive: DriveType) {\n    if (this.used) {\n      if (this._current.type !== \"i2c\" || this._current.drive !== drive) {\n        throw new Error(\"Grove pins are already used.\");\n      }\n    }\n    this.used = true;\n    this._current.type = type;\n    this._current.drive = drive;\n\n    this.Obniz.setVccGnd(this._params.vcc, this._params.gnd, drive);\n    if (this.Obniz.isValidIO(this._params.pin1)) {\n      this.Obniz.getIO(this._params.pin1).drive(drive);\n    }\n    if (this.Obniz.isValidIO(this._params.pin2)) {\n      this.Obniz.getIO(this._params.pin2).drive(drive);\n    }\n  }\n}\n"]}