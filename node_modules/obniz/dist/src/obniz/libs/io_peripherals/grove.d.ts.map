{"version":3,"sources":["../src/obniz/libs/io_peripherals/grove.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,YAAY,MAAM,MAAM,CAAC;AAChC,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,aAAa,MAAM,OAAO,CAAC;AAClC,OAAO,YAAY,MAAM,MAAM,CAAC;AAChC,OAAO,aAAa,MAAM,OAAO,CAAC;AAClC,OAAO,cAAc,MAAM,QAAQ,CAAC;AAEpC,MAAM,WAAW,qBAAqB;IACpC,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,oBAAY,mBAAmB,GAAG,SAAS,GAAG,QAAQ,GAAG,gBAAgB,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC;AACnG,oBAAY,cAAc,GAAG,SAAS,GAAG,eAAe,CAAC;AACzD;;GAEG;AACH,MAAM,CAAC,OAAO,OAAO,eAAgB,SAAQ,iBAAiB;IACrD,EAAE,EAAE,MAAM,CAAC;IACX,IAAI,EAAE,OAAO,CAAS;IAC7B,OAAO,CAAC,OAAO,CAAwB;IACvC,OAAO,CAAC,QAAQ,CAMT;gBAEK,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,qBAAqB;IAO5D,UAAU,CACf,KAAK,GAAE,SAAgB,EACvB,SAAS,GAAE,cAA0B,GACpC;QAAE,OAAO,EAAE,YAAY,CAAC;QAAC,SAAS,CAAC,EAAE,YAAY,CAAA;KAAE;IAqB/C,SAAS,CACd,KAAK,GAAE,SAAgB,EACvB,SAAS,GAAE,cAA0B,GACpC;QAAE,OAAO,CAAC,EAAE,YAAY,CAAC;QAAC,SAAS,CAAC,EAAE,YAAY,CAAA;KAAE;IAgBhD,gBAAgB,CAAC,KAAK,GAAE,SAAgB,GAAG;QAAE,MAAM,EAAE,YAAY,CAAC;QAAC,OAAO,EAAE,YAAY,CAAA;KAAE;IAiB1F,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,KAAK,GAAE,SAAgB,GAAG,aAAa;IAajE,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,GAAE,SAAgB,GAAG,cAAc;IAY9D,MAAM,CAAC,KAAK,GAAE,SAAgB,GAAG,aAAa;IASrD;;OAEG;IACI,MAAM;IAEN,GAAG;IA0BV;;;OAGG;IACI,QAAQ,CAAC,GAAG,EAAE,MAAM;IAIpB,cAAc,IAAI,IAAI;IAI7B,OAAO,CAAC,WAAW;CAkBpB","file":"grove.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport PeripheralAD from \"./ad\";\nimport { DriveType } from \"./common\";\nimport PeripheralI2C from \"./i2c\";\nimport PeripheralIO from \"./io\";\nimport PeripheralPWM from \"./pwm\";\nimport PeripheralUART from \"./uart\";\n\nexport interface PeripheralGroveParams {\n  pin1: number;\n  pin2: number;\n  vcc?: number;\n  gnd?: number;\n}\n\nexport type PeripheralGroveType = \"digital\" | \"analog\" | \"analog-digital\" | \"i2c\" | \"uart\" | \"pwm\";\nexport type GrovePinOption = \"default\" | \"secondaryOnly\";\n/**\n * @category Peripherals\n */\nexport default class PeripheralGrove extends ComponentAbstract {\n  public no: number;\n  public used: boolean = false;\n  private _params: PeripheralGroveParams;\n  private _current: {\n    type?: PeripheralGroveType;\n    drive?: DriveType;\n    i2c?: PeripheralI2C;\n    uart?: PeripheralUART;\n    pwm?: PeripheralPWM;\n  } = {};\n\n  constructor(obniz: Obniz, no: number, params: PeripheralGroveParams) {\n    super(obniz);\n    this.no = no;\n    this._params = params;\n    this._reset();\n  }\n\n  public getDigital(\n    drive: DriveType = \"5v\",\n    pinOption: GrovePinOption = \"default\",\n  ): { primary: PeripheralIO; secondary?: PeripheralIO } {\n    this.useWithType(\"digital\", drive);\n    const primary = this.Obniz.isValidIO(this._params.pin1) ? this.Obniz.getIO(this._params.pin1) : undefined;\n    const secondary = this.Obniz.isValidIO(this._params.pin2) ? this.Obniz.getIO(this._params.pin2) : undefined;\n\n    if (!primary) {\n      // required\n      throw new Error(\"grove digital primary pin \" + this._params.pin1 + \" is not valid io\");\n    }\n    if (pinOption === \"default\" && !primary) {\n      // required\n      throw new Error(\"grove digital primary pin \" + this._params.pin1 + \" is not valid io\");\n    }\n\n    if (pinOption === \"secondaryOnly\" && !secondary) {\n      // required\n      throw new Error(\"grove digital secondary pin \" + this._params.pin2 + \" is not valid io\");\n    }\n    return { primary, secondary };\n  }\n\n  public getAnalog(\n    drive: DriveType = \"5v\",\n    pinOption: GrovePinOption = \"default\",\n  ): { primary?: PeripheralAD; secondary?: PeripheralAD } {\n    this.useWithType(\"analog\", drive);\n    const primary = this.Obniz.isValidAD(this._params.pin1) ? this.Obniz.getAD(this._params.pin1) : undefined;\n    const secondary = this.Obniz.isValidAD(this._params.pin2) ? this.Obniz.getAD(this._params.pin2) : undefined;\n\n    if (pinOption === \"default\" && !primary) {\n      // required\n      throw new Error(\"grove analog primary pin \" + this._params.pin1 + \" is not valid io\");\n    }\n    if (pinOption === \"secondaryOnly\" && !secondary) {\n      // required\n      throw new Error(\"grove analog secondary pin \" + this._params.pin2 + \" is not valid io\");\n    }\n    return { primary, secondary };\n  }\n\n  public getAnalogDigital(drive: DriveType = \"5v\"): { analog: PeripheralAD; digital: PeripheralIO } {\n    this.useWithType(\"analog-digital\", drive);\n    const analog = this.Obniz.isValidAD(this._params.pin1) ? this.Obniz.getAD(this._params.pin1) : undefined;\n    const digital = this.Obniz.isValidIO(this._params.pin2) ? this.Obniz.getIO(this._params.pin2) : undefined;\n\n    if (!analog) {\n      // required\n      throw new Error(\"grove analog pin \" + this._params.pin1 + \" is not valid io\");\n    }\n\n    if (!digital) {\n      // required\n      throw new Error(\"grove digital pin \" + this._params.pin2 + \" is not valid io\");\n    }\n    return { analog, digital };\n  }\n\n  public getI2c(frequency: number, drive: DriveType = \"5v\"): PeripheralI2C {\n    this.useWithType(\"i2c\", drive);\n    if (!this._current.i2c) {\n      this._current.i2c = this.Obniz.getI2CWithConfig({\n        mode: \"master\",\n        sda: this._params.pin2,\n        scl: this._params.pin1,\n        clock: frequency,\n      });\n    }\n    return this._current.i2c;\n  }\n\n  public getUart(baud: number, drive: DriveType = \"5v\"): PeripheralUART {\n    this.useWithType(\"uart\", drive);\n    this._current.uart = this.Obniz.getFreeUart();\n    this._current.uart.start({\n      rx: this._params.pin1,\n      tx: this._params.pin2,\n      baud,\n      drive,\n    });\n    return this._current.uart;\n  }\n\n  public getPwm(drive: DriveType = \"5v\"): PeripheralPWM {\n    this.useWithType(\"pwm\", drive);\n    this._current.pwm = this.Obniz.getFreePwm();\n    this._current.pwm.start({\n      io: this._params.pin1,\n    });\n    return this._current.pwm;\n  }\n\n  /**\n   * @ignore\n   */\n  public _reset() {}\n\n  public end() {\n    this.used = false;\n    if (this._current.uart) {\n      this._current.uart.end();\n    }\n    if (this._current.i2c) {\n      this._current.i2c.end();\n    }\n    if (this._current.type === \"analog\") {\n      if (this.Obniz.isValidAD(this._params.pin1)) {\n        this.Obniz.getAD(this._params.pin1).end();\n      }\n      if (this.Obniz.isValidAD(this._params.pin2)) {\n        this.Obniz.getAD(this._params.pin2).end();\n      }\n    } else if (this._current.type === \"analog-digital\") {\n      if (this.Obniz.isValidAD(this._params.pin1)) {\n        this.Obniz.getAD(this._params.pin1).end();\n      }\n      // if (this.Obniz.isValidIO(this._params.pin2)) {\n      //   this.Obniz.getIO(this._params.pin2).end();\n      // }\n    }\n    this._current = {};\n  }\n\n  /**\n   * @ignore\n   * @param obj\n   */\n  public notified(obj: number) {\n    // nothing\n  }\n\n  public schemaBasePath(): null {\n    return null;\n  }\n\n  private useWithType(type: PeripheralGroveType, drive: DriveType) {\n    if (this.used) {\n      if (this._current.type !== \"i2c\" || this._current.drive !== drive) {\n        throw new Error(\"Grove pins are already used.\");\n      }\n    }\n    this.used = true;\n    this._current.type = type;\n    this._current.drive = drive;\n\n    this.Obniz.setVccGnd(this._params.vcc, this._params.gnd, drive);\n    if (this.Obniz.isValidIO(this._params.pin1)) {\n      this.Obniz.getIO(this._params.pin1).drive(drive);\n    }\n    if (this.Obniz.isValidIO(this._params.pin2)) {\n      this.Obniz.getIO(this._params.pin2).drive(drive);\n    }\n  }\n}\n"]}