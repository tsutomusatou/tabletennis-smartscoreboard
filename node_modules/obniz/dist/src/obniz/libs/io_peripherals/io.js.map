{"version":3,"sources":["../src/obniz/libs/io_peripherals/io.ts"],"names":[],"mappings":"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","file":"io.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport { DriveType, PullType } from \"./common\";\n\n/**\n * General purpose IO\n * This is available on each io (for obniz Board series, it's io0 to io11)\n * @category Peripherals\n */\nexport default class PeripheralIO extends ComponentAbstract {\n  private value!: boolean;\n  private onchange?: (value: boolean) => void;\n  private id: number;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n\n    this.on(\"/response/io/get\", (obj) => {\n      this.value = obj;\n      this.Obniz._runUserCreatedFunction(this.onchange, obj);\n    });\n\n    this.on(\"/response/io/warning\", (obj) => {\n      this.Obniz.warning({\n        alert: \"warning\",\n        message: `io${this.id}: ${obj.warning.message}`,\n      });\n    });\n\n    this.on(\"/response/io/error\", (obj) => {\n      this.Obniz.error({\n        alert: \"error\",\n        message: `io${this.id}: ${obj.error.message}`,\n      });\n    });\n\n    this._reset();\n  }\n\n  /**\n   * Make ioX to output mode and put out 1 or 0.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.io1.output(true); // io1 is 5v\n   * obniz.io2.output(1); //  io2 is 5v\n   * obniz.io3.drive(\"3v\");\n   * obniz.io3.output(1); // io3 is around 3v.\n   * ```\n   *\n   * @param value output value\n   */\n  public output(value: boolean | 0 | 1) {\n    value = !!value;\n    const obj: any = {};\n    obj[\"io\" + this.id] = value;\n    this.value = value;\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * This allows you to change output drive method.\n   * By default, it is set as push-pull 5v.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.io0.output(true); // output push-pull 5v\n   *\n   * obniz.io1.drive(\"3v\");\n   * obniz.io1.output(true); // output push-pull 3v\n   *\n   * obniz.io2.pull(\"5v\");\n   * obniz.io2.drive(\"open-drain\");\n   * obniz.io2.output(true); // output open-drain with 5v pull-up\n   * ```\n   *\n   * @param drive\n   *\n   */\n  public drive(drive: DriveType) {\n    if (typeof drive !== \"string\") {\n      throw new Error(\"please specify drive methods in string\");\n    }\n    let output_type: any = \"\";\n    switch (drive) {\n      case \"5v\":\n        output_type = \"push-pull5v\";\n        break;\n      case \"3v\":\n        output_type = \"push-pull3v\";\n        break;\n      case \"open-drain\":\n        output_type = \"open-drain\";\n        break;\n      default:\n        throw new Error(\"unknown drive method\");\n    }\n\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      output_type,\n    };\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * This enables/disables internal weak pull up/down resistors.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.io0.pull(\"3v\");\n   * obniz.io0.drive(\"open-drain\"); // output open-drain\n   * obniz.io0.output(false);\n   * ```\n   *\n   * @param updown\n   *\n   */\n  public pull(updown: PullType) {\n    if (typeof updown !== \"string\" && updown !== null) {\n      throw new Error(\"please specify pull methods in string\");\n    }\n    let pull_type: any = \"\";\n    switch (updown) {\n      case \"5v\":\n        pull_type = \"pull-up5v\";\n        break;\n      case \"3v\":\n        pull_type = \"pull-up3v\";\n        break;\n      case \"0v\":\n        pull_type = \"pull-down\";\n        break;\n      case null:\n        pull_type = \"float\";\n        break;\n      default:\n        throw new Error(\"unknown pull_type method\");\n    }\n\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      pull_type,\n    };\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * Make ioX to input mode.\n   * Callback function will be called when io changes its input value.\n   *\n   *\n   * @param callback\n   */\n  public input(callback: (value: boolean) => void) {\n    this.onchange = callback;\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      direction: \"input\",\n      stream: true,\n    };\n    this.Obniz.send(obj);\n    return this.value;\n  }\n\n  /**\n   * Make ioX to input mode.\n   *\n   * And this will return the current input value.\n   * It pauses the process until the value is returned.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var value = await obniz.io0.inputWait();\n   * console.log(value);\n   * ```\n   */\n  public async inputWait(): Promise<boolean> {\n    const obj: any = {};\n    obj[this.schemaBasePath()] = {\n      direction: \"input\",\n      stream: false,\n    };\n    const data = await this.sendAndReceiveJsonWait(obj, \"/response/io/get\");\n    return data;\n  }\n\n  /**\n   * This ends output/input on ioX.\n   *\n   *\n   * This function is effective only when using ioX.output() or ioX.input().\n   * This won't be called when AD/UART/etc are used.\n   * Pull-up down also will not affected.\n   *\n   * ```\n   * // Javascript Example\n   * obniz.io0.output(true)\n   * obniz.io0.end();\n   * ```\n   *\n   */\n  public end() {\n    const obj: any = {};\n    obj[\"io\" + this.id] = null;\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public schemaBasePath(): string {\n    return \"io\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.value = false;\n  }\n}\n"]}