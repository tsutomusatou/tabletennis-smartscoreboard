{"version":3,"sources":["../src/obniz/libs/io_peripherals/io.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAE/C;;;;GAIG;AACH,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,iBAAiB;IACzD,OAAO,CAAC,KAAK,CAAW;IACxB,OAAO,CAAC,QAAQ,CAAC,CAA2B;IAC5C,OAAO,CAAC,EAAE,CAAS;gBAEP,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IA0BpC;;;;;;;;;;;;OAYG;IACI,MAAM,CAAC,KAAK,EAAE,OAAO,GAAG,CAAC,GAAG,CAAC;IAQpC;;;;;;;;;;;;;;;;;;OAkBG;IACI,KAAK,CAAC,KAAK,EAAE,SAAS;IA0B7B;;;;;;;;;;;;OAYG;IACI,IAAI,CAAC,MAAM,EAAE,QAAQ;IA6B5B;;;;;;OAMG;IACI,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,KAAK,IAAI;IAW/C;;;;;;;;;;;OAWG;IACU,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC;IAU1C;;;;;;;;;;;;;;OAcG;IACI,GAAG;IAMV;;;OAGG;IACI,cAAc,IAAI,MAAM;IAI/B;;;OAGG;IACH,SAAS,CAAC,MAAM;CAGjB","file":"io.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport { DriveType, PullType } from \"./common\";\n\n/**\n * General purpose IO\n * This is available on each io (for obniz Board series, it's io0 to io11)\n * @category Peripherals\n */\nexport default class PeripheralIO extends ComponentAbstract {\n  private value!: boolean;\n  private onchange?: (value: boolean) => void;\n  private id: number;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n\n    this.on(\"/response/io/get\", (obj) => {\n      this.value = obj;\n      this.Obniz._runUserCreatedFunction(this.onchange, obj);\n    });\n\n    this.on(\"/response/io/warning\", (obj) => {\n      this.Obniz.warning({\n        alert: \"warning\",\n        message: `io${this.id}: ${obj.warning.message}`,\n      });\n    });\n\n    this.on(\"/response/io/error\", (obj) => {\n      this.Obniz.error({\n        alert: \"error\",\n        message: `io${this.id}: ${obj.error.message}`,\n      });\n    });\n\n    this._reset();\n  }\n\n  /**\n   * Make ioX to output mode and put out 1 or 0.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.io1.output(true); // io1 is 5v\n   * obniz.io2.output(1); //  io2 is 5v\n   * obniz.io3.drive(\"3v\");\n   * obniz.io3.output(1); // io3 is around 3v.\n   * ```\n   *\n   * @param value output value\n   */\n  public output(value: boolean | 0 | 1) {\n    value = !!value;\n    const obj: any = {};\n    obj[\"io\" + this.id] = value;\n    this.value = value;\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * This allows you to change output drive method.\n   * By default, it is set as push-pull 5v.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.io0.output(true); // output push-pull 5v\n   *\n   * obniz.io1.drive(\"3v\");\n   * obniz.io1.output(true); // output push-pull 3v\n   *\n   * obniz.io2.pull(\"5v\");\n   * obniz.io2.drive(\"open-drain\");\n   * obniz.io2.output(true); // output open-drain with 5v pull-up\n   * ```\n   *\n   * @param drive\n   *\n   */\n  public drive(drive: DriveType) {\n    if (typeof drive !== \"string\") {\n      throw new Error(\"please specify drive methods in string\");\n    }\n    let output_type: any = \"\";\n    switch (drive) {\n      case \"5v\":\n        output_type = \"push-pull5v\";\n        break;\n      case \"3v\":\n        output_type = \"push-pull3v\";\n        break;\n      case \"open-drain\":\n        output_type = \"open-drain\";\n        break;\n      default:\n        throw new Error(\"unknown drive method\");\n    }\n\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      output_type,\n    };\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * This enables/disables internal weak pull up/down resistors.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.io0.pull(\"3v\");\n   * obniz.io0.drive(\"open-drain\"); // output open-drain\n   * obniz.io0.output(false);\n   * ```\n   *\n   * @param updown\n   *\n   */\n  public pull(updown: PullType) {\n    if (typeof updown !== \"string\" && updown !== null) {\n      throw new Error(\"please specify pull methods in string\");\n    }\n    let pull_type: any = \"\";\n    switch (updown) {\n      case \"5v\":\n        pull_type = \"pull-up5v\";\n        break;\n      case \"3v\":\n        pull_type = \"pull-up3v\";\n        break;\n      case \"0v\":\n        pull_type = \"pull-down\";\n        break;\n      case null:\n        pull_type = \"float\";\n        break;\n      default:\n        throw new Error(\"unknown pull_type method\");\n    }\n\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      pull_type,\n    };\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * Make ioX to input mode.\n   * Callback function will be called when io changes its input value.\n   *\n   *\n   * @param callback\n   */\n  public input(callback: (value: boolean) => void) {\n    this.onchange = callback;\n    const obj: any = {};\n    obj[\"io\" + this.id] = {\n      direction: \"input\",\n      stream: true,\n    };\n    this.Obniz.send(obj);\n    return this.value;\n  }\n\n  /**\n   * Make ioX to input mode.\n   *\n   * And this will return the current input value.\n   * It pauses the process until the value is returned.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var value = await obniz.io0.inputWait();\n   * console.log(value);\n   * ```\n   */\n  public async inputWait(): Promise<boolean> {\n    const obj: any = {};\n    obj[this.schemaBasePath()] = {\n      direction: \"input\",\n      stream: false,\n    };\n    const data = await this.sendAndReceiveJsonWait(obj, \"/response/io/get\");\n    return data;\n  }\n\n  /**\n   * This ends output/input on ioX.\n   *\n   *\n   * This function is effective only when using ioX.output() or ioX.input().\n   * This won't be called when AD/UART/etc are used.\n   * Pull-up down also will not affected.\n   *\n   * ```\n   * // Javascript Example\n   * obniz.io0.output(true)\n   * obniz.io0.end();\n   * ```\n   *\n   */\n  public end() {\n    const obj: any = {};\n    obj[\"io\" + this.id] = null;\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public schemaBasePath(): string {\n    return \"io\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.value = false;\n  }\n}\n"]}