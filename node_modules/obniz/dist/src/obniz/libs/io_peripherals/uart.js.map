{"version":3,"sources":["../src/obniz/libs/io_peripherals/uart.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;AAGH,0DAAwD;AACxD,yDAAsC;AAmEtC;;;GAGG;AACH,MAAqB,cAAe,SAAQ,oCAAiB;IAkC3D,YAAY,KAAY,EAAE,EAAU;QAClC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAEb,IAAI,CAAC,EAAE,CAAC,wBAAwB,EAAE,CAAC,GAAG,EAAE,EAAE;YACxC,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,MAAM,MAAM,GAAQ,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;aACtE;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;oBAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;iBACpB;gBACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;aACnD;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,MAA6B;QACxC,MAAM,GAAG,GAAQ,cAAS,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC/D,IAAI,GAAG,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,GAAG,GAAG,4BAA4B,CAAC,CAAC;SAC5E;QACD,IAAI,CAAC,MAAM,GAAG,cAAS,CAAC,UAAU,CAAC,MAAM,EAAE;YACzC,IAAI;YACJ,IAAI;YACJ,MAAM;YACN,MAAM;YACN,MAAM;YACN,QAAQ;YACR,aAAa;YACb,KAAK;YACL,KAAK;YACL,OAAO;YACP,MAAM;YACN,KAAK;SACN,CAAC,CAAC;QAEH,MAAM,MAAM,GAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACtD,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;YACxB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC/D,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,GAAG,GAAG,yBAAyB,CAAC,CAAC;aACzE;SACF;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC1D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC3D;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC9C;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;YACtC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACzD;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7C;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,OAAO,GAAQ,EAAE,CAAC;YACxB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YACjC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;aAC3D;SACF;QAED,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,MAAM,UAAU,GAAQ,cAAS,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE;YACxD,IAAI;YACJ,IAAI;YACJ,MAAM;YACN,MAAM;YACN,MAAM;YACN,QAAQ;YACR,aAAa;YACb,KAAK;YACL,KAAK;SACN,CAAC,CAAC;QACH,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC;QACnC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACI,IAAI,CAAC,IAAyC;QACnD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,EAAE,iBAAiB,CAAC,CAAC;SAClD;QACD,IAAI,SAAS,GAAQ,IAAI,CAAC;QAC1B,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,OAAO;SACR;QACD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;SACf;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,IAAI,YAAY,MAAM,EAAE;YAC/C,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;SACvB;aAAM,IAAI,IAAI,CAAC,WAAW,KAAK,KAAK,EAAE;YACrC,SAAS,GAAG,IAAI,CAAC;SAClB;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YACnC,MAAM,GAAG,GAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,SAAS,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;SACtB;QACD,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;QAC3B,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,SAAS,CAAC;QACvC,qBAAqB;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACI,YAAY;QACjB,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACI,SAAS;QACd,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC7C,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;aAChC;SACF;QACD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACI,QAAQ;QACb,MAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACvB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACI,QAAQ;QACb,IAAI,MAAM,GAAkB,IAAI,CAAC;QACjC,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACvB,MAAM,IAAI,GAAQ,IAAI,CAAC,SAAS,EAAE,CAAC;YACnC,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,MAAM;QACX,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;;;;;;;OASG;IACI,GAAG;QACR,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACI,gBAAgB,CAAC,IAAc;QACpC,OAAO,cAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACI,cAAc;QACnB,OAAO,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACO,MAAM;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;CACF;AA/UD,iCA+UC","file":"uart.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport ObnizUtil from \"../utils/util\";\nimport { BitType, DriveType, FlowControlType, ParityType, PullType, StopBitType } from \"./common\";\n\nexport interface PeripheralUARTOptions {\n  /**\n   *  Pin no of tx is used for sending data from obniz Board to parts.\n   */\n  tx: number;\n\n  /**\n   * Pin no of used for receiving data from parts to obniz Board.\n   */\n  rx: number;\n\n  /**\n   * Gnd pin no\n   */\n  gnd?: number;\n\n  /**\n   * Uart baud rate. efault is 115200bps\n   */\n  baud?: number;\n\n  /**\n   * Uart stop bit type.\n   * Default is 1 Stop bit\n   */\n  stop?: StopBitType;\n\n  /**\n   * Uart bits. Default is 8bit\n   */\n  bits?: BitType;\n\n  /**\n   * Uart parity check. Default is \"off\"\n   */\n  parity?: ParityType;\n\n  /**\n   * Uart flow control type.\n   * Default is off.\n   */\n  flowcontrol?: FlowControlType;\n\n  /**\n   * Pin no of rts\n   */\n  rts?: number;\n\n  /**\n   * Pin no of cts\n   */\n  cts?: number;\n\n  /**\n   * Pin drive type.\n   */\n  drive?: DriveType;\n\n  /**\n   * Pin pull type\n   */\n  pull?: PullType;\n}\n\n/**\n * Uart module\n * @category Peripherals\n */\nexport default class PeripheralUART extends ComponentAbstract {\n  public received: any;\n\n  /**\n   * @ignore\n   */\n  public used!: boolean;\n\n  /**\n   * It is called when data is received.\n   * Data is array of bytes.\n   * Text is the same data but in text representation.\n   *\n   *\n   * So, if obniz Board receives 'A'.\n   * - Data is [0x41]\n   * - Text is \"A\"\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.uart0.start({tx:0, rx:1})\n   * obniz.uart0.onreceive = function(data, text) {\n   *   console.log(data);\n   *   console.log(text);\n   * }\n   * obniz.uart0.send(\"Hello\");\n   * ```\n   *\n   */\n  public onreceive?: (data: number[], text: string) => void;\n\n  private id: number;\n  private params: any;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n\n    this.on(\"/response/uart/receive\", (obj) => {\n      if (this.onreceive) {\n        const string: any = this.tryConvertString(obj.data);\n        this.Obniz._runUserCreatedFunction(this.onreceive, obj.data, string);\n      } else {\n        if (!this.received) {\n          this.received = [];\n        }\n        this.received.push.apply(this.received, obj.data);\n      }\n    });\n    this._reset();\n  }\n\n  /**\n   * It starts uart on io tx, rx.\n   *\n   * You can start uart without much configuration. Just use as below.\n   * @param params\n   */\n  public start(params: PeripheralUARTOptions) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"tx\", \"rx\"]);\n    if (err) {\n      throw new Error(\"uart start param '\" + err + \"' required, but not found \");\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"tx\",\n      \"rx\",\n      \"baud\",\n      \"stop\",\n      \"bits\",\n      \"parity\",\n      \"flowcontrol\",\n      \"rts\",\n      \"cts\",\n      \"drive\",\n      \"pull\",\n      \"gnd\",\n    ]);\n\n    const ioKeys: any = [\"rx\", \"tx\", \"rts\", \"cts\", \"gnd\"];\n    for (const key of ioKeys) {\n      if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {\n        throw new Error(\"uart start param '\" + key + \"' are to be valid io no\");\n      }\n    }\n\n    if (this.params.hasOwnProperty(\"drive\")) {\n      this.Obniz.getIO(this.params.rx).drive(this.params.drive);\n      this.Obniz.getIO(this.params.tx).drive(this.params.drive);\n    } else {\n      this.Obniz.getIO(this.params.rx).drive(\"5v\");\n      this.Obniz.getIO(this.params.tx).drive(\"5v\");\n    }\n\n    if (this.params.hasOwnProperty(\"pull\")) {\n      this.Obniz.getIO(this.params.rx).pull(this.params.pull);\n      this.Obniz.getIO(this.params.tx).pull(this.params.pull);\n    } else {\n      this.Obniz.getIO(this.params.rx).pull(null);\n      this.Obniz.getIO(this.params.tx).pull(null);\n    }\n\n    if (this.params.hasOwnProperty(\"gnd\")) {\n      this.Obniz.getIO(this.params.gnd).output(false);\n      const ioNames: any = {};\n      ioNames[this.params.gnd] = \"gnd\";\n      if (this.Obniz.display) {\n        this.Obniz.display.setPinNames(\"uart\" + this.id, ioNames);\n      }\n    }\n\n    const obj: any = {};\n    const sendParams: any = ObnizUtil._keyFilter(this.params, [\n      \"tx\",\n      \"rx\",\n      \"baud\",\n      \"stop\",\n      \"bits\",\n      \"parity\",\n      \"flowcontrol\",\n      \"rts\",\n      \"cts\",\n    ]);\n    obj[\"uart\" + this.id] = sendParams;\n    this.Obniz.send(obj);\n    this.received = [];\n    this.used = true;\n  }\n\n  /**\n   * This sends data.\n   *\n   * Available formats are\n   *\n   * - string\n   * utf8 encoded byte array. Does not include null terminate\n   *\n   * - number\n   * will be one byte data\n   *\n   * - array of number\n   * array of bytes\n   *\n   * - Buffer\n   * array of bytes\n   *\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.uart0.start({tx:0, rx:1})\n   * obniz.uart0.send(\"Hi\");\n   * obniz.uart0.send(0x11);\n   * obniz.uart0.send([0x11, 0x45, 0x44]);\n   * ```\n   * @param data\n   */\n  public send(data: string | number | number[] | Buffer) {\n    if (!this.used) {\n      throw new Error(`uart${this.id} is not started`);\n    }\n    let send_data: any = null;\n    if (data === undefined) {\n      return;\n    }\n    if (typeof data === \"number\") {\n      data = [data];\n    }\n    if (this.Obniz.isNode && data instanceof Buffer) {\n      send_data = [...data];\n    } else if (data.constructor === Array) {\n      send_data = data;\n    } else if (typeof data === \"string\") {\n      const buf: any = Buffer.from(data);\n      send_data = [...buf];\n    }\n    const obj: any = {};\n    obj[\"uart\" + this.id] = {};\n    obj[\"uart\" + this.id].data = send_data;\n    //  console.log(obj);\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * It checks if there are data received but not yet used.\n   * If there are, it returns true.\n   *\n   * If you are using onreceive callback, it will always be false because you receive the data with the callback function as the data arrives.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.uart0.start({tx:0, rx:1})\n   *\n   * while(1){\n   *   if(obniz.uart0.isDataExists()){\n   *      console.log(obniz.uart0.readText());\n   *   }\n   *   await obniz.wait(10);  //wait for 10ms\n   * }\n   * ```\n   *\n   */\n  public isDataExists(): boolean {\n    return this.received && this.received.length > 0;\n  }\n\n  /**\n   * It returns the data array that are received but not yet used.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.uart0.start({tx:0, rx:1})\n   *\n   * while(1){\n   *   if(obniz.uart0.isDataExists()){\n   *      console.log(obniz.uart0.readBytes());\n   *   }\n   *   await obniz.wait(10);  //wait for 10ms\n   * }\n   * ```\n   * @return received data. If not exist data, return [].\n   */\n  public readBytes(): number[] {\n    const results: number[] = [];\n    if (this.isDataExists()) {\n      for (let i = 0; i < this.received.length; i++) {\n        results.push(this.received[i]);\n      }\n    }\n    this.received = [];\n    return results;\n  }\n\n  /**\n   * It returns the one byte that are received but not yet used.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.uart0.start({tx:0, rx:1})\n   *\n   * while(1){\n   *    if(obniz.uart0.isDataExists()){\n   *      console.log(obniz.uart0.readBytes());\n   *    }\n   *    await obniz.wait(10);  //wait for 10ms\n   * }\n   * ```\n   *\n   * @return received data. If not exist data, return null.\n   */\n  public readByte(): number | null {\n    const results: any = [];\n    if (this.isDataExists()) {\n      return results.unshift();\n    }\n    return null;\n  }\n\n  /**\n   * It returns the data that are received but not yet used as string.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.uart0.start({tx:0, rx:1})\n   *\n   * while(1){\n   *   if(obniz.uart0.isDataExists()){\n   *     console.log(obniz.uart0.readText());\n   *   }\n   *   await obniz.wait(10);  //wait for 10ms\n   * }\n   * ```\n   *\n   * @return received text data. If not exist data, return null.\n   */\n  public readText(): string | null {\n    let string: string | null = null;\n    if (this.isDataExists()) {\n      const data: any = this.readBytes();\n      string = this.tryConvertString(data);\n    }\n    this.received = [];\n    return string;\n  }\n\n  /**\n   * @ignore\n   */\n  public isUsed(): boolean {\n    return this.used;\n  }\n\n  /**\n   * It stops uart and releases io.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.uart0.start({tx:0, rx:1})\n   * obniz.uart0.send(\"Hi\");\n   * obniz.uart0.end();\n   * ```\n   */\n  public end() {\n    const obj: any = {};\n    obj[\"uart\" + this.id] = null;\n    this.params = null;\n    this.Obniz.send(obj);\n    this.used = false;\n  }\n\n  /**\n   * Convert data array to string.\n   *\n   * @param data data array\n   *\n   * @return converted string. If convert failed, return null.\n   */\n  public tryConvertString(data: number[]): string | null {\n    return ObnizUtil.dataArray2string(data);\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public schemaBasePath(): string {\n    return \"uart\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.received = new Uint8Array([]);\n    this.used = false;\n  }\n}\n"]}