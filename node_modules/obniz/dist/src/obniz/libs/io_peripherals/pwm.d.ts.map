{"version":3,"sources":["../src/obniz/libs/io_peripherals/pwm.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAE/C,UAAU,oBAAoB;IAC5B;;OAEG;IACH,EAAE,EAAE,MAAM,CAAC;IAEX,KAAK,CAAC,EAAE,SAAS,CAAC;IAClB,IAAI,CAAC,EAAE,QAAQ,CAAC;CACjB;AAED,MAAM,WAAW,YAAY;IAC3B,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,KAAK,IAAI,CAAC;IAClC,KAAK,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IAC/B,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;CAC/B;AAED;;;;GAIG;AACH,oBAAY,eAAe,GAAG,IAAI,CAAC;AAEnC;;;;GAIG;AACH,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,iBAAkB,YAAW,YAAY;IAClF;;OAEG;IACI,IAAI,EAAE,GAAG,CAAC;IACjB,OAAO,CAAC,EAAE,CAAS;IACnB,OAAO,CAAC,KAAK,CAAM;IACnB,OAAO,CAAC,MAAM,CAAM;gBAER,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAOpC;;;;;;;;;;;;;;;;;;OAkBG;IACI,KAAK,CAAC,MAAM,EAAE,oBAAoB;IAuBzC;;;;;;;;;;;;;;OAcG;IACI,IAAI,CAAC,IAAI,EAAE,MAAM;IAiBxB;;;;;;;;;;;;OAYG;IACI,KAAK,CAAC,WAAW,EAAE,MAAM;IAYhC;;;;;;;;;;;;OAYG;IACI,IAAI,CAAC,IAAI,EAAE,MAAM;IAwBxB;;OAEG;IACI,MAAM;IAIb;;;;;;;;;OASG;IACI,GAAG;IAMV;;;;;;;;;;;;;;;;;;;;;OAqBG;IACI,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE;IAa5E;;;OAGG;IACI,cAAc,IAAI,MAAM;IAI/B;;;OAGG;IACH,SAAS,CAAC,MAAM;IAKhB,OAAO,CAAC,MAAM;CAKf","file":"pwm.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport ObnizUtil from \"../utils/util\";\nimport { DriveType, PullType } from \"./common\";\n\ninterface PeripheralPWMOptions {\n  /**\n   * device io number\n   */\n  io: number;\n\n  drive?: DriveType;\n  pull?: PullType;\n}\n\nexport interface PWMInterface {\n  freq: (frequency: number) => void;\n  pulse: (value: number) => void;\n  duty: (value: number) => void;\n}\n\n/**\n * Modulate type.\n *\n * Currently only \"am\" are supported\n */\nexport type PWMModulateType = \"am\";\n\n/**\n * We will now generate PWM.\n * Maximum current depends on the driving mode. See [[PeripheralIO|io]].\n * @category Peripherals\n */\nexport default class PeripheralPWM extends ComponentAbstract implements PWMInterface {\n  /**\n   * @ignore\n   */\n  public used: any;\n  private id: number;\n  private state: any;\n  private params: any;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n\n    this._reset();\n  }\n\n  /**\n   * This starts a pwm on a given io.\n   * freq=1khz, duty=0% at start.\n   *\n   * io drive and pull can be configured. See more details on [[PeripheralIO|io]]\n   *\n   * ```javascript\n   * // Javascript Example\n   * var pwm = obniz.getFreePwm();\n   * pwm.start({io:0}); // start pwm. output at io0\n   * pwm.freq(1000);\n   * pwm.duty(50);\n   *\n   * var pwm2 = obniz.getFreePwm();\n   * pwm2.start({io:1, drive:\"open-drain\", pull:\"5v\"});\n   * ```\n   *\n   * @param params\n   */\n  public start(params: PeripheralPWMOptions) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"io\"]);\n    if (err) {\n      throw new Error(\"pwm start param '\" + err + \"' required, but not found \");\n    }\n    this.params = ObnizUtil._keyFilter(params, [\"io\", \"drive\", \"pull\"]);\n\n    const io: any = this.params.io;\n    const ioObj: any = this.Obniz.getIO(io);\n\n    ioObj.drive(this.params.drive || \"5v\");\n    ioObj.pull(this.params.pull || null);\n\n    this.state = {\n      io,\n      freq: 1000,\n    };\n    this.sendWS({\n      io,\n    });\n    this.used = true;\n  }\n\n  /**\n   * Set frequency, not pulse duration.\n   *\n   *\n   * For example, this value will be 1khz with DC motor.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var pwm = obniz.getFreePwm();\n   * pwm.start({io:0});\n   * pwm.freq(1000); // set pwm. frequency to 1khz\n   * ```\n   *\n   * @param freq frequency (Hz)\n   */\n  public freq(freq: number) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n    freq *= 1;\n    if (typeof freq !== \"number\") {\n      throw new Error(\"please provide freq in number\");\n    }\n    this.state.freq = freq;\n    this.sendWS({\n      freq,\n    });\n    if (typeof this.state.duty === \"number\") {\n      this.duty(this.state.duty);\n    }\n  }\n\n  /**\n   * Set pulse duty\n   *\n   * ```javascript\n   * // Javascript Example\n   * var pwm = obniz.getFreePwm();\n   * pwm.start({io:0});\n   * pwm.freq(2000); // set pwm frequency to 2khz\n   * pwm.pulse(0.5) // set pwm pulse 0.5ms.  so this is  25% ratio.\n   * ```\n   *\n   * @param pulse_width pulse time (ms).\n   */\n  public pulse(pulse_width: number) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n\n    this.state.pulse = pulse_width;\n    delete this.state.duty;\n    this.sendWS({\n      pulse: pulse_width,\n    });\n  }\n\n  /**\n   * Set pulse duty in terms of ratio.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var pwm = obniz.getFreePwm();\n   * pwm.start({io:0});\n   * pwm.freq(2000); // set pwm frequency to 2khz\n   * pwm.duty(50) // set pwm pulse width 50%\n   * ```\n   *\n   * @param duty\n   */\n  public duty(duty: number) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n    duty *= 1;\n    if (typeof this.state.freq !== \"number\" || this.state.freq <= 0) {\n      throw new Error(\"please provide freq first.\");\n    }\n    if (typeof duty !== \"number\") {\n      throw new Error(\"please provide duty in number\");\n    }\n    if (duty < 0) {\n      duty = 0;\n    }\n    if (duty > 100) {\n      duty = 100;\n    }\n    const pulse_width: any = (1.0 / this.state.freq) * 1000 * duty * 0.01;\n    this.state.duty = duty;\n    this.sendWS({\n      pulse: pulse_width,\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public isUsed() {\n    return this.used;\n  }\n\n  /**\n   * It stops pwm and releases io.\n   *\n   * ```javascript\n   * // Javascript Example\n   * var pwm = obniz.getFreePwm();\n   * pwm.start({io:0});\n   * pwm.end();\n   * ```\n   */\n  public end() {\n    this.state = {};\n    this.sendWS(null);\n    this.used = false;\n  }\n\n  /**\n   * This modulates pwm with data.\n   *\n   * Modulation can be chosen from below.\n   *\n   * 1. \"am\"\n   *\n   * ### am modulation\n   * data \"1\" means put out the pwm with duty ratio of 50%. \"0\" means stop pwm. io will be 0.\n   * Interval defines the symbol baud rate.\n   * Duty is fixed at 50%.\n   *\n   *\n   * ![](media://pwm_modu.png)\n   *\n   * This is useful to generate IR signal (Remote control).\n   * Frequency of 38kHz gets modulated with signals.\n   *\n   * @param type\n   * @param symbol_length\n   * @param data data array. All data[index] is 0 or 1.\n   */\n  public modulate(type: PWMModulateType, symbol_length: number, data: number[]) {\n    if (!this.used) {\n      throw new Error(`pwm${this.id} is not started`);\n    }\n    this.sendWS({\n      modulate: {\n        type,\n        symbol_length,\n        data,\n      },\n    });\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public schemaBasePath(): string {\n    return \"pwm\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.state = {};\n    this.used = false;\n  }\n\n  private sendWS(obj: any) {\n    const wsObj: any = {};\n    wsObj[\"pwm\" + this.id] = obj;\n    this.Obniz.send(wsObj);\n  }\n}\n"]}