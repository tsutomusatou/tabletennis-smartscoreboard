{"version":3,"sources":["../src/obniz/libs/io_peripherals/spi.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAE/C,UAAU,oBAAoB;IAC5B;;;;OAIG;IACH,IAAI,EAAE,QAAQ,CAAC;IAEf;;OAEG;IACH,GAAG,CAAC,EAAE,MAAM,CAAC;IAEb;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;IAElB,KAAK,CAAC,EAAE,SAAS,CAAC;IAElB,IAAI,CAAC,EAAE,QAAQ,CAAC;IAEhB;;OAEG;IACH,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED;;;GAGG;AACH,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,iBAAiB;IAC1D;;OAEG;IACI,IAAI,EAAG,OAAO,CAAC;IACtB,OAAO,CAAC,EAAE,CAAS;IAEnB,OAAO,CAAC,MAAM,CAA+B;gBAEjC,KAAK,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM;IAMpC;;;;;;;;;;;;;;;;;;;OAmBG;IACI,KAAK,CAAC,MAAM,EAAE,oBAAoB;IA8FzC;;;;;;;;;;;;;;OAcG;IACU,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAmBzD;;;;;;;;;;OAUG;IACI,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE;IAmB3B;;OAEG;IACI,MAAM;IAIb;;;;;;;;;;;;;OAaG;IACI,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO;IAW1B;;;OAGG;IACI,cAAc,IAAI,MAAM;IAI/B;;;OAGG;IACH,SAAS,CAAC,MAAM;CAIjB","file":"spi.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore.Components\n */\n\nimport semver from \"semver\";\nimport Obniz from \"../../index\";\nimport { ComponentAbstract } from \"../ComponentAbstact\";\nimport ObnizUtil from \"../utils/util\";\nimport { DriveType, PullType } from \"./common\";\n\ninterface PeripheralSPIOptions {\n  /**\n   * SPI mode\n   *\n   * currently only \"master\" is supported\n   */\n  mode: \"master\";\n\n  /**\n   * clock pin no\n   */\n  clk?: number;\n\n  /**\n   * mosi pin no\n   */\n  mosi?: number;\n\n  /**\n   * miso pin no\n   */\n  miso?: number;\n\n  /**\n   * frequency (Hz)\n   */\n  frequency: number;\n\n  drive?: DriveType;\n\n  pull?: PullType;\n\n  /**\n   * gnd pin no\n   */\n  gnd?: number;\n}\n\n/**\n * It is General Purpose SPI\n * @category Peripherals\n */\nexport default class PeripheralSPI extends ComponentAbstract {\n  /**\n   * @ignore\n   */\n  public used!: boolean;\n  private id: number;\n\n  private params!: PeripheralSPIOptions | null;\n\n  constructor(obniz: Obniz, id: number) {\n    super(obniz);\n    this.id = id;\n    this._reset();\n  }\n\n  /**\n   * It starts spi. Now the mode is only \"master\".\n   *\n   *\n   * drive and pull are optional settings for io output.\n   * Default settings are drive:5v, pull:null.\n   * See more using obniz.io.drive() or pull().\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.spi0.start({mode:\"master\", clk :0, mosi:1, miso:2, frequency:1000000});\n   * var ret = await obniz.spi0.writeWait([0x12, 0x98]);\n   * console.log(\"received: \"+ret);\n   *\n   * // drive and pull is optional\n   * obniz.spi0.start({mode:\"master\", clk :0, mosi:1, miso:2, frequency:1000000, drive: \"5v\", pull:null});\n   * ```\n   *\n   * @param params spi parameters\n   */\n  public start(params: PeripheralSPIOptions) {\n    const err: any = ObnizUtil._requiredKeys(params, [\"mode\", \"frequency\"]);\n    if (err) {\n      throw new Error(\"spi start param '\" + err + \"' required, but not found \");\n    }\n    this.params = ObnizUtil._keyFilter(params, [\n      \"mode\",\n      \"clk\",\n      \"mosi\",\n      \"miso\",\n      \"frequency\",\n      \"drive\",\n      \"pull\",\n      \"gnd\",\n    ]) as PeripheralSPIOptions;\n    const obj: any = {};\n\n    const ioKeys: Array<keyof PeripheralSPIOptions> = [\"clk\", \"mosi\", \"miso\", \"gnd\"];\n    for (const key of ioKeys) {\n      if (this.params[key] && !this.Obniz.isValidIO(this.params[key])) {\n        throw new Error(\"spi start param '\" + key + \"' are to be valid io no\");\n      }\n    }\n\n    obj[\"spi\" + this.id] = {\n      mode: this.params.mode,\n      clock: this.params.frequency, // name different\n    };\n    if (this.params.clk !== undefined) {\n      obj[\"spi\" + this.id].clk = this.params.clk;\n    }\n    if (this.params.mosi !== undefined) {\n      obj[\"spi\" + this.id].mosi = this.params.mosi;\n    }\n    if (this.params.miso !== undefined) {\n      obj[\"spi\" + this.id].miso = this.params.miso;\n    }\n\n    if (this.params.drive) {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).drive(this.params.drive);\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).drive(this.params.drive);\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).drive(this.params.drive);\n      }\n    } else {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).drive(\"5v\");\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).drive(\"5v\");\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).drive(\"5v\");\n      }\n    }\n\n    if (this.params.pull) {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).pull(this.params.pull);\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).pull(this.params.pull);\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).pull(this.params.pull);\n      }\n    } else {\n      if (this.params.clk !== undefined) {\n        this.Obniz.getIO(this.params.clk).pull(null);\n      }\n      if (this.params.mosi !== undefined) {\n        this.Obniz.getIO(this.params.mosi).pull(null);\n      }\n      if (this.params.miso !== undefined) {\n        this.Obniz.getIO(this.params.miso).pull(null);\n      }\n    }\n\n    if (this.params.gnd !== undefined) {\n      this.Obniz.getIO(this.params.gnd).output(false);\n      const ioNames: any = {};\n      ioNames[this.params.gnd] = \"gnd\";\n      if (this.Obniz.display) {\n        this.Obniz.display.setPinNames(\"spi\" + this.id, ioNames);\n      }\n    }\n    this.used = true;\n    this.Obniz.send(obj);\n  }\n\n  /**\n   * It sends data to spi and wait until data are received.\n   * The received data length is the same as the sent data.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.spi0.start({mode:\"master\", clk :0, mosi:1, miso:2, frequency:1000000});\n   * var ret = await obniz.spi0.writeWait([0x12, 0x98]);\n   * console.log(\"received: \"+ret);\n   * ```\n   *\n   *\n   * @param data Max length is 1024 bytes.\n   * @return received data\n   */\n  public async writeWait(data: number[]): Promise<number[]> {\n    if (!this.used) {\n      throw new Error(`spi${this.id} is not started`);\n    }\n    if (semver.lte(this.Obniz.firmware_ver!, \"1.0.2\") && data.length > 32) {\n      throw new Error(\n        `with your obniz ${this.Obniz.firmware_ver}. spi max length=32byte but yours ${data.length}. Please update obniz firmware`,\n      );\n    }\n\n    const obj: any = {};\n    obj[\"spi\" + this.id] = {\n      data,\n      read: true,\n    };\n    const receiveData = await this.sendAndReceiveJsonWait(obj, \"/response/spi/read\");\n    return receiveData.data;\n  }\n\n  /**\n   * It only sends data to spi and does not receive it.\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.spi0.start({mode:\"master\", clk :0, mosi:1, miso:2, frequency:1000000});\n   * obniz.spi0.write([0x12, 0x98]);\n   * ```\n   *\n   * @param data Max length is 1024 bytes.\n   */\n  public write(data: number[]) {\n    if (!this.used) {\n      throw new Error(`spi${this.id} is not started`);\n    }\n    if (semver.lte(this.Obniz.firmware_ver!, \"1.0.2\") && data.length > 32) {\n      throw new Error(\n        `with your obniz ${this.Obniz.firmware_ver}. spi max length=32byte but yours ${data.length}. Please update obniz firmware`,\n      );\n    }\n\n    const self: any = this;\n    const obj: any = {};\n    obj[\"spi\" + self.id] = {\n      data,\n      read: false,\n    };\n    self.Obniz.send(obj);\n  }\n\n  /**\n   * @ignore\n   */\n  public isUsed() {\n    return this.used;\n  }\n\n  /**\n   * It ends spi\n   *\n   * ```javascript\n   * // Javascript Example\n   * obniz.spi0.start({mode:\"master\", clk :0, mosi:1, miso:2, clock:1000000});\n   * obniz.spi0.write([0x12, 0x98]);\n   * obniz.spi0.end();\n   * ```\n   *\n   * @param reuse\n   * - True : getFreeSpi will not return this object\n   * - False : getFreeSpi will return this object\n   */\n  public end(reuse?: boolean) {\n    const self: any = this;\n    const obj: any = {};\n    obj[\"spi\" + self.id] = null;\n    this.params = null;\n    self.Obniz.send(obj);\n    if (!reuse) {\n      this.used = false;\n    }\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public schemaBasePath(): string {\n    return \"spi\" + this.id;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  protected _reset() {\n    this.used = false;\n    this.params = null;\n  }\n}\n"]}