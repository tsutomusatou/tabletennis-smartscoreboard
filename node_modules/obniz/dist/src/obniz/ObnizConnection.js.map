{"version":3,"sources":["../src/obniz/ObnizConnection.ts"],"names":[],"mappings":"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","file":"ObnizConnection.js","sourcesContent":["/**\n * @packageDocumentation\n * @module ObnizCore\n */\n\nimport EventEmitter from \"eventemitter3\";\nimport wsClient from \"ws\";\n\n// @ts-ignore\nimport packageJson from \"../../package\"; // pakcage.js will be created from package.json on build.\nimport WSCommand from \"./libs/wscommand\";\nimport { ObnizOfflineError } from \"./ObnizError\";\nimport { ObnizOptions } from \"./ObnizOptions\";\nimport Timeout = NodeJS.Timeout;\n\nexport type ObnizConnectionEventNames = \"connect\" | \"close\" | \"notify\";\n\nexport default abstract class ObnizConnection extends EventEmitter<ObnizConnectionEventNames> {\n  /**\n   * obniz.js version\n   */\n  static get version() {\n    return packageJson.version;\n  }\n\n  /**\n   * @ignore\n   * @constructor\n   */\n  static get WSCommand() {\n    return WSCommand;\n  }\n\n  /**\n   * This lets obniz.js to show logs like communicated jsons and connection logs in console.log.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   * obniz.debugprint = true\n   * obniz.onconnect = async function() {\n   *  obniz.io0.output(true);\n   * }\n   * ```\n   */\n  public debugprint: boolean;\n\n  /**\n   * @ignore\n   */\n  public debugprintBinary: boolean;\n\n  /**\n   * This variable indicate connected hardware identifier of target device\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   * obniz.debugprint = true\n   * obniz.onconnect = async function() {\n   *   console.log(obniz.hw) // ex. \"obnizb1\"\n   * }\n   * ```\n   */\n  public hw?: string;\n\n  /**\n   * This variable indicate installed firmware version of target device\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   * obniz.debugprint = true\n   * obniz.onconnect = async function() {\n   *   console.log(obniz.firmware_ver) // ex. \"2.0.0\"\n   * }\n   * ```\n   */\n  public firmware_ver?: string;\n\n  /**\n   * Is node.js environment or not.\n   * @readonly\n   */\n  public isNode: boolean;\n\n  /**\n   * obniz id\n   */\n  public id: string;\n\n  /**\n   * @ignore\n   */\n  public onopen?: (obniz: this) => void;\n\n  /**\n   * onclose will be called when disconnected.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   * obniz.onconnect = async function() {\n   *\n   * }\n   * obniz.onclose = async function() {\n   *\n   * }\n   * ```\n   */\n  public onclose?: (obniz: this) => void;\n\n  /**\n   * Once connection is established, onconnect function will be called.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   * obniz.onconnect = async function() {\n   *\n   * }\n   * ```\n   *\n   * Operations like turning on/off an io becomes possible only after connection is established,\n   * so any operations you want obniz Board to undertake must be written in onconnect\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   * obniz.onconnect = async function() {\n   *   obniz.io0.output(true);\n   * }\n   * ```\n   */\n  public onconnect?: (obniz: this) => void;\n\n  /**\n   * This let you know connection state to your obniz Board as string value.\n   *\n   * - 'closed' : not connected.\n   * - 'connecting' : connecting\n   * - 'connected' : connection established\n   * - 'closing' : closing connection.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   * console.log(obniz.connectionState) // => === \"connecting\"\n   * obniz.onconnect = async function() {\n   *  console.log(obniz.connectionState) // => === \"connected\"\n   * }\n   * ```\n   *\n   *\n   */\n  public connectionState: \"closed\" | \"connecting\" | \"connected\" | \"closing\";\n  protected socket: any;\n  protected socket_local: any;\n  protected debugs: any;\n  protected bufferdAmoundWarnBytes: number;\n  protected options: any;\n  protected wscommand: any;\n  protected wscommands: any;\n  protected _sendQueueTimer: any;\n  protected _sendQueue: any;\n  protected _waitForLocalConnectReadyTimer: any;\n  protected _connectionRetryCount: number;\n  protected sendPool: any;\n  private _onConnectCalled: boolean;\n  private _looper: any;\n  private _repeatInterval: any;\n  private _nextLoopTimeout?: Timeout;\n  private _nextPingTimeout?: Timeout;\n  private _lastDataReceivedAt: number = 0;\n\n  constructor(id: string, options?: ObnizOptions) {\n    super();\n    this.isNode = typeof window === \"undefined\";\n    this.id = id;\n    this.socket = null;\n    this.socket_local = null;\n    this.debugprint = false;\n    this.debugprintBinary = false;\n    this.debugs = [];\n    this._onConnectCalled = false;\n    this.hw = undefined;\n    this.firmware_ver = undefined;\n    this.connectionState = \"closed\"; // closed/connecting/connected/closing\n    this.bufferdAmoundWarnBytes = 10 * 1000 * 1000; // 10M bytes\n\n    this._connectionRetryCount = 0;\n\n    if (!options) {\n      options = {};\n    }\n    this.options = {\n      binary: options.binary === false ? false : true,\n      local_connect: options.local_connect === false ? false : true,\n      debug_dom_id: options.debug_dom_id || \"obniz-debug\",\n      auto_connect: options.auto_connect === false ? false : true,\n      access_token: options.access_token || null,\n      obniz_server: options.obniz_server || \"wss://obniz.io\",\n      reset_obniz_on_ws_disconnection: options.reset_obniz_on_ws_disconnection === false ? false : true,\n    };\n    if (this.options.binary) {\n      this.wscommand = (this.constructor as typeof ObnizConnection).WSCommand;\n      const classes: any = (this.constructor as typeof ObnizConnection).WSCommand.CommandClasses;\n      this.wscommands = [];\n      for (const class_name in classes) {\n        this.wscommands.push(\n          new classes[class_name]({\n            hw: {\n              firmware: undefined,\n              model: \"obniz_board\",\n            },\n            delegate: undefined,\n          }),\n        );\n      }\n    }\n    if (this.options.auto_connect) {\n      this.wsconnect();\n    }\n  }\n\n  /**\n   * With this you wait until the connection to obniz Board succeeds.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   *\n   * await obniz.connectWait();\n   *\n   * obniz.io0.output(true);\n   * obniz.close();\n   *\n   * ```\n   *\n   *\n   * - with timeout\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678');\n   *\n   * await obniz.connectWait({timeout:10});  //timeout 10sec\n   *\n   * if(connected){\n   *    obniz.io0.output(true);\n   *    obniz.close();\n   * }\n   * ```\n   *\n   * - with auto_connect:false\n   *\n   * If the param auto_connect is set as false, it will try to connect only once and, if unsuccessful, return false.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678',{auto_connect: false});\n   *\n   * var connected = await obniz.connectWait();  //try once\n   *\n   * if(connected){\n   *   obniz.io0.output(true);\n   *   obniz.close();\n   * }\n   * ```\n   *\n   * @param option.timeout timeout in seconds\n   * @return False will be returned when connection is not established within a set timeout.\n   */\n  public connectWait(option?: { timeout?: number }): Promise<boolean> {\n    option = option || {};\n    const timeout: any = option.timeout || null;\n\n    return new Promise((resolve: any, reject: any) => {\n      if (this._onConnectCalled) {\n        resolve(true);\n        return;\n      }\n      this.once(\"connect\", () => {\n        resolve(true);\n      });\n\n      if (timeout) {\n        setTimeout(() => {\n          resolve(false);\n        }, timeout * 1000);\n      }\n      if (!this.options.auto_connect) {\n        this.once(\"close\", () => {\n          resolve(false);\n        });\n        this.connect();\n      }\n    });\n  }\n\n  /**\n   * You can connect to obniz Board manually by calling connect() when auto_connect is set to be false.\n   *\n   * ```javascript\n   * var obniz = new Obniz('1234-5678', { auto_connect: false });\n   *\n   * obniz.connect();\n   * obniz.onconnect = async function() {\n   *  obniz.io0.output(true);\n   * }\n   * ```\n   */\n  public connect() {\n    if (this.socket && this.socket.readyState <= 1) {\n      return;\n    }\n    this.wsconnect();\n  }\n\n  public close() {\n    this._drainQueued();\n    this._disconnectLocal();\n    if (this.socket) {\n      if (this.socket.readyState <= 1) {\n        // Connecting & Connected\n        this.connectionState = \"closing\";\n        this.socket.close(1000, \"close\");\n      }\n      this.clearSocket(this.socket);\n      delete this.socket;\n    }\n    if (this._nextLoopTimeout) {\n      clearTimeout(this._nextLoopTimeout);\n      this._nextLoopTimeout = undefined;\n    }\n    this.connectionState = \"closed\";\n    this._onConnectCalled = false;\n  }\n\n  /**\n   * Send json/binary data to obniz Cloud or device.\n   *\n   * @param obj send data\n   * @param options send option\n   * @param options.local_connect If false, send data via gloval internet.\n   */\n  public send(obj: object | object[], options?: { local_connect?: boolean; connect_check?: boolean }) {\n    options = options || {};\n    options.local_connect = options.local_connect !== false;\n    options.connect_check = options.connect_check !== false;\n\n    if (options.connect_check && this.connectionState !== \"connected\") {\n      throw new ObnizOfflineError();\n    }\n    try {\n      if (!obj || typeof obj !== \"object\") {\n        this.log(\"obnizjs. didnt send \", obj);\n        return;\n      }\n      if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n          this.send(obj[i]);\n        }\n        return;\n      }\n      if (this.sendPool) {\n        this.sendPool.push(obj);\n        return;\n      }\n\n      let sendData: any = JSON.stringify([obj]);\n      if (this.debugprint) {\n        this.print_debug(\"send: \" + sendData);\n      }\n\n      /* compress */\n      if (this.wscommand && options.local_connect) {\n        let compressed: any;\n        try {\n          compressed = this.wscommand.compress(this.wscommands, JSON.parse(sendData)[0]);\n          if (compressed) {\n            sendData = compressed;\n            if (this.debugprintBinary) {\n              this.log(\"binalized: \" + new Uint8Array(compressed).toString());\n            }\n          }\n        } catch (e) {\n          this.error(\"------ errored json -------\");\n          this.error(sendData);\n          throw e;\n        }\n      }\n\n      /* queue sending */\n      if (typeof sendData === \"string\") {\n        this._drainQueued();\n        this._sendRouted(sendData);\n      } else {\n        if (this._sendQueue) {\n          this._sendQueue.push(sendData);\n        } else {\n          this._sendQueue = [sendData];\n          this._sendQueueTimer = setTimeout(this._drainQueued.bind(this), 0);\n        }\n      }\n    } catch (e) {\n      this.log(e);\n    }\n  }\n\n  /**\n   * @ignore\n   * @param msg\n   */\n  public warning(msg: any) {\n    this.log(\"warning:\" + msg);\n  }\n\n  /**\n   * @ignore\n   * @param msg\n   */\n  public error(msg: any) {\n    console.error(`[obniz ${this.id}] error:${msg}`);\n  }\n\n  /**\n   * @ignore\n   */\n  public log(...args: any[]) {\n    console.log(`[obniz ${this.id}]`, ...args);\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  public _runUserCreatedFunction(func?: (...args: any) => any, ...args: any[]) {\n    if (!func) {\n      return;\n    }\n\n    if (typeof func !== \"function\") {\n      return;\n    }\n\n    try {\n      func(...args);\n    } catch (err) {\n      setTimeout(() => {\n        throw err;\n      });\n    }\n  }\n\n  /**\n   * Repeat will call the callback function periodically while it is connected to obniz Board.\n   * It will stop calling once it is disconnected from obniz Board.\n   *\n   * ```javascript\n   * // Javascript Example\n   *  obniz.ad0.start();\n   *  obniz.repeat(function(){\n   *    if (obniz.ad0.value > 2.5) {\n   *      obniz.io0.output(true);\n   *    } else {\n   *      obniz.io0.output(false);\n   *    }\n   *  }, 100)\n   * ```\n   *\n   * @param callback\n   * @param interval  default 100. It mean 100ms interval loop.\n   */\n  public repeat(callback: any, interval: any) {\n    if (this._looper) {\n      this._looper = callback;\n      this._repeatInterval = interval || this._repeatInterval || 100;\n      return;\n    }\n    this._looper = callback;\n    this._repeatInterval = interval || 100;\n  }\n\n  public abstract pingWait(unixtime?: number, rand?: number, forceGlobalNetwork?: boolean): Promise<void>;\n\n  protected wsOnOpen() {\n    this.print_debug(\"ws connected\");\n    this._connectionRetryCount = 0;\n    // wait for {ws:{ready:true}} object\n    if (typeof this.onopen === \"function\") {\n      this.onopen(this);\n    }\n  }\n\n  protected wsOnMessage(data: any) {\n    this._lastDataReceivedAt = new Date().getTime();\n\n    let json: any;\n    if (typeof data === \"string\") {\n      json = JSON.parse(data);\n    } else if (this.wscommands) {\n      if (this.debugprintBinary) {\n        this.log(\"binalized: \" + new Uint8Array(data).toString());\n      }\n      json = this.binary2Json(data);\n    }\n\n    if (Array.isArray(json)) {\n      for (const i in json) {\n        this.notifyToModule(json[i]);\n      }\n    } else {\n      // invalid json\n    }\n  }\n\n  protected wsOnClose(event: any) {\n    this.print_debug(`closed from remote event=${event}`);\n    const beforeOnConnectCalled = this._onConnectCalled;\n    this.close();\n\n    if (beforeOnConnectCalled === true) {\n      this._runUserCreatedFunction(this.onclose, this);\n    }\n    this.emit(\"close\", this);\n    this._reconnect();\n  }\n\n  protected _reconnect() {\n    this._connectionRetryCount++;\n    let tryAfter: any = 1000;\n    if (this._connectionRetryCount > 15) {\n      tryAfter = (this._connectionRetryCount - 15) * 1000;\n      const Limit: any = this.isNode ? 60 * 1000 : 10 * 1000;\n      if (tryAfter > Limit) {\n        tryAfter = Limit;\n      }\n    }\n    if (this.options.auto_connect) {\n      setTimeout(() => {\n        this.wsconnect(); // always connect to mainserver if ws lost\n      }, tryAfter);\n    }\n  }\n\n  protected wsOnError(event: any) {\n    this.print_debug(`ws onerror event=${event}`);\n  }\n\n  protected wsOnUnexpectedResponse(req: any, res?: any) {\n    if (res && res.statusCode === 404) {\n      this.print_debug(\"obniz not online\");\n    } else {\n      this.print_debug(\"invalid server response \" + res ? res.statusCode : \"\");\n    }\n\n    this.clearSocket(this.socket);\n    delete this.socket;\n\n    this._reconnect();\n  }\n\n  protected wsconnect(desired_server?: any) {\n    let server: any = this.options.obniz_server;\n    if (desired_server) {\n      server = \"\" + desired_server;\n    }\n\n    if (this.socket && this.socket.readyState <= 1) {\n      this.close();\n    }\n\n    let url: any = server + \"/obniz/\" + this.id + \"/ws/1\";\n\n    const query: any = [];\n    if ((this.constructor as typeof ObnizConnection).version) {\n      query.push(\"obnizjs=\" + (this.constructor as typeof ObnizConnection).version);\n    }\n    if (this.options.access_token) {\n      query.push(\"access_token=\" + this.options.access_token);\n    }\n    if (this.wscommand) {\n      query.push(\"accept_binary=true\");\n    }\n    if (query.length > 0) {\n      url += \"?\" + query.join(\"&\");\n    }\n    this.print_debug(\"connecting to \" + url);\n\n    let socket: any;\n    if (this.isNode) {\n      socket = new wsClient(url);\n      socket.on(\"open\", this.wsOnOpen.bind(this));\n      socket.on(\"message\", this.wsOnMessage.bind(this));\n      socket.on(\"close\", this.wsOnClose.bind(this));\n      socket.on(\"error\", this.wsOnError.bind(this));\n      socket.on(\"unexpected-response\", this.wsOnUnexpectedResponse.bind(this));\n    } else {\n      socket = new WebSocket(url);\n      socket.binaryType = \"arraybuffer\";\n      socket.onopen = this.wsOnOpen.bind(this);\n      socket.onmessage = (event: any) => {\n        this.wsOnMessage(event.data);\n      };\n      socket.onclose = this.wsOnClose.bind(this);\n      socket.onerror = this.wsOnError.bind(this);\n    }\n    this.socket = socket;\n\n    this.connectionState = \"connecting\";\n  }\n\n  protected _connectLocal(host: any) {\n    const url: any = \"ws://\" + host;\n    this.print_debug(\"local connect to \" + url);\n    let ws: any;\n    if (this.isNode) {\n      ws = new wsClient(url);\n      ws.on(\"open\", () => {\n        this.print_debug(\"connected to \" + url);\n        this._callOnConnect();\n      });\n      ws.on(\"message\", (data: any) => {\n        this.print_debug(\"recvd via local\");\n        this.wsOnMessage(data);\n      });\n      ws.on(\"close\", (event: any) => {\n        this.log(\"local websocket closed\");\n        this._disconnectLocal();\n      });\n      ws.on(\"error\", (err: any) => {\n        console.error(\"local websocket error.\", err);\n        this._disconnectLocal();\n      });\n      ws.on(\"unexpected-response\", (event: any) => {\n        this.log(\"local websocket closed\");\n        this._disconnectLocal();\n      });\n    } else {\n      ws = new WebSocket(url);\n      ws.binaryType = \"arraybuffer\";\n      ws.onopen = () => {\n        this.print_debug(\"connected to \" + url);\n        this._callOnConnect();\n      };\n      ws.onmessage = (event: any) => {\n        this.print_debug(\"recvd via local\");\n        this.wsOnMessage(event.data);\n      };\n      ws.onclose = (event: any) => {\n        this.log(\"local websocket closed\");\n        this._disconnectLocal();\n      };\n      ws.onerror = (err: any) => {\n        this.log(\"local websocket error.\", err);\n        this._disconnectLocal();\n      };\n    }\n    this.socket_local = ws;\n  }\n\n  protected _disconnectLocal() {\n    if (this.socket_local) {\n      if (this.socket.readyState <= 1) {\n        this.socket_local.close();\n      }\n      this.clearSocket(this.socket_local);\n      delete this.socket_local;\n    }\n    if (this._waitForLocalConnectReadyTimer) {\n      clearTimeout(this._waitForLocalConnectReadyTimer);\n      this._waitForLocalConnectReadyTimer = null;\n      this._callOnConnect(); /* should call. onlyl local connect was lost. and waiting. */\n    }\n  }\n\n  protected clearSocket(socket: any) {\n    if (!socket) {\n      return;\n    }\n    /* send queue */\n    if (this._sendQueueTimer) {\n      delete this._sendQueue;\n      clearTimeout(this._sendQueueTimer);\n      this._sendQueueTimer = null;\n    }\n    /* unbind */\n    if (this.isNode) {\n      const shouldRemoveObservers: any = [\"open\", \"message\", \"close\", \"error\", \"unexpected-response\"];\n      for (let i = 0; i < shouldRemoveObservers.length; i++) {\n        socket.removeAllListeners(shouldRemoveObservers[i]);\n      }\n    } else {\n      socket.onopen = null;\n      socket.onmessage = null;\n      socket.onclose = null;\n      socket.onerror = null;\n    }\n  }\n\n  /**\n   * This function will be called before obniz.onconnect called;\n   */\n  protected async _beforeOnConnect() {}\n\n  /**\n   * This function will be called after obniz.onconnect and all emitter called;\n   */\n  protected async _afterOnConnect() {}\n\n  protected _callOnConnect() {\n    let canChangeToConnected: any = true;\n    if (this._waitForLocalConnectReadyTimer) {\n      /* obniz.js can't wait for local_connect any more! */\n      clearTimeout(this._waitForLocalConnectReadyTimer);\n      this._waitForLocalConnectReadyTimer = null;\n    } else {\n      /* obniz.js has to wait for local_connect establish */\n      if (this.socket_local && this.socket_local.readyState === 1) {\n        /* delayed connect */\n        canChangeToConnected = false;\n      } else {\n        /* local_connect is not used */\n      }\n    }\n\n    if (canChangeToConnected) {\n      const currentTime = new Date().getTime();\n      this._lastDataReceivedAt = currentTime; // reset\n\n      this.connectionState = \"connected\";\n      this._startPingLoopInBackground();\n      this._beforeOnConnect();\n      if (typeof this.onconnect === \"function\") {\n        try {\n          const promise: any = this.onconnect(this);\n          if (promise instanceof Promise) {\n            promise.catch((err) => {\n              setTimeout(() => {\n                throw err;\n              });\n            });\n          }\n        } catch (err) {\n          setTimeout(() => {\n            throw err;\n          });\n        }\n      }\n      this.emit(\"connect\", this);\n      this._onConnectCalled = true;\n      this._startLoopInBackground();\n      this._afterOnConnect();\n    }\n  }\n\n  protected print_debug(str: any) {\n    if (this.debugprint) {\n      this.log(str);\n    }\n  }\n\n  protected _sendRouted(data: any) {\n    if (this.socket_local && this.socket_local.readyState === 1 && typeof data !== \"string\") {\n      this.print_debug(\"send via local\");\n      this.socket_local.send(data);\n      if (this.socket_local.bufferedAmount > this.bufferdAmoundWarnBytes) {\n        this.warning(\"over \" + this.socket_local.bufferedAmount + \" bytes queued\");\n      }\n      return;\n    }\n\n    if (this.socket && this.socket.readyState === 1) {\n      this.socket.send(data);\n      if (this.socket.bufferedAmount > this.bufferdAmoundWarnBytes) {\n        this.warning(\"over \" + this.socket.bufferedAmount + \" bytes queued\");\n      }\n      return;\n    }\n  }\n\n  protected _drainQueued() {\n    if (!this._sendQueue) {\n      return;\n    }\n    let expectSize: any = 0;\n    for (let i = 0; i < this._sendQueue.length; i++) {\n      expectSize += this._sendQueue[i].length;\n    }\n    let filled: any = 0;\n    const sendData: any = new Uint8Array(expectSize);\n    for (let i = 0; i < this._sendQueue.length; i++) {\n      sendData.set(this._sendQueue[i], filled);\n      filled += this._sendQueue[i].length;\n    }\n    this._sendRouted(sendData);\n    delete this._sendQueue;\n    clearTimeout(this._sendQueueTimer);\n    this._sendQueueTimer = null;\n  }\n\n  protected notifyToModule(obj: any) {\n    if (this.debugprint) {\n      this.print_debug(JSON.stringify(obj));\n    }\n\n    if (obj.ws) {\n      this.handleWSCommand(obj.ws);\n      return;\n    }\n    if (obj.system) {\n      this.handleSystemCommand(obj.system);\n      return;\n    }\n  }\n\n  protected _canConnectToInsecure() {\n    if (this.isNode) {\n      return true;\n    } else {\n      return location.protocol !== \"https:\";\n    }\n  }\n\n  protected handleWSCommand(wsObj: any) {\n    if (wsObj.ready) {\n      this.firmware_ver = wsObj.obniz.firmware;\n      this.hw = wsObj.obniz.hw;\n      if (!this.hw) {\n        this.hw = \"obnizb1\";\n      }\n      if (this.wscommands) {\n        for (let i = 0; i < this.wscommands.length; i++) {\n          const command: any = this.wscommands[i];\n          command.setHw({\n            hw: this.hw, // hard coding\n            firmware: this.firmware_ver,\n          });\n        }\n      }\n      if (this.options.reset_obniz_on_ws_disconnection) {\n        (this as any).resetOnDisconnect(true);\n      }\n      if (\n        wsObj.local_connect &&\n        wsObj.local_connect.ip &&\n        this.wscommand &&\n        this.options.local_connect &&\n        this._canConnectToInsecure()\n      ) {\n        this._connectLocal(wsObj.local_connect.ip);\n        this._waitForLocalConnectReadyTimer = setTimeout(() => {\n          this._callOnConnect();\n        }, 3000);\n      } else {\n        this._callOnConnect();\n      }\n    }\n    if (wsObj.redirect) {\n      const server: any = wsObj.redirect;\n      this.print_debug(\"WS connection changed to \" + server);\n\n      /* close current ws immidiately */\n      /*  */\n      this.socket.close(1000, \"close\");\n      this.clearSocket(this.socket);\n      delete this.socket;\n\n      /* connect to new server */\n      this.wsconnect(server);\n    }\n  }\n\n  protected handleSystemCommand(wsObj: any) {}\n\n  protected binary2Json(binary: any) {\n    let data: any = new Uint8Array(binary);\n    const json: any = [];\n    while (data !== null) {\n      const frame: any = WSCommand.dequeueOne(data);\n      if (!frame) {\n        break;\n      }\n      const obj: any = {};\n      for (let i = 0; i < this.wscommands.length; i++) {\n        const command: any = this.wscommands[i];\n        if (command.module === frame.module) {\n          command.notifyFromBinary(obj, frame.func, frame.payload);\n          break;\n        }\n      }\n      json.push(obj);\n      data = frame.next;\n    }\n    return json;\n  }\n\n  private async _startLoopInBackground() {\n    if (this._nextLoopTimeout) {\n      clearTimeout(this._nextLoopTimeout);\n    }\n    this._nextLoopTimeout = setTimeout(async () => {\n      if (this._nextLoopTimeout) {\n        clearTimeout(this._nextLoopTimeout);\n      }\n      this._nextLoopTimeout = undefined;\n      if (this.connectionState === \"connected\") {\n        try {\n          if (typeof this._looper === \"function\") {\n            await this.pingWait();\n            const prom: any = this._looper();\n            if (prom instanceof Promise) {\n              await prom;\n            }\n          }\n        } finally {\n          if (this.connectionState === \"connected\") {\n            if (!this._nextLoopTimeout) {\n              this._nextLoopTimeout = setTimeout(this._startLoopInBackground.bind(this), this._repeatInterval || 100);\n            }\n          }\n        }\n      }\n    }, 0);\n  }\n\n  private async _startPingLoopInBackground() {\n    if (this._nextPingTimeout) {\n      clearTimeout(this._nextPingTimeout);\n    }\n    this._nextPingTimeout = setTimeout(async () => {\n      const loopInterval = 60 * 1000; // 60 sec\n      const loopTimeout = 30 * 1000; // 30 sec\n      if (this._nextPingTimeout) {\n        clearTimeout(this._nextPingTimeout);\n      }\n      this._nextPingTimeout = undefined;\n      if (this.connectionState === \"connected\") {\n        const currentTime = new Date().getTime();\n\n        // after 15 sec from last data received\n        if (this._lastDataReceivedAt + loopTimeout < currentTime) {\n          const time = this._lastDataReceivedAt;\n          try {\n            const p = this.pingWait();\n            const wait = new Promise((resolve, reject) => {\n              setTimeout(reject, loopTimeout);\n            });\n            await Promise.race([p, wait]);\n            // this.log(\"ping/pong success\");\n          } catch (e) {\n            if (this.connectionState !== \"connected\") {\n              // already closed\n            } else if (time !== this._lastDataReceivedAt) {\n              // this will be disconnect -> reconnect while pingWait\n            } else {\n              // ping error or timeout\n              // this.error(\"ping/pong response timeout error\");\n              this.wsOnClose(\"ping/pong response timeout error\");\n              return;\n            }\n          }\n        } else {\n          // this.log(\"ping/pong not need\");\n        }\n\n        if (this.connectionState === \"connected\") {\n          if (!this._nextPingTimeout) {\n            this._nextPingTimeout = setTimeout(this._startPingLoopInBackground.bind(this), loopInterval);\n          }\n        }\n      }\n    }, 0);\n  }\n}\n"]}