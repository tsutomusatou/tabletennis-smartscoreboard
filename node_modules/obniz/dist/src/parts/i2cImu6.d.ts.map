{"version":3,"sources":["../src/parts/i2cImu6.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,QAAQ,EAAE,EAAE,uBAAuB,EAAE,MAAM,YAAY,CAAC;AAE/D,oBAAY,UAAU,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;AACpD,oBAAY,SAAS,GAAG,QAAQ,GAAG,QAAQ,GAAG,SAAS,GAAG,SAAS,CAAC;AACpE,oBAAY,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,MAAM,CAAC;AAC5C,oBAAY,QAAQ,GAAG,KAAK,GAAG,KAAK,CAAC;AAErC,MAAM,WAAW,GAAG;IAClB,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;CACX;AAED,MAAM,WAAW,QAAQ;IACvB,aAAa,EAAE,GAAG,CAAC;IACnB,SAAS,EAAE,GAAG,CAAC;IACf,OAAO,CAAC,EAAE,GAAG,CAAC;IACd,WAAW,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC;CAC7B;AAED,MAAM,WAAW,sBAAuB,SAAQ,uBAAuB;CAAG;AAE1E,MAAM,CAAC,OAAO,CAAC,QAAQ,OAAO,eAAgB,SAAQ,QAAQ;IAE5D,SAAS,CAAC,MAAM,CAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2BrB;IAEF,OAAO,CAAC,MAAM,CAAC,OAAO;IAItB,OAAO,CAAC,MAAM,CAAC,MAAM;IAIrB,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAQ;IACtC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAY;IACxC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAO;IACpC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAS;aAEd,UAAU,IAAI,OAAO,CAAC,MAAM,CAAC;aAEnC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,GAAG,IAAI,GAAG,MAAM,GAAG,IAAI;aAEvC,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC;aAE/B,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC;aAE9B,cAAc,IAAI,OAAO,CAAC,MAAM,CAAC;aAEjC,aAAa,IAAI,OAAO,CAAC,QAAQ,CAAC;IAE3C,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC;IAK5B,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC;IAK3B,WAAW,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAKrC,UAAU,IAAI,OAAO,CAAC,QAAQ,CAAC;IAa/B,iBAAiB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAKtC,gBAAgB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAKrC,eAAe,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;IAQjC,oBAAoB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAKzC,mBAAmB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAKxC,kBAAkB,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;aAQjC,aAAa,CAAC,WAAW,EAAE,UAAU,GAAG,IAAI;aAE5C,YAAY,CAAC,UAAU,EAAE,SAAS,GAAG,IAAI;IAE5C,oBAAoB,IAAI,OAAO,CAAC,GAAG,CAAC;IAIpC,gBAAgB,IAAI,OAAO,CAAC,GAAG,CAAC;IAIhC,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC;IAI5B,cAAc,IAAI,OAAO,CAAC,QAAQ,CAAC;IAIzC,aAAa,IAAI,UAAU;IAI3B,YAAY,IAAI,SAAS;IAIzB,YAAY,IAAI,SAAS;IAIzB,WAAW,IAAI,QAAQ;IAIvB,YAAY,CAAC,UAAU,EAAE,SAAS,GAAG,IAAI;IAQzC,WAAW,CAAC,SAAS,EAAE,QAAQ,GAAG,IAAI;IAQ7C,OAAO,CAAC,SAAS;IAQjB,OAAO,CAAC,QAAQ;CAOjB","file":"i2cImu6.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts\n */\n\nimport i2cParts, { I2cPartsAbstractOptions } from \"./i2cParts\";\n\nexport type accelRange = \"2g\" | \"4g\" | \"8g\" | \"16g\";\nexport type gyroRange = \"250dps\" | \"500dps\" | \"1000dps\" | \"2000dps\";\nexport type accelUnit = \"g\" | \"mg\" | \"m_s2\";\nexport type gyroUnit = \"dps\" | \"rps\";\n\nexport interface Xyz {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface Inertia6 {\n  accelerometer: Xyz;\n  gyroscope: Xyz;\n  compass?: Xyz;\n  temperature?: number | null;\n}\n\nexport interface I2cImu6AbstractOptions extends I2cPartsAbstractOptions {}\n\nexport default abstract class I2cImu6Abstract extends i2cParts {\n  // d/so*sf\n  protected static scales = {\n    accel: {\n      so: {\n        \"2g\": 16384, // 1 / 16384 ie. 0.061 mg / digit\n        \"4g\": 8192, //  1 / 8192 ie. 0.122 mg / digit\n        \"8g\": 4096, // 1 / 4096 ie. 0.244 mg / digit\n        \"16g\": 2048, // 1 / 2048 ie. 0.488 mg / digit\n      },\n      sf: {\n        m_s2: 9.80665,\n        g: 1,\n        mg: 1000,\n      },\n    },\n    gyro: {\n      so: {\n        \"125dps\": 262.144, // 32768/125\n        \"250dps\": 131.072, // 32768/250\n        \"500dps\": 65.536,\n        \"1000dps\": 32.768,\n        \"2000dps\": 16.384,\n      },\n      sf: {\n        dps: 1,\n        rps: 0.01745329251, // 1 rad/s is 57.295779578552 deg/s\n      },\n    },\n  };\n\n  private static _accelS(value: number, accel_so: accelRange, accel_sf: accelUnit): number {\n    return (value / I2cImu6Abstract.scales.accel.so[accel_so]) * I2cImu6Abstract.scales.accel.sf[accel_sf];\n  }\n\n  private static _gyroS(value: number, gyro_so: gyroRange, gyro_sf: gyroUnit): number {\n    return (value / I2cImu6Abstract.scales.gyro.so[gyro_so]) * I2cImu6Abstract.scales.gyro.sf[gyro_sf];\n  }\n\n  protected accel_so: accelRange = \"2g\";\n  protected gyro_so: gyroRange = \"250dps\";\n  protected accel_sf: accelUnit = \"g\";\n  protected gyro_sf: gyroUnit = \"dps\";\n\n  public abstract async whoamiWait(): Promise<number>;\n\n  public abstract calcTemp(data?: number | null): number | null;\n\n  public abstract async getAccelAdcWait(): Promise<Xyz>;\n\n  public abstract async getGyroAdcWait(): Promise<Xyz>;\n\n  public abstract async getTempAdcWait(): Promise<number>;\n\n  public abstract async getAllAdcWait(): Promise<Inertia6>;\n\n  public async getAccelWait(): Promise<Xyz> {\n    const adc = await this.getAccelAdcWait();\n    return this.calcAccel(adc);\n  }\n\n  public async getGyroWait(): Promise<Xyz> {\n    const adc = await this.getGyroAdcWait();\n    return this.calcGyro(adc);\n  }\n\n  public async getTempWait(): Promise<number | null> {\n    const adc = await this.getTempAdcWait();\n    return this.calcTemp(adc);\n  }\n\n  public async getAllWait(): Promise<Inertia6> {\n    const adc = await this.getAllAdcWait();\n    const ret: Inertia6 = {\n      accelerometer: this.calcAccel(adc.accelerometer),\n      gyroscope: this.calcGyro(adc.gyroscope),\n      temperature: this.calcTemp(adc.temperature),\n    };\n    if (\"compass\" in adc) {\n      ret.compass = adc.compass;\n    }\n    return ret;\n  }\n\n  public async getAccelArrayWait(): Promise<number[]> {\n    const obj = await this.getAccelWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public async getGyroArrayWait(): Promise<number[]> {\n    const obj = await this.getGyroWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public async getAllArrayWait(): Promise<any[]> {\n    const obj = await this.getAllWait();\n    return [\n      [obj.accelerometer.x, obj.accelerometer.y, obj.accelerometer.z],\n      [obj.gyroscope.x, obj.gyroscope.y, obj.gyroscope.z],\n    ];\n  }\n\n  public async getAccelAdcArrayWait(): Promise<number[]> {\n    const obj = await this.getAccelAdcWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public async getGyroAdcArrayWait(): Promise<number[]> {\n    const obj = await this.getGyroAdcWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public async getAllAdcArrayWait(): Promise<any[]> {\n    const obj = await this.getAllAdcWait();\n    return [\n      [obj.accelerometer.x, obj.accelerometer.y, obj.accelerometer.z],\n      [obj.gyroscope.x, obj.gyroscope.y, obj.gyroscope.z],\n    ];\n  }\n\n  public abstract setAccelRange(accel_range: accelRange): void;\n\n  public abstract setGyroRange(gyro_range: gyroRange): void;\n\n  public async getAccelerometerWait(): Promise<Xyz> {\n    return await this.getAccelWait();\n  }\n\n  public async getGyroscopeWait(): Promise<Xyz> {\n    return await this.getGyroWait();\n  }\n\n  public async getWait(): Promise<Inertia6> {\n    return await this.getAllWait();\n  }\n\n  public async getAllDataWait(): Promise<Inertia6> {\n    return await this.getAllWait();\n  }\n\n  public getAccelRange(): accelRange {\n    return this.accel_so;\n  }\n\n  public getGyroRange(): gyroRange {\n    return this.gyro_so;\n  }\n\n  public getAccelUnit(): accelUnit {\n    return this.accel_sf;\n  }\n\n  public getGyroUnit(): gyroUnit {\n    return this.gyro_sf;\n  }\n\n  public setAccelUnit(accel_unit: accelUnit): void {\n    if (accel_unit in I2cImu6Abstract.scales.accel.sf) {\n      this.accel_sf = accel_unit;\n    } else {\n      throw new Error(`Invalid accel unit. Valid values are: ${Object.keys(I2cImu6Abstract.scales.accel.sf).join()}`);\n    }\n  }\n\n  public setGyroUnit(gyro_unit: gyroUnit): void {\n    if (gyro_unit in I2cImu6Abstract.scales.gyro.sf) {\n      this.gyro_sf = gyro_unit;\n    } else {\n      throw new Error(`Invalid gyro unit. Valid values are: ${Object.keys(I2cImu6Abstract.scales.gyro.sf).join()}`);\n    }\n  }\n\n  private calcAccel(adc: Xyz): Xyz {\n    return {\n      x: I2cImu6Abstract._accelS(adc.x, this.accel_so, this.accel_sf),\n      y: I2cImu6Abstract._accelS(adc.y, this.accel_so, this.accel_sf),\n      z: I2cImu6Abstract._accelS(adc.z, this.accel_so, this.accel_sf),\n    };\n  }\n\n  private calcGyro(adc: Xyz): Xyz {\n    return {\n      x: I2cImu6Abstract._gyroS(adc.x, this.gyro_so, this.gyro_sf),\n      y: I2cImu6Abstract._gyroS(adc.y, this.gyro_so, this.gyro_sf),\n      z: I2cImu6Abstract._gyroS(adc.z, this.gyro_so, this.gyro_sf),\n    };\n  }\n}\n"]}