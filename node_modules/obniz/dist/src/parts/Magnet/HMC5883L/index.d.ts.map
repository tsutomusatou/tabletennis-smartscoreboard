{"version":3,"sources":["../src/parts/Magnet/HMC5883L/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAA4B,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACzF,OAAO,UAAU,EAAE,EAAE,WAAW,EAAE,yBAAyB,EAAE,MAAM,kBAAkB,CAAC;AACtF,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAE9C,MAAM,WAAW,eAAgB,SAAQ,yBAAyB;CAAG;AAErE,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,UAAU;WAChC,IAAI,IAAI,cAAc;IAMpC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAMrB;IAEF,OAAO,CAAC,MAAM,CAAC,MAAM,CAA8E;IAC5F,OAAO,EAAE,OAAO,CAAC;IACxB,SAAS,CAAC,EAAE,EAAE,MAAM,CAAC;IACrB,SAAS,CAAC,EAAE,EAAE,WAAW,CAAC;IAC1B,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC;IAExB,SAAS,CAAC,WAAW,EAAE,WAAW,CAAO;;IAelC,KAAK,CAAC,KAAK,EAAE,KAAK;IAMlB,IAAI;IAKJ,KAAK;IAIC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;IAKhC,QAAQ,CAAC,KAAK,EAAE,MAAM;IAMhB,GAAG;CAGjB","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.HMC5883L\n */\n\nimport Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport i2cCompass, { compassUnit, I2cCompassAbstractOptions } from \"../../i2cCompass\";\nimport { I2cInfo, Xyz } from \"../../i2cParts\";\n\nexport interface HMC5883LOptions extends I2cCompassAbstractOptions {}\n\nexport default class HMC5883L extends i2cCompass {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"HMC5883L\",\n    };\n  }\n\n  private static commands = {\n    config_a: 0x00,\n    config_b: 0x01,\n    mode: 0x02,\n    x_MSB: 0x03,\n    status: 0x09,\n  };\n\n  private static scales = [1 / 1370, 1 / 1090, 1 / 820, 1 / 660, 1 / 440, 1 / 390, 1 / 330, 1 / 230];\n  public i2cinfo: I2cInfo;\n  protected so: number;\n  protected sf: compassUnit;\n  protected range: string;\n\n  protected defaultUnit: compassUnit = \"G\";\n\n  constructor() {\n    super();\n    this.i2cinfo = {\n      address: 0x1e,\n      clock: 100000,\n      voltage: \"3v\",\n      pull: \"3v\",\n    };\n    this.sf = this.defaultUnit;\n    this.so = HMC5883L.scales[1];\n    this.range = \"8G\";\n  }\n\n  public wired(obniz: Obniz) {\n    super.wired(obniz);\n    // this.obniz.wait(500);\n    this.init();\n  }\n\n  public init() {\n    this.reset();\n    // this.obniz.wait(500);\n  }\n\n  public reset() {\n    this.write(HMC5883L.commands.mode, 0x00);\n  }\n\n  public async getAdcWait(): Promise<Xyz> {\n    const raw = await this.readWait(HMC5883L.commands.x_MSB, 6);\n    return HMC5883L.charArrayToXyz(raw, \"b\");\n  }\n\n  public setRange(index: number) {\n    this.write(HMC5883L.commands.config_b, index << 5);\n    this.so = HMC5883L.scales[index];\n  }\n\n  // legacy\n  public async get() {\n    return await this.getWait();\n  }\n}\n"]}