{"version":3,"sources":["../src/parts/DAConverter/MCP4725/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAUH,MAAqB,OAAO;IAsB1B;QAVO,QAAG,GAAG;YACX,QAAQ,EAAE,IAAI;YACd,cAAc,EAAE,IAAI;SACrB,CAAC;QAKM,iBAAY,GAAG,GAAG,CAAC;QAGzB,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;IAzBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,SAAS;SAChB,CAAC;IACJ,CAAC;IAuBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAEM,aAAa,CAAC,OAAe;QAClC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;IAC9B,CAAC;IAEM,UAAU,CAAC,OAAe,EAAE,WAAW,GAAG,KAAK;QACpD,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,EAAE;YAC/B,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC;SAC7B;aAAM,IAAI,OAAO,GAAG,CAAC,EAAE;YACtB,OAAO,GAAG,CAAC,CAAC;SACb;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,KAAK,GAAG,EAAE,IAAI,CAAC,CAAC;QACtB,MAAM,KAAK,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;SACvE;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;SACjE;IACH,CAAC;CACF;AAzDD,0BAyDC","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.MCP4725\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport { I2cPartsAbstractOptions } from \"../../i2cParts\";\n\nexport interface MCP4725Options extends I2cPartsAbstractOptions {}\n\nexport default class MCP4725 implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MCP4725\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public address: number;\n  public cmd = {\n    WRITEDAC: 0x40, // Writes data to the DAC\n    WRITEDACEEPROM: 0x60, // Writes data to the DAC and the EEPROM (persisting the assigned value after reset)\n  };\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  private _vcc_voltage = 5.0;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\n    this.requiredKeys = [];\n    this.address = 0x60;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.params.clock = 400000;\n    this.params.pull = \"5v\";\n    this.params.mode = \"master\";\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\n    this.obniz.wait(100);\n  }\n\n  public setVCCVoltage(voltage: number) {\n    this._vcc_voltage = voltage;\n  }\n\n  public setVoltage(voltage: number, writeEEPROM = false) {\n    if (voltage > this._vcc_voltage) {\n      voltage = this._vcc_voltage;\n    } else if (voltage < 0) {\n      voltage = 0;\n    }\n    const mv = Math.round((voltage / this._vcc_voltage) * (4096 - 1));\n    const hbits = mv >> 4;\n    const lbits = (mv & 0x0f) << 4;\n    if (writeEEPROM) {\n      this.i2c.write(this.address, [this.cmd.WRITEDACEEPROM, hbits, lbits]);\n    } else {\n      this.i2c.write(this.address, [this.cmd.WRITEDAC, hbits, lbits]);\n    }\n  }\n}\n"]}