{"version":3,"sources":["../src/parts/DAConverter/MCP4725/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,aAAa,MAAM,wCAAwC,CAAC;AAEnE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACzF,OAAO,EAAE,uBAAuB,EAAE,MAAM,gBAAgB,CAAC;AAEzD,MAAM,WAAW,cAAe,SAAQ,uBAAuB;CAAG;AAElE,MAAM,CAAC,OAAO,OAAO,OAAQ,YAAW,mBAAmB;WAC3C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,OAAO,EAAE,MAAM,CAAC;IAChB,GAAG;;;MAGR;IAEF,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;IAE9B,OAAO,CAAC,YAAY,CAAO;;IAQpB,KAAK,CAAC,KAAK,EAAE,KAAK;IAUlB,aAAa,CAAC,OAAO,EAAE,MAAM;IAI7B,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,UAAQ;CAevD","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.MCP4725\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport { I2cPartsAbstractOptions } from \"../../i2cParts\";\n\nexport interface MCP4725Options extends I2cPartsAbstractOptions {}\n\nexport default class MCP4725 implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MCP4725\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public address: number;\n  public cmd = {\n    WRITEDAC: 0x40, // Writes data to the DAC\n    WRITEDACEEPROM: 0x60, // Writes data to the DAC and the EEPROM (persisting the assigned value after reset)\n  };\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  private _vcc_voltage = 5.0;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\n    this.requiredKeys = [];\n    this.address = 0x60;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.params.clock = 400000;\n    this.params.pull = \"5v\";\n    this.params.mode = \"master\";\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\n    this.obniz.wait(100);\n  }\n\n  public setVCCVoltage(voltage: number) {\n    this._vcc_voltage = voltage;\n  }\n\n  public setVoltage(voltage: number, writeEEPROM = false) {\n    if (voltage > this._vcc_voltage) {\n      voltage = this._vcc_voltage;\n    } else if (voltage < 0) {\n      voltage = 0;\n    }\n    const mv = Math.round((voltage / this._vcc_voltage) * (4096 - 1));\n    const hbits = mv >> 4;\n    const lbits = (mv & 0x0f) << 4;\n    if (writeEEPROM) {\n      this.i2c.write(this.address, [this.cmd.WRITEDACEEPROM, hbits, lbits]);\n    } else {\n      this.i2c.write(this.address, [this.cmd.WRITEDAC, hbits, lbits]);\n    }\n  }\n}\n"]}