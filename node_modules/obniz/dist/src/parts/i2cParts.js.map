{"version":3,"sources":["../src/parts/i2cParts.ts"],"names":[],"mappings":"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","file":"i2cParts.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts\n */\n\nimport Obniz from \"../obniz\";\nimport { DriveType, PullType } from \"../obniz/libs/io_peripherals/common\";\nimport PeripheralI2C from \"../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../obniz/ObnizPartsInterface\";\n\nexport interface Xyz {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface I2cPartsAbstractOptions {\n  vcc?: number;\n  gnd?: number;\n  sda?: number;\n  scl?: number;\n  pull?: PullType;\n  clock?: number;\n  i2c?: PeripheralI2C;\n  voltage?: number;\n  address?: number;\n}\n\nexport interface I2cInfo {\n  address: number;\n  clock: number;\n  voltage: DriveType;\n  pull: PullType;\n}\n\nexport default abstract class I2cPartsAbstract implements ObnizPartsInterface {\n  public static charArrayToInt16(values: [number, number], endian = \"b\"): number {\n    const buffer = new ArrayBuffer(2);\n    const dv = new DataView(buffer);\n    dv.setUint8(0, values[0]);\n    dv.setUint8(1, values[1]);\n    return dv.getInt16(0, endian !== \"b\");\n  }\n\n  public static charArrayToXyz(data: number[], endian = \"b\", scaleFunc = (d: number): number => d): Xyz {\n    return {\n      x: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(0, 2) as [number, number], endian)),\n      y: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(2, 4) as [number, number], endian)),\n      z: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(4, 6) as [number, number], endian)),\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public abstract i2cinfo: I2cInfo;\n  public address: any;\n  public params: any;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"pull\", \"clock\", \"voltage\", \"address\"];\n    this.requiredKeys = [];\n  }\n\n  // public abstract info(): ObnizPartsInfo;\n  public i2cInfo(): I2cInfo {\n    return this.i2cinfo;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    (Object.keys(this.i2cinfo) as Array<keyof I2cInfo>).map((k) => {\n      if (typeof this.params[k] === \"undefined\") {\n        this.params[k] = this.i2cinfo[k];\n      } else {\n        // @ts-ignore\n        this.i2cinfo[k] = this.params[k];\n      }\n    });\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, this.params.voltage);\n    this.params.mode = \"master\";\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\n    this.address = this.i2cinfo.address;\n  }\n\n  public char2short(val1: number, val2: number) {\n    const buffer: any = new ArrayBuffer(2);\n    const dv: any = new DataView(buffer);\n    dv.setUint8(0, val1);\n    dv.setUint8(1, val2);\n    return dv.getInt16(0, false);\n  }\n\n  public async readWait(command: number, length: number): Promise<number[]> {\n    this.i2c.write(this.address, [command]);\n    return await this.i2c.readWait(this.address, length);\n  }\n\n  public write(command: any, buf: any) {\n    if (!Array.isArray(buf)) {\n      buf = [buf];\n    }\n    this.i2c.write(this.address, [command, ...buf]);\n  }\n\n  public async writeFlagWait(address: number, index: number) {\n    const tempdata = await this.readWait(address, 1);\n    tempdata[0] = tempdata[0] | (0b1 << index);\n    this.write(address, tempdata);\n  }\n\n  public async clearFlagWait(address: number, index: number) {\n    const tempdata = await this.readWait(address, 1);\n    tempdata[0] = tempdata[0] & (0xff - (0b1 << index));\n    this.write(address, tempdata);\n  }\n\n  protected async readInt16Wait(register: number, endian: string = \"b\"): Promise<number> {\n    const data = (await this.readWait(register, 2)) as [number, number];\n    return I2cPartsAbstract.charArrayToInt16(data, endian);\n  }\n\n  protected async readThreeInt16Wait(register: number, endian: string = \"b\"): Promise<[number, number, number]> {\n    const data: number[] = await this.readWait(register, 6);\n    const results: [number, number, number] = [0, 0, 0];\n    results[0] = I2cPartsAbstract.charArrayToInt16(data.slice(0, 2) as [number, number], endian);\n    results[1] = I2cPartsAbstract.charArrayToInt16(data.slice(2, 4) as [number, number], endian);\n    results[2] = I2cPartsAbstract.charArrayToInt16(data.slice(4, 6) as [number, number], endian);\n    return results;\n  }\n}\n"]}