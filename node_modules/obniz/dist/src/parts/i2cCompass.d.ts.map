{"version":3,"sources":["../src/parts/i2cCompass.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,QAAQ,EAAE,EAAE,uBAAuB,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAEpE,oBAAY,WAAW,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;AAEvE,MAAM,WAAW,yBAA0B,SAAQ,uBAAuB;CAAG;AAE7E,MAAM,CAAC,OAAO,CAAC,QAAQ,OAAO,kBAAmB,SAAQ,QAAQ;WAC3C,aAAa;WAIb,WAAW;IAI/B,SAAS,CAAC,MAAM,CAAC,UAAU;;;;;;;;MAQzB;IACF,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC;IAC9B,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC;IACnC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;IACjC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC;aAEtB,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;IAEnC,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC;IASvB,eAAe,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAKpC,YAAY,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAKvC,OAAO,IAAI,WAAW;IAItB,QAAQ,IAAI,MAAM;IAIlB,OAAO,CAAC,QAAQ,EAAE,WAAW;IAQpC,OAAO,CAAC,OAAO;CAGhB","file":"i2cCompass.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts\n */\n\nimport i2cParts, { I2cPartsAbstractOptions, Xyz } from \"./i2cParts\";\n\nexport type compassUnit = \"uT\" | \"G\" | \"mT\" | \"T\" | \"mG\" | \"kG\" | \"uG\";\n\nexport interface I2cCompassAbstractOptions extends I2cPartsAbstractOptions {}\n\nexport default abstract class I2cCompassAbstract extends i2cParts {\n  public static async calibrateWait() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  public static async headingWait() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  protected static unitScales = {\n    G: 1,\n    uT: 100,\n    mT: 0.1,\n    T: 0.0001,\n    mG: 1000,\n    kG: 0.001,\n    uG: 1000 * 1000,\n  };\n  protected abstract so: number;\n  protected abstract sf: compassUnit;\n  protected abstract range: string;\n  protected abstract defaultUnit: compassUnit;\n\n  public abstract async getAdcWait(): Promise<Xyz>;\n\n  public async getWait(): Promise<Xyz> {\n    const adc = await this.getAdcWait();\n    return {\n      x: this.calcMag(adc.x),\n      y: this.calcMag(adc.y),\n      z: this.calcMag(adc.z),\n    };\n  }\n\n  public async getAdcArrayWait(): Promise<number[]> {\n    const obj = await this.getAdcWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public async getArrayWait(): Promise<number[]> {\n    const obj = await this.getWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public getUnit(): compassUnit {\n    return this.sf;\n  }\n\n  public getRange(): string {\n    return this.range;\n  }\n\n  public setUnit(new_unit: compassUnit) {\n    if (Object.keys(I2cCompassAbstract.unitScales).includes(new_unit)) {\n      this.sf = new_unit;\n    } else {\n      throw new Error(`Invalid compass unit. Valid values are ${Object.keys(I2cCompassAbstract.unitScales).join()}`);\n    }\n  }\n\n  private calcMag(data: number): number {\n    return (data * this.so * I2cCompassAbstract.unitScales[this.sf]) / I2cCompassAbstract.unitScales[this.defaultUnit];\n  }\n}\n"]}