{"version":3,"sources":["../src/parts/Keyestudio/Keyestudio_TemperatureSensor/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AAEjE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,MAAM,WAAW,mCAAmC;IAClD,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,MAAM,CAAC,OAAO,OAAO,4BAA6B,YAAW,mBAAmB;WAChE,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,EAAE,GAAG,CAAC;IACX,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,EAAE,EAAG,YAAY,CAAC;IAE5B,OAAO,CAAC,IAAI,CAAK;;IAQV,KAAK,CAAC,KAAK,EAAE,KAAK;IAWZ,OAAO;IAMb,QAAQ,CAAC,IAAI,EAAE,MAAM;IAE5B,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG;CAG5B","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Keyestudio_TemperatureSensor\n */\nimport Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface Keyestudio_TemperatureSensorOptions {\n  vcc?: number;\n  signal: number;\n  gnd?: number;\n}\n\nexport default class Keyestudio_TemperatureSensor implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Keyestudio_TemperatureSensor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public drive: any;\n  public params: any;\n\n  protected obniz!: Obniz;\n  protected ad!: PeripheralAD;\n\n  private temp = 0;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\"];\n    this.requiredKeys = [\"signal\"];\n    this.drive = \"5v\";\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, this.drive);\n    this.ad = obniz.getAD(this.params.signal);\n\n    this.ad.start((voltage: any) => {\n      this.temp = this.calc(voltage);\n      this.onchange(this.temp);\n    });\n  }\n\n  public async getWait() {\n    const voltage: any = await this.ad.getWait();\n    this.temp = this.calc(voltage);\n    return this.temp;\n  }\n\n  public onchange(temp: number) {}\n\n  protected calc(voltage: any) {\n    return voltage * 100; // Temp(Celsius) = [AD Voltage] * 100l;\n  }\n}\n"]}