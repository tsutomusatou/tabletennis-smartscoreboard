{"version":3,"sources":["../src/parts/Keyestudio/Keyestudio_TrafficLight/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAgBH,MAAqB,uBAAuB;IAmB1C;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAtBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,yBAAyB;SAChC,CAAC;IACJ,CAAC;IAoBM,KAAK,CAAC,KAAY;QACvB,SAAS,KAAK,CAAC,EAAO;YACpB,IAAI,EAAE,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;gBAChC,IAAI,OAAO,EAAE,CAAC,MAAM,KAAK,UAAU,EAAE;oBACnC,OAAO,EAAE,CAAC;iBACX;aACF;YACD,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAE7C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;IAC5D,CAAC;IAEM,MAAM,CAAC,GAAqB;QACjC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QACjB,QAAQ,GAAG,EAAE;YACX,KAAK,OAAO;gBACV,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;gBAChB,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM;YACR,KAAK,KAAK,CAAC;YACX;gBACE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;gBACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,MAAM;SACT;IACH,CAAC;IAEM,IAAI;QACT,QAAQ,IAAI,CAAC,KAAK,EAAE;YAClB,KAAK,OAAO;gBACV,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACtB,MAAM;YACR,KAAK,QAAQ;gBACX,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACnB,MAAM;YACR,KAAK,KAAK,CAAC;YACX;gBACE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACrB,MAAM;SACT;IACH,CAAC;CACF;AA7ED,0CA6EC","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Keyestudio_TrafficLight\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport LED from \"../../Light/LED\";\n\nexport type TrafficLightType = \"green\" | \"yellow\" | \"red\";\n\nexport interface Keyestudio_TrafficLightOptions {\n  gnd?: number;\n  green: number;\n  yellow: number;\n  red: number;\n}\n\nexport default class Keyestudio_TrafficLight implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Keyestudio_TrafficLight\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public green!: LED;\n  public yellow!: LED;\n  public red!: LED;\n\n  protected obniz!: Obniz;\n\n  private state: TrafficLightType;\n\n  constructor() {\n    this.keys = [\"gnd\", \"green\", \"yellow\", \"red\"];\n    this.requiredKeys = [\"green\", \"yellow\", \"red\"];\n    this.state = \"red\";\n  }\n\n  public wired(obniz: Obniz) {\n    function getIO(io: any) {\n      if (io && typeof io === \"object\") {\n        if (typeof io.output === \"function\") {\n          return io;\n        }\n      }\n      return obniz.getIO(io);\n    }\n\n    this.obniz = obniz;\n    obniz.setVccGnd(null, this.params.gnd, \"5v\");\n\n    this.green = obniz.wired(\"LED\", { anode: this.params.green });\n    this.yellow = obniz.wired(\"LED\", { anode: this.params.yellow });\n    this.red = obniz.wired(\"LED\", { anode: this.params.red });\n  }\n\n  public single(led: TrafficLightType) {\n    this.green.off();\n    this.yellow.off();\n    this.red.off();\n    this.state = led;\n    switch (led) {\n      case \"green\":\n        this.green.on();\n        break;\n      case \"yellow\":\n        this.yellow.on();\n        break;\n      case \"red\":\n      default:\n        this.red.on();\n        this.state = \"red\";\n        break;\n    }\n  }\n\n  public next() {\n    switch (this.state) {\n      case \"green\":\n        this.single(\"yellow\");\n        break;\n      case \"yellow\":\n        this.single(\"red\");\n        break;\n      case \"red\":\n      default:\n        this.single(\"green\");\n        break;\n    }\n  }\n}\n"]}