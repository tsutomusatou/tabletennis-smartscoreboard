{"version":3,"sources":["../src/parts/Grove/Grove_RotaryAngleSensor/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,EAAE,SAAS,EAAE,MAAM,2CAA2C,CAAC;AACtE,OAAO,eAAe,MAAM,0CAA0C,CAAC;AACvE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,UAAU,+BAA+B;IACvC,MAAM,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,UAAU,+BAA+B;IACvC,KAAK,EAAE,eAAe,CAAC;CACxB;AAED,oBAAY,8BAA8B,GAAG,+BAA+B,GAAG,+BAA+B,CAAC;AAE/G,MAAM,CAAC,OAAO,OAAO,uBAAwB,YAAW,mBAAmB;WAC3D,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IACZ,KAAK,EAAE,SAAS,CAAC;IAGjB,QAAQ,SAAK;IACb,EAAE,EAAG,YAAY,CAAC;IAClB,KAAK,EAAE,GAAG,CAAC;IACX,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,KAAK,IAAI,CAAC;IAE7C,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAQjB,KAAK,CAAC,KAAK,EAAE,KAAK;CAgB1B","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Grove_RotaryAngleSensorOptionsA\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\nimport { DriveType } from \"../../../obniz/libs/io_peripherals/common\";\nimport PeripheralGrove from \"../../../obniz/libs/io_peripherals/grove\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\ninterface Grove_RotaryAngleSensorOptionsA {\n  signal: number;\n  vcc?: number;\n  gnd?: number;\n}\n\ninterface Grove_RotaryAngleSensorOptionsB {\n  grove: PeripheralGrove;\n}\n\nexport type Grove_RotaryAngleSensorOptions = Grove_RotaryAngleSensorOptionsA | Grove_RotaryAngleSensorOptionsB;\n\nexport default class Grove_RotaryAngleSensor implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_RotaryAngleSensor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n  public drive: DriveType;\n\n  // public vcc_voltage = 5.0;\n  public position = 0;\n  public ad!: PeripheralAD;\n  public value: any;\n  public onchange?: (position: number) => void;\n\n  protected obniz!: Obniz;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\", \"grove\"];\n    this.requiredKeys = [];\n    this.drive = \"5v\";\n  }\n\n  public wired(obniz: Obniz) {\n    if (this.params.grove) {\n      const groveAd = this.params.grove.getAnalog();\n      this.ad = groveAd.primary;\n    } else {\n      this.obniz.setVccGnd(this.params.vcc, this.params.gnd, this.drive);\n      this.ad = obniz.getAD(this.params.signal);\n    }\n\n    this.ad.start((value: number) => {\n      this.value = value;\n      if (this.onchange) {\n        this.onchange(this.value);\n      }\n    });\n  }\n}\n"]}