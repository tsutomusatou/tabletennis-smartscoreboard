{"version":3,"sources":["../src/parts/Grove/Grove_RotaryAngleSensor/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAoBH,MAAqB,uBAAuB;IAoB1C;QARA,4BAA4B;QACrB,aAAQ,GAAG,CAAC,CAAC;QAQlB,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAvBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,yBAAyB;SAChC,CAAC;IACJ,CAAC;IAqBM,KAAK,CAAC,KAAY;QACvB,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YACrB,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;YAC9C,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACnE,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC3C;QAED,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,KAAa,EAAE,EAAE;YAC9B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA1CD,0CA0CC","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Grove_RotaryAngleSensorOptionsA\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\nimport { DriveType } from \"../../../obniz/libs/io_peripherals/common\";\nimport PeripheralGrove from \"../../../obniz/libs/io_peripherals/grove\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\ninterface Grove_RotaryAngleSensorOptionsA {\n  signal: number;\n  vcc?: number;\n  gnd?: number;\n}\n\ninterface Grove_RotaryAngleSensorOptionsB {\n  grove: PeripheralGrove;\n}\n\nexport type Grove_RotaryAngleSensorOptions = Grove_RotaryAngleSensorOptionsA | Grove_RotaryAngleSensorOptionsB;\n\nexport default class Grove_RotaryAngleSensor implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_RotaryAngleSensor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n  public drive: DriveType;\n\n  // public vcc_voltage = 5.0;\n  public position = 0;\n  public ad!: PeripheralAD;\n  public value: any;\n  public onchange?: (position: number) => void;\n\n  protected obniz!: Obniz;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\", \"grove\"];\n    this.requiredKeys = [];\n    this.drive = \"5v\";\n  }\n\n  public wired(obniz: Obniz) {\n    if (this.params.grove) {\n      const groveAd = this.params.grove.getAnalog();\n      this.ad = groveAd.primary;\n    } else {\n      this.obniz.setVccGnd(this.params.vcc, this.params.gnd, this.drive);\n      this.ad = obniz.getAD(this.params.signal);\n    }\n\n    this.ad.start((value: number) => {\n      this.value = value;\n      if (this.onchange) {\n        this.onchange(this.value);\n      }\n    });\n  }\n}\n"]}