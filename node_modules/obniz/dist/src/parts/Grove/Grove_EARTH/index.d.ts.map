{"version":3,"sources":["../src/parts/Grove/Grove_EARTH/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,eAAe,MAAM,0CAA0C,CAAC;AAGvE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,MAAM,WAAW,mBAAmB;IAClC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,UAAU,mBAAmB;IAC3B,KAAK,EAAE,eAAe,CAAC;CACxB;AAED,oBAAY,kBAAkB,GAAG,mBAAmB,GAAG,mBAAmB,CAAC;AAE3E,MAAM,CAAC,OAAO,OAAO,WAAY,YAAW,mBAAmB;WAC/C,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,KAAK,EAAE,GAAG,CAAC;IACX,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC;IAE1C,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IAExB,OAAO,CAAC,EAAE,CAAgB;IAC1B,OAAO,CAAC,EAAE,CAAgB;;IAOnB,KAAK,CAAC,KAAK,EAAE,KAAK;IAoBZ,eAAe;IAIf,sBAAsB;CAGpC","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Grove_EARTHOptionsA\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\nimport PeripheralGrove from \"../../../obniz/libs/io_peripherals/grove\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface Grove_EARTHOptionsA {\n  vcc?: number;\n  aout: number;\n  dout: number;\n  gnd?: number;\n}\n\ninterface Grove_EARTHOptionsB {\n  grove: PeripheralGrove;\n}\n\nexport type Grove_EARTHOptions = Grove_EARTHOptionsA | Grove_EARTHOptionsB;\n\nexport default class Grove_EARTH implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_EARTH\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public value: any;\n  public onchange?: (value: number) => void;\n\n  protected obniz!: Obniz;\n\n  private ad!: PeripheralAD;\n  private io!: PeripheralIO;\n\n  constructor() {\n    this.keys = [\"vcc\", \"aout\", \"dout\", \"gnd\", \"grove\"];\n    this.requiredKeys = [];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    if (this.params.grove) {\n      const groveIOs = this.params.grove.getAnalogDigital();\n      this.ad = groveIOs.analog;\n      this.io = groveIOs.digital;\n    } else {\n      this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n      this.ad = obniz.getAD(this.params.aout);\n      this.io = obniz.getIO(this.params.dout);\n    }\n\n    this.ad.start((value: number) => {\n      this.value = value;\n      if (this.onchange) {\n        this.onchange(this.value);\n      }\n    });\n  }\n\n  public async getHumidityWait() {\n    return await this.ad.getWait();\n  }\n\n  public async getDigitalHumidityWait() {\n    return await this.io.inputWait();\n  }\n}\n"]}