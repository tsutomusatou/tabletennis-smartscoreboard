{"version":3,"sources":["../src/parts/Grove/Grove_Button/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,eAAe,MAAM,0CAA0C,CAAC;AAEvE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,UAAU,oBAAoB;IAC5B,MAAM,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,UAAU,oBAAoB;IAC5B,KAAK,EAAE,eAAe,CAAC;CACxB;AAED,oBAAY,mBAAmB,GAAG,oBAAoB,GAAG,oBAAoB,CAAC;AAE9E,MAAM,CAAC,OAAO,OAAO,YAAa,YAAW,mBAAmB;WAChD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,SAAS,EAAE,OAAO,GAAG,IAAI,CAAQ;IACjC,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,OAAO,KAAK,IAAI,CAAC,GAAG,IAAI,CAAQ;IAE5D,OAAO,CAAC,MAAM,CAAgB;IAC9B,OAAO,CAAC,SAAS,CAAgB;IACjC,OAAO,CAAC,SAAS,CAAC,CAAe;;IAO1B,oBAAoB,6BAA4B;IAEhD,KAAK,CAAC,KAAK,EAAE,KAAK;IAoBZ,aAAa,IAAI,OAAO,CAAC,OAAO,CAAC;IAIvC,SAAS,CAAC,SAAS,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;CAUpD","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Grove_Button\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralGrove from \"../../../obniz/libs/io_peripherals/grove\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\ninterface Grove_ButtonOptionsA {\n  signal: number;\n  vcc?: number;\n  gnd?: number;\n}\n\ninterface Grove_ButtonOptionsB {\n  grove: PeripheralGrove;\n}\n\nexport type Grove_ButtonOptions = Grove_ButtonOptionsA | Grove_ButtonOptionsB;\n\nexport default class Grove_Button implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_Button\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public isPressed: boolean | null = null;\n  public onchange: ((pressed: boolean) => void) | null = null;\n\n  private io_vcc!: PeripheralIO;\n  private io_signal!: PeripheralIO;\n  private io_supply?: PeripheralIO;\n\n  constructor() {\n    this.keys = [\"signal\", \"gnd\", \"vcc\", \"grove\"];\n    this.requiredKeys = [];\n  }\n\n  public onChangeForStateWait = (pressed: boolean) => {};\n\n  public wired(obniz: Obniz) {\n    if (this.params.grove) {\n      const groveIOs = this.params.grove.getDigital(\"5v\");\n      this.io_signal = groveIOs.primary;\n    } else {\n      this.io_signal = obniz.getIO(this.params.signal);\n      obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    }\n\n    this.io_signal.pull(\"5v\");\n\n    this.io_signal.input((value: boolean) => {\n      this.isPressed = value;\n      if (this.onchange) {\n        this.onchange(value);\n      }\n      this.onChangeForStateWait(value);\n    });\n  }\n\n  public async isPressedWait(): Promise<boolean> {\n    return await this.io_signal.inputWait();\n  }\n\n  public stateWait(isPressed: boolean): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.onChangeForStateWait = (pressed: any) => {\n        if (isPressed === pressed) {\n          this.onChangeForStateWait = () => {};\n          resolve();\n        }\n      };\n    });\n  }\n}\n"]}