{"version":3,"sources":["../src/parts/Grove/Grove_Speaker/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,eAAe,MAAM,0CAA0C,CAAC;AACvE,OAAO,aAAa,MAAM,wCAAwC,CAAC;AACnE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,UAAU,qBAAqB;IAC7B,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,UAAU,qBAAqB;IAC7B,KAAK,EAAE,eAAe,CAAC;CACxB;AAED,oBAAY,oBAAoB,GAAG,qBAAqB,GAAG,qBAAqB,CAAC;AAEjF,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,mBAAmB;WACjD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,GAAG,EAAG,aAAa,CAAC;IAE3B,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAOjB,QAAQ,CAAC,KAAK,EAAE,MAAM;IAEtB,KAAK,CAAC,KAAK,EAAE,KAAK;IAWlB,IAAI,CAAC,SAAS,EAAE,MAAM;IAatB,IAAI;CAGZ","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Grove_Speaker\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralGrove from \"../../../obniz/libs/io_peripherals/grove\";\nimport PeripheralPWM from \"../../../obniz/libs/io_peripherals/pwm\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\ninterface Grove_SpeakerOptionsA {\n  vcc?: number;\n  gnd?: number;\n  signal: number;\n}\n\ninterface Grove_SpeakerOptionsB {\n  grove: PeripheralGrove;\n}\n\nexport type Grove_SpeakerOptions = Grove_SpeakerOptionsA | Grove_SpeakerOptionsB;\n\nexport default class Grove_Speaker implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_Speaker\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public pwm!: PeripheralPWM;\n\n  protected obniz!: Obniz;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\", \"grove\"];\n    this.requiredKeys = [];\n  }\n\n  public onchange(value: number) {}\n\n  public wired(obniz: Obniz) {\n    if (this.params.grove) {\n      this.pwm = this.params.grove.getPwm();\n    } else {\n      this.obniz = obniz;\n      this.obniz.setVccGnd(null, this.params.gnd, \"5v\");\n      this.pwm = obniz.getFreePwm();\n      this.pwm.start({ io: this.params.signal });\n    }\n  }\n\n  public play(frequency: number) {\n    if (typeof frequency !== \"number\") {\n      throw new Error(\"freq must be a number\");\n    }\n    frequency = Math.floor(frequency); // temporary\n    if (frequency > 0) {\n      this.pwm.freq(frequency);\n      this.pwm.pulse((1 / frequency / 2) * 1000);\n    } else {\n      this.pwm.pulse(0);\n    }\n  }\n\n  public stop() {\n    this.play(0);\n  }\n}\n"]}