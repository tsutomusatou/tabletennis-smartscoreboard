{"version":3,"sources":["../src/parts/Grove/Grove_LightSensor/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,YAAY,MAAM,uCAAuC,CAAC;AACjE,OAAO,eAAe,MAAM,0CAA0C,CAAC;AACvE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,UAAU,yBAAyB;IACjC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;CAChB;AAED,UAAU,yBAAyB;IACjC,KAAK,EAAE,eAAe,CAAC;CACxB;AAED,oBAAY,wBAAwB,GAAG,yBAAyB,GAAG,yBAAyB,CAAC;AAE7F,MAAM,CAAC,OAAO,OAAO,iBAAkB,YAAW,mBAAmB;WACrD,IAAI,IAAI,cAAc;IAM7B,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,MAAM,EAAE,GAAG,CAAC;IAEZ,EAAE,EAAG,YAAY,CAAC;IAEzB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;;IAOjB,QAAQ,CAAC,KAAK,EAAE,MAAM;IAEtB,KAAK,CAAC,KAAK,EAAE,KAAK;IAeZ,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;CAGxC","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Grove_LightSensor\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralAD from \"../../../obniz/libs/io_peripherals/ad\";\nimport PeripheralGrove from \"../../../obniz/libs/io_peripherals/grove\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\ninterface Grove_LightSensorOptionsA {\n  vcc?: number;\n  gnd?: number;\n  signal: number;\n}\n\ninterface Grove_LightSensorOptionsB {\n  grove: PeripheralGrove;\n}\n\nexport type Grove_LightSensorOptions = Grove_LightSensorOptionsA | Grove_LightSensorOptionsB;\n\nexport default class Grove_LightSensor implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Grove_LightSensor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public ad!: PeripheralAD;\n\n  protected obniz!: Obniz;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"signal\", \"grove\"];\n    this.requiredKeys = [];\n  }\n\n  public onchange(value: number) {}\n\n  public wired(obniz: Obniz) {\n    if (this.params.grove) {\n      const groveAd = this.params.grove.getAnalog();\n      this.ad = groveAd.primary;\n    } else {\n      this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n      this.ad = obniz.getAD(this.params.signal);\n    }\n    this.ad.start((value: any) => {\n      if (this.onchange) {\n        this.onchange(value);\n      }\n    });\n  }\n\n  public async getWait(): Promise<number> {\n    return await this.ad.getWait();\n  }\n}\n"]}