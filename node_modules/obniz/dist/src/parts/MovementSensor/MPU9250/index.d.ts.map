{"version":3,"sources":["../src/parts/MovementSensor/MPU9250/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAA4B,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACzF,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAC9C,OAAO,MAAyB,MAAM,WAAW,CAAC;AAClD,OAAO,OAAO,EAAE,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAErD,MAAM,WAAW,cAAe,SAAQ,cAAc;CAAG;AAEzD,MAAM,CAAC,OAAO,OAAO,OAAQ,SAAQ,OAAO;WAC5B,IAAI,IAAI,cAAc;IAM7B,MAAM,EAAG,MAAM,CAAC;;IAMhB,KAAK,CAAC,KAAK,EAAE,KAAK;IAUlB,IAAI;IAKJ,SAAS,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;IAOrD,aAAa,IAAI,OAAO,CAAC,QAAQ,CAAC;IAMlC,UAAU,IAAI,OAAO,CAAC,QAAQ,CAAC;IAM/B,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC;IAI9B,iBAAiB,IAAI,OAAO,CAAC,GAAG,CAAC;IAIjC,mBAAmB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAIxC,sBAAsB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAIjD,cAAc;IAId,eAAe;IAIT,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC;IAI/B,kBAAkB,IAAI,OAAO,CAAC,GAAG,CAAC;IAIlC,oBAAoB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAIzC,uBAAuB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;IAIlD,eAAe;IAIf,gBAAgB;YAIT,cAAc;CAO7B","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.MPU9250\n */\n\nimport Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport { Inertia6, Xyz } from \"../../i2cImu6\";\nimport AK8963, { AK8963Options } from \"../AK8963\";\nimport MPU6500, { MPU6500Options } from \"../MPU6500\";\n\nexport interface MPU9250Options extends MPU6500Options {}\n\nexport default class MPU9250 extends MPU6500 {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MPU9250\",\n    };\n  }\n\n  public ak8963!: AK8963;\n\n  constructor() {\n    super();\n  }\n\n  public wired(obniz: Obniz) {\n    super.wired(obniz);\n    this.ak8963 = obniz.wired(\"AK8963\", { i2c: this.i2c });\n    this.write(MPU6500.commands.pwr_mgmt_1, [0x00]); // activate MPU9250\n    this.write(MPU6500.commands.int_pin_cfg, [0x02]); // activate AK8963 (bypass)\n    this.write(MPU6500.commands.config, [0x06]); // activate LPF (search datasheet_p.13)\n    this.write(MPU6500.commands.accel_config2, [0x02]); // accel LPF set.\n    // this.mpu6050 = obniz.wired(\"MPU6050\", { i2c: this.i2c });\n  }\n\n  public init() {\n    super.init();\n    // this.bypassMagnetometerWait(true);\n  }\n\n  public setConfig(accel_range: any, gyro_range: any, ADC_cycle: any) {\n    super.setConfig(accel_range, gyro_range);\n    if (ADC_cycle) {\n      this.ak8963.setConfig(ADC_cycle);\n    }\n  }\n\n  public async getAllAdcWait(): Promise<Inertia6> {\n    const data = await super.getAllAdcWait();\n    data.compass = await this.getCompassAdcWait();\n    return data;\n  }\n\n  public async getAllWait(): Promise<Inertia6> {\n    const data = await super.getAllWait();\n    data.compass = await this.getCompassWait();\n    return data;\n  }\n\n  public async getCompassWait(): Promise<Xyz> {\n    return await this.ak8963.getWait();\n  }\n\n  public async getCompassAdcWait(): Promise<Xyz> {\n    return await this.ak8963.getAdcWait();\n  }\n\n  public async getCompassArrayWait(): Promise<number[]> {\n    return await this.ak8963.getArrayWait();\n  }\n\n  public async getCompassAdcArrayWait(): Promise<number[]> {\n    return await this.ak8963.getAdcArrayWait();\n  }\n\n  public getCompassUnit() {\n    return this.ak8963.getUnit();\n  }\n\n  public getCompassRange() {\n    return this.ak8963.getRange();\n  }\n\n  public async getMagneticWait(): Promise<Xyz> {\n    return await this.getCompassWait();\n  }\n\n  public async getMagneticAdcWait(): Promise<Xyz> {\n    return await this.getCompassAdcWait();\n  }\n\n  public async getMagneticArrayWait(): Promise<number[]> {\n    return await this.getCompassArrayWait();\n  }\n\n  public async getMagneticAdcArrayWait(): Promise<number[]> {\n    return await this.getCompassAdcArrayWait();\n  }\n\n  public getMagneticUnit() {\n    return this.getCompassUnit();\n  }\n\n  public getMagneticRange() {\n    return this.getCompassRange();\n  }\n\n  private async _getAK8963Wait() {\n    const ST1 = await this.readWait(0x02, 1); // confirm magnet value readable\n    if (ST1[0] & 0x01) {\n      return await this.ak8963.getWait();\n    }\n    return {};\n  }\n}\n"]}