{"version":3,"sources":["../src/parts/MovementSensor/AK8963/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;AAIH,kEAAsF;AAOtF,MAAqB,MAAO,SAAQ,oBAAU;IAiB5C;QACE,KAAK,EAAE,CAAC;QANA,gBAAW,GAAgB,IAAI,CAAC;QAOxC,IAAI,CAAC,OAAO,GAAG;YACb,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI;SACX,CAAC;QACF,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACxB,CAAC;IA3BM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,QAAQ;SACf,CAAC;IACJ,CAAC;IAyBM,KAAK,CAAC,KAAY;QACvB,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;IAC7C,CAAC;IAEM,SAAS,CAAC,SAAiB;QAChC,QAAQ,SAAS,EAAE;YACjB,KAAK,CAAC;gBACJ,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;gBAClC,MAAM;YACR,KAAK,GAAG;gBACN,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;gBAClC,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACvE;IACH,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACzC,OAAO,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACzC,CAAC;;AAnDH,yBAoDC;AA7CgB,aAAM,GAAG;IACtB,QAAQ,EAAE,IAAI,GAAG,IAAI;IACrB,QAAQ,EAAE,IAAI,GAAG,KAAK;CACvB,CAAC","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.AK8963\n */\n\nimport Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport i2cCompass, { compassUnit, I2cCompassAbstractOptions } from \"../../i2cCompass\";\nimport { I2cInfo, Xyz } from \"../../i2cParts\";\n\nexport interface AK8963Options extends I2cCompassAbstractOptions {\n  adc_cycle?: number;\n}\n\nexport default class AK8963 extends i2cCompass {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"AK8963\",\n    };\n  }\n\n  private static scales = {\n    so_14bit: 4912 / 8190,\n    so_16bit: 4912 / 32760,\n  };\n  public i2cinfo: I2cInfo;\n  protected defaultUnit: compassUnit = \"uT\";\n  protected sf: compassUnit;\n  protected so: number;\n  protected range: string;\n\n  constructor() {\n    super();\n    this.i2cinfo = {\n      address: 0x0c,\n      clock: 100000,\n      voltage: \"3v\",\n      pull: \"3v\",\n    };\n    this.sf = this.defaultUnit;\n    this.so = AK8963.scales.so_16bit;\n    this.range = \"4912uT\";\n  }\n\n  public wired(obniz: Obniz) {\n    super.wired(obniz);\n    this.setConfig(this.params.adc_cycle || 8);\n  }\n\n  public setConfig(ADC_cycle: number) {\n    switch (ADC_cycle) {\n      case 8:\n        this.write(0x0a, [0x12]); // 16bit\n        break;\n      case 100:\n        this.write(0x0a, [0x16]); // 16bit\n        break;\n      default:\n        throw new Error(\"Invalid ADC_cycle value. Valid values are 8,100.\");\n    }\n  }\n\n  public async getAdcWait(): Promise<Xyz> {\n    const raw = await this.readWait(0x03, 7);\n    return AK8963.charArrayToXyz(raw, \"l\");\n  }\n}\n"]}