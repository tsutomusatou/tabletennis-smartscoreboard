{"version":3,"sources":["../src/parts/MovementSensor/AK8963/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAA4B,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACzF,OAAO,UAAU,EAAE,EAAE,WAAW,EAAE,yBAAyB,EAAE,MAAM,kBAAkB,CAAC;AACtF,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAE9C,MAAM,WAAW,aAAc,SAAQ,yBAAyB;IAC9D,SAAS,CAAC,EAAE,MAAM,CAAC;CACpB;AAED,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,UAAU;WAC9B,IAAI,IAAI,cAAc;IAMpC,OAAO,CAAC,MAAM,CAAC,MAAM,CAGnB;IACK,OAAO,EAAE,OAAO,CAAC;IACxB,SAAS,CAAC,WAAW,EAAE,WAAW,CAAQ;IAC1C,SAAS,CAAC,EAAE,EAAE,WAAW,CAAC;IAC1B,SAAS,CAAC,EAAE,EAAE,MAAM,CAAC;IACrB,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC;;IAejB,KAAK,CAAC,KAAK,EAAE,KAAK;IAKlB,SAAS,CAAC,SAAS,EAAE,MAAM;IAarB,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;CAIxC","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.AK8963\n */\n\nimport Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport i2cCompass, { compassUnit, I2cCompassAbstractOptions } from \"../../i2cCompass\";\nimport { I2cInfo, Xyz } from \"../../i2cParts\";\n\nexport interface AK8963Options extends I2cCompassAbstractOptions {\n  adc_cycle?: number;\n}\n\nexport default class AK8963 extends i2cCompass {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"AK8963\",\n    };\n  }\n\n  private static scales = {\n    so_14bit: 4912 / 8190,\n    so_16bit: 4912 / 32760,\n  };\n  public i2cinfo: I2cInfo;\n  protected defaultUnit: compassUnit = \"uT\";\n  protected sf: compassUnit;\n  protected so: number;\n  protected range: string;\n\n  constructor() {\n    super();\n    this.i2cinfo = {\n      address: 0x0c,\n      clock: 100000,\n      voltage: \"3v\",\n      pull: \"3v\",\n    };\n    this.sf = this.defaultUnit;\n    this.so = AK8963.scales.so_16bit;\n    this.range = \"4912uT\";\n  }\n\n  public wired(obniz: Obniz) {\n    super.wired(obniz);\n    this.setConfig(this.params.adc_cycle || 8);\n  }\n\n  public setConfig(ADC_cycle: number) {\n    switch (ADC_cycle) {\n      case 8:\n        this.write(0x0a, [0x12]); // 16bit\n        break;\n      case 100:\n        this.write(0x0a, [0x16]); // 16bit\n        break;\n      default:\n        throw new Error(\"Invalid ADC_cycle value. Valid values are 8,100.\");\n    }\n  }\n\n  public async getAdcWait(): Promise<Xyz> {\n    const raw = await this.readWait(0x03, 7);\n    return AK8963.charArrayToXyz(raw, \"l\");\n  }\n}\n"]}