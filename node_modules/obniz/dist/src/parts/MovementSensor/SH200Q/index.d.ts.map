{"version":3,"sources":["../src/parts/MovementSensor/SH200Q/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAiB,EAAE,OAAO,EAAE,uBAAuB,EAAE,MAAM,gBAAgB,CAAC;AAE5E,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAA4B,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACzF,OAAO,OAAO,EAAE,EAAyB,QAAQ,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAE9E,oBAAY,gBAAgB,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC;AACnD,oBAAY,eAAe,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,SAAS,GAAG,SAAS,CAAC;AAErF,MAAM,WAAW,aAAc,SAAQ,uBAAuB;CAAG;AAEjE,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,OAAO;IACzC,OAAc,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6BpB;WAEY,IAAI,IAAI,cAAc;IAM7B,OAAO,EAAE,OAAO,CAKrB;;IAMK,KAAK,CAAC,KAAK,EAAE,KAAK;IAIZ,UAAU,IAAI,OAAO,CAAC,MAAM,CAAC;IAK7B,QAAQ;IAkCd,SAAS,CAAC,mBAAmB,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM;IAmCxD,YAAY;IAUlB,aAAa,CAAC,WAAW,EAAE,gBAAgB,GAAG,IAAI;IASlD,YAAY,CAAC,UAAU,EAAE,eAAe,GAAG,IAAI;IAU/C,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,GAAG,IAAI,GAAG,SAAS,GAAG,MAAM,GAAG,IAAI;IAOnD,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC;IAK/B,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC;IAK9B,cAAc,IAAI,OAAO,CAAC,MAAM,CAAC;IAKjC,aAAa,IAAI,OAAO,CAAC,QAAQ,CAAC;CAQhD","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.SH200Q\n */\nimport i2cParts, { I2cInfo, I2cPartsAbstractOptions } from \"../../i2cParts\";\n\nimport Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport I2cImu6, { accelRange, gyroRange, Inertia6, Xyz } from \"../../i2cImu6\";\n\nexport type SH200QAccelRange = \"4g\" | \"8g\" | \"16g\";\nexport type SH200QGyroRange = \"125dps\" | \"250dps\" | \"500dps\" | \"1000dps\" | \"2000dps\";\n\nexport interface SH200QOptions extends I2cPartsAbstractOptions {}\n\nexport default class SH200Q extends I2cImu6 {\n  public static commands = {\n    whoami: 0x30,\n    whoami_result: 0x18,\n    acc_config: 0x0e,\n    gyro_config: 0x0f,\n    gyro_dlpf: 0x11,\n    fifo_config: 0x12,\n    acc_range: 0x16,\n    gyro_range: 0x2b,\n    output_acc: 0x00,\n    output_gyro: 0x06,\n    output_temp: 0x0c,\n    reg_set1: 0xba,\n    reg_set2: 0xca,\n    adc_reset: 0xc2,\n    soft_reset: 0x7f,\n    reset: 0x75,\n    accel_fs_sel: {\n      \"4g\": 0b00,\n      \"8g\": 0b01,\n      \"16g\": 0b10,\n    },\n    gyro_fs_sel: {\n      \"125dps\": 0b100,\n      \"250dps\": 0b011,\n      \"500dps\": 0b010,\n      \"1000dps\": 0b001,\n      \"2000dps\": 0b000,\n    },\n  };\n\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"SH200Q\",\n    };\n  }\n\n  public i2cinfo: I2cInfo = {\n    address: 0x6c,\n    clock: 100000,\n    voltage: \"3v\",\n    pull: \"3v\",\n  };\n\n  constructor() {\n    super();\n  }\n\n  public wired(obniz: Obniz) {\n    super.wired(obniz);\n  }\n\n  public async whoamiWait(): Promise<number> {\n    const result = await this.readWait(SH200Q.commands.whoami, 1);\n    return result[0];\n  }\n\n  public async initWait() {\n    await this.resetAdcWait();\n\n    await this.writeFlagWait(0xd8, 7);\n    await this.obniz.wait(1);\n    await this.clearFlagWait(0xd8, 7);\n\n    this.write(0x78, 0x61);\n    await this.obniz.wait(1);\n    this.write(0x78, 0x00);\n\n    // set acc odr 256hz\n    this.write(SH200Q.commands.acc_config, 0x91);\n\n    // set gyro odr 500hz\n    this.write(SH200Q.commands.gyro_config, 0x13);\n\n    // set gyro dlpf 50hz\n    this.write(SH200Q.commands.gyro_dlpf, 0x03);\n\n    // set no buffer mode\n    this.write(SH200Q.commands.fifo_config, 0x00);\n\n    this.setConfig(8, 2000);\n\n    this.write(SH200Q.commands.reg_set1, 0xc0);\n\n    // ADC Reset\n    await this.writeFlagWait(SH200Q.commands.reg_set2, 4);\n    await this.obniz.wait(1);\n    await this.clearFlagWait(SH200Q.commands.reg_set2, 4);\n    await this.obniz.wait(10);\n  }\n\n  public setConfig(accelerometer_range: number, gyroscope_range: number) {\n    switch (accelerometer_range) {\n      case 4:\n        this.setAccelRange(\"4g\");\n        break;\n      case 8:\n        this.setAccelRange(\"8g\");\n        break;\n      case 16:\n        this.setAccelRange(\"16g\");\n        break;\n      default:\n        throw new Error(\"accel_range variable 4,8,16 setting\");\n    }\n    switch (gyroscope_range) {\n      case 125:\n        this.setGyroRange(\"125dps\");\n        break;\n      case 250:\n        this.setGyroRange(\"250dps\");\n        break;\n      case 500:\n        this.setGyroRange(\"500dps\");\n        break;\n      case 1000:\n        this.setGyroRange(\"1000dps\");\n        break;\n      case 2000:\n        this.setGyroRange(\"2000dps\");\n        break;\n      default:\n        throw new Error(\"gyroscope_range variable 125,250,500,1000,2000 setting\");\n    }\n  }\n\n  public async resetAdcWait() {\n    // set 0xC2 bit2 1-->0\n    const tempdata: any = await this.readWait(SH200Q.commands.adc_reset, 1);\n    tempdata[0] = tempdata[0] | 0x04; // tempdata[0] = 0x0E; //CC\n    this.write(SH200Q.commands.adc_reset, tempdata);\n    await this.obniz.wait(1);\n    tempdata[0] = tempdata[0] & 0xfb; // tempdata[0] = 0x0A; //C8\n    this.write(SH200Q.commands.adc_reset, tempdata);\n  }\n\n  public setAccelRange(accel_range: SH200QAccelRange): void {\n    if (accel_range in SH200Q.commands.accel_fs_sel) {\n      this.write(SH200Q.commands.acc_range, SH200Q.commands.accel_fs_sel[accel_range]);\n      this.accel_so = accel_range;\n    } else {\n      throw new Error(`Invalid accel range. Valid values are: ${Object.keys(SH200Q.commands.accel_fs_sel).join()}`);\n    }\n  }\n\n  public setGyroRange(gyro_range: SH200QGyroRange): void {\n    if (gyro_range in SH200Q.commands.gyro_fs_sel) {\n      this.write(SH200Q.commands.gyro_range, SH200Q.commands.gyro_fs_sel[gyro_range]);\n      // @ts-ignore\n      this.gyro_so = gyro_range;\n    } else {\n      throw new Error(`Invalid gyro range. Valid values are: ${Object.keys(SH200Q.commands.gyro_fs_sel).join()}`);\n    }\n  }\n\n  public calcTemp(data?: number | null | undefined): number | null {\n    if (typeof data === \"undefined\" || data === null) {\n      return null;\n    }\n    return data / 333.87 + 21.0;\n  }\n\n  public async getAccelAdcWait(): Promise<Xyz> {\n    const raw = await this.readWait(SH200Q.commands.output_acc, 6);\n    return SH200Q.charArrayToXyz(raw, \"l\");\n  }\n\n  public async getGyroAdcWait(): Promise<Xyz> {\n    const raw = await this.readWait(SH200Q.commands.output_gyro, 6);\n    return SH200Q.charArrayToXyz(raw, \"l\");\n  }\n\n  public async getTempAdcWait(): Promise<number> {\n    const raw = await this.readWait(SH200Q.commands.output_temp, 2);\n    return SH200Q.charArrayToInt16(raw as [number, number], \"l\");\n  }\n\n  public async getAllAdcWait(): Promise<Inertia6> {\n    const raw = await this.readWait(SH200Q.commands.output_acc, 14); // request all data\n    return {\n      accelerometer: SH200Q.charArrayToXyz(raw.slice(0, 6), \"l\"),\n      gyroscope: SH200Q.charArrayToXyz(raw.slice(6, 12), \"l\"),\n      temperature: SH200Q.charArrayToInt16(raw.slice(12, 14) as [number, number], \"l\"),\n    };\n  }\n}\n"]}