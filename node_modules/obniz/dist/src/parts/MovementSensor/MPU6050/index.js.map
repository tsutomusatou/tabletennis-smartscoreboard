{"version":3,"sources":["../src/parts/MovementSensor/MPU6050/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.MPU6050\n */\n\nimport Obniz from \"../../../obniz\";\nimport { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport I2cImu6, { accelRange, gyroRange, I2cImu6AbstractOptions, Inertia6, Xyz } from \"../../i2cImu6\";\nimport { I2cInfo } from \"../../i2cParts\";\n\nexport interface MPU6050Options extends I2cImu6AbstractOptions {}\n\nexport default class MPU6050 extends I2cImu6 {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"MPU6050\",\n    };\n  }\n\n  protected static commands: any = {\n    whoami: 0x75,\n    whoami_result: 0x71,\n    pwr_mgmt_1: 0x6b,\n    pwr_mgmt_2: 0x6c,\n    smplrt_div: 0x19,\n    int_pin_cfg: 0x37,\n    int_enable: 0x38,\n    user_ctrl: 0x6a,\n    config: 0x1a,\n    fifo_en: 0x23,\n    accel_x_h: 0x3b,\n    accel_x_l: 0x3c,\n    accel_y_h: 0x3d,\n    accel_y_l: 0x3e,\n    accel_z_h: 0x3f,\n    accel_z_l: 0x40,\n    temp_h: 0x41,\n    temp_l: 0x42,\n    gyro_x_h: 0x43,\n    gyro_x_l: 0x44,\n    gyro_y_h: 0x45,\n    gyro_y_l: 0x46,\n    gyro_z_h: 0x47,\n    gyro_z_l: 0x48,\n    gyro_config: 0x1b,\n    accel_config: 0x1c,\n    accel_fs_sel: {\n      \"2g\": 0x00,\n      \"4g\": 0x08,\n      \"8g\": 0x10,\n      \"16g\": 0x18,\n    },\n    gyro_fs_sel: {\n      \"250dps\": 0x00,\n      \"500dps\": 0x08,\n      \"1000dps\": 0x10,\n      \"2000dps\": 0x18,\n    },\n  };\n\n  public i2cinfo: I2cInfo;\n\n  constructor() {\n    super();\n    this.i2cinfo = {\n      address: 0x68,\n      clock: 100000,\n      voltage: \"3v\",\n      pull: \"3v\",\n    };\n  }\n\n  public calcTemp(data?: number | null): number | null {\n    if (typeof data === \"undefined\" || data === null) {\n      return null;\n    }\n    return data / 333.87 + 21;\n  }\n\n  public wired(obniz: Obniz) {\n    super.wired(obniz);\n    this.init();\n  }\n\n  public init() {\n    this.write(MPU6050.commands.pwr_mgmt_1, 0x00);\n    this.obniz.wait(10);\n    // set dlpf\n    this.obniz.wait(1);\n    this.write(MPU6050.commands.config, 0x01);\n    // set samplerate div\n    this.obniz.wait(1);\n    this.write(MPU6050.commands.smplrt_div, 0x05);\n    // interrupt enable\n    this.obniz.wait(1);\n    this.write(MPU6050.commands.int_enable, 0x00);\n    this.obniz.wait(1);\n    this.write(MPU6050.commands.user_ctrl, 0x00);\n    this.obniz.wait(1);\n    this.write(MPU6050.commands.fifo_en, 0x00);\n    this.obniz.wait(1);\n    this.write(MPU6050.commands.int_pin_cfg, 0x22);\n    this.obniz.wait(1);\n    this.write(MPU6050.commands.int_enable, 0x01);\n    this.obniz.wait(1);\n    this.setConfig(2, 250);\n  }\n\n  public async sleepWait() {\n    await this.writeFlagWait(MPU6050.commands.pwr_mgmt_1, 6);\n  }\n\n  public async wakeWait() {\n    await this.clearFlagWait(MPU6050.commands.pwr_mgmt_1, 6);\n  }\n\n  public async resetWait() {\n    await this.writeFlagWait(MPU6050.commands.pwr_mgmt_1, 7);\n  }\n\n  public async configDlpfWait() {}\n\n  public async bypassMagnetometerWait(flag: boolean = true): Promise<void> {\n    // Enable I2C bypass to access for MPU9250 magnetometer access.\n    if (flag === true) {\n      await this.writeFlagWait(MPU6050.commands.int_pin_cfg, 1);\n    } else {\n      await this.clearFlagWait(MPU6050.commands.int_pin_cfg, 1);\n    }\n    // this.i2c.write(this.address, [MPU6050.commands.int_pin_cfg]);\n    // const data =  await this.i2c!.readWait(this.address, 1);\n    // data[0] |= MPU6050.commands.intPinConfigMask.bypass_en;\n    // this.i2c.write(this.address, [MPU6050.commands.int_pin_cfg, data[0]]);\n  }\n\n  public async whoamiWait(): Promise<number> {\n    const result = await this.readWait(MPU6050.commands.whoami, 1);\n    return result[0];\n  }\n\n  public async getAccelAdcWait(): Promise<Xyz> {\n    const raw = await this.readWait(MPU6050.commands.accel_x_h, 6);\n    return MPU6050.charArrayToXyz(raw, \"b\");\n  }\n\n  public async getGyroAdcWait(): Promise<Xyz> {\n    const raw = await this.readWait(MPU6050.commands.gyro_x_h, 6);\n    return MPU6050.charArrayToXyz(raw, \"b\");\n  }\n\n  public async getTempAdcWait(): Promise<number> {\n    const raw = await this.readWait(MPU6050.commands.temp_h, 2);\n    return MPU6050.charArrayToInt16(raw as [number, number], \"b\");\n  }\n\n  public async getAllAdcWait(): Promise<Inertia6> {\n    const raw = await this.readWait(MPU6050.commands.accel_x_h, 14);\n    return {\n      accelerometer: MPU6050.charArrayToXyz(raw.slice(0, 6), \"b\"),\n      gyroscope: MPU6050.charArrayToXyz(raw.slice(8, 14), \"b\"),\n      temperature: MPU6050.charArrayToInt16(raw.slice(6, 8) as [number, number], \"b\"),\n    };\n  }\n\n  public setAccelRange(accel_range: accelRange): void {\n    if (accel_range in MPU6050.commands.accel_fs_sel) {\n      this.write(MPU6050.commands.accel_config, MPU6050.commands.accel_fs_sel[accel_range]);\n      this.accel_so = accel_range;\n    } else {\n      throw new Error(`Invalid accel range. Valid values are: ${Object.keys(MPU6050.commands.accel_fs_sel).join()}`);\n    }\n  }\n\n  public setGyroRange(gyro_range: gyroRange): void {\n    if (gyro_range in MPU6050.commands.gyro_fs_sel) {\n      this.write(MPU6050.commands.gyro_config, MPU6050.commands.gyro_fs_sel[gyro_range]);\n      this.gyro_so = gyro_range;\n    } else {\n      throw new Error(`Invalid gyro range. Valid values are: ${Object.keys(MPU6050.commands.gyro_fs_sel).join()}`);\n    }\n  }\n\n  public setConfig(accelerometer_range: number, gyroscope_range: number, ADC_cycle?: any) {\n    // accel range set (0x00:2g, 0x08:4g, 0x10:8g, 0x18:16g)\n    switch (accelerometer_range) {\n      case 2:\n        this.setAccelRange(\"2g\");\n        break;\n      case 4:\n        this.setAccelRange(\"4g\");\n        break;\n      case 8:\n        this.setAccelRange(\"8g\");\n        break;\n      case 16:\n        this.setAccelRange(\"16g\");\n        break;\n      default:\n        throw new Error(\"accel_range variable 2,4,8,16 setting\");\n    }\n    // gyro range & LPF set (0x00:250, 0x08:500, 0x10:1000, 0x18:2000[deg/s])\n    switch (gyroscope_range) {\n      case 250:\n        this.setGyroRange(\"250dps\");\n        break;\n      case 500:\n        this.setGyroRange(\"500dps\");\n        break;\n      case 1000:\n        this.setGyroRange(\"1000dps\");\n        break;\n      case 2000:\n        this.setGyroRange(\"2000dps\");\n        break;\n      default:\n        throw new Error(\"accel_range variable 250,500,1000,2000 setting\");\n    }\n  }\n}\n"]}