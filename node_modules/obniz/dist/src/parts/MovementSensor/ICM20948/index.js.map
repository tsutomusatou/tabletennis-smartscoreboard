{"version":3,"sources":["../src/parts/MovementSensor/ICM20948/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.ICM20948\n */\n\nimport Obniz from \"../../../obniz\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport i2cParts, { I2cInfo, I2cPartsAbstractOptions } from \"../../i2cParts\";\nimport AK09916, { AK09916Options } from \"../AK09916/index\";\n\nexport interface ICM20948Options extends I2cPartsAbstractOptions {}\n\nexport default class ICM20948 extends i2cParts implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"ICM20948\",\n    };\n  }\n\n  public g = 9.80665;\n\n  public i2cinfo: I2cInfo = {\n    address: 0x69,\n    clock: 100000,\n    voltage: \"3v\",\n    pull: \"3v\",\n  };\n\n  protected obniz!: Obniz;\n\n  private _ADDR = 0x69;\n  private _ak09916?: AK09916;\n\n  private _WHO_AM_I = 0x00;\n  private _GYRO_CONFIG = 0x01;\n  private _ACCEL_CONFIG = 0x14;\n  private _ACCEL_CONFIG2 = 0x15;\n  private _INT_PIN_CFG = 0x0f;\n  private _ACCEL_XOUT_H = 0x2d;\n  private _ACCEL_XOUT_L = 0x2e;\n  private _ACCEL_YOUT_H = 0x2f;\n  private _ACCEL_YOUT_L = 0x30;\n  private _ACCEL_ZOUT_H = 0x31;\n  private _ACCEL_ZOUT_L = 0x32;\n  private _GYRO_XOUT_H = 0x33;\n  private _GYRO_XOUT_L = 0x34;\n  private _GYRO_YOUT_H = 0x35;\n  private _GYRO_YOUT_L = 0x36;\n  private _GYRO_ZOUT_H = 0x37;\n  private _GYRO_ZOUT_L = 0x38;\n\n  // #_ACCEL_FS_MASK = const(0b00011000)\n  private _ACCEL_FS_SEL_2G = 0b00000000;\n  private _ACCEL_FS_SEL_4G = 0b00000010;\n  private _ACCEL_FS_SEL_8G = 0b00000100;\n  private _ACCEL_FS_SEL_16G = 0b00000110;\n\n  private _ACCEL_SO_2G = 16384; // 1 / 16384 ie. 0.061 mg / digit\n  private _ACCEL_SO_4G = 8192; // 1 / 8192 ie. 0.122 mg / digit\n  private _ACCEL_SO_8G = 4096; // 1 / 4096 ie. 0.244 mg / digit\n  private _ACCEL_SO_16G = 2048; // 1 / 2048 ie. 0.488 mg / digit\n\n  private _GYRO_FS_MASK = 0b00000110;\n  private _GYRO_FS_SEL_250DPS = 0b00110001;\n  private _GYRO_FS_SEL_500DPS = 0b00110011;\n  private _GYRO_FS_SEL_1000DPS = 0b00110101;\n  private _GYRO_FS_SEL_2000DPS = 0b00110111;\n\n  private _GYRO_SO_250DPS = 131;\n  private _GYRO_SO_500DPS = 62.5;\n  private _GYRO_SO_1000DPS = 32.8;\n  private _GYRO_SO_2000DPS = 16.4;\n\n  // # Used for enablind and disabling the i2c bypass access\n  private _I2C_BYPASS_MASK = 0b00000010;\n  private _I2C_BYPASS_EN = 0b00000010;\n  private _I2C_BYPASS_DIS = 0b00000000;\n\n  private _SF_G = 1; //    g\n  private _SF_MG = 1000; //    mg\n  private _SF_M_S2 = 9.80665; // 1 g = 9.80665 m/s2 ie. standard gravity\n  private _SF_DEG_S = 1; // deg / s\n  private _SF_RAD_S = 57.295779578552; // 1 rad / s is 57.295779578552 deg / s;\n\n  private _accel_sf: number;\n  private _accel_so: number;\n  private _gyro_sf: number;\n  private _gyro_so: number;\n\n  constructor() {\n    super();\n    this._accel_sf = this._SF_M_S2;\n    this._accel_so = this._ACCEL_SO_2G;\n    this._gyro_sf = this._SF_DEG_S;\n    this._gyro_so = this._GYRO_SO_250DPS;\n  }\n\n  public wired(obniz: Obniz): void {\n    super.wired(obniz);\n    this._accel_so = this._accelFs(this._ACCEL_FS_SEL_2G);\n    this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_250DPS);\n  }\n\n  public async initWait() {\n    const data = await this.whoamiWait();\n    if (data !== 0xea) {\n      throw new Error(\"ICM20948 not found in I2C bus.\");\n    }\n\n    this.write(0x06, [0x01]); // wake;\n    this.write(0x0f, [0x02]); // passthrough;\n    this.write(0x03, [0x00]);\n\n    // this.write(12, 0x31, [0x00]);  // power down mode\n    // const buf3 = await this._studuinoI2C.readFromMem(12, 0x60, 3);\n\n    this._ak09916 = this.obniz.wired(\"AK09916\", { i2c: this.i2c });\n  }\n\n  public accelFs(value: string) {\n    if (value === \"2g\") {\n      this._accel_so = this._accelFs(this._ACCEL_FS_SEL_2G);\n    } else if (value === \"4g\") {\n      this._accel_so = this._accelFs(this._ACCEL_FS_SEL_4G);\n    } else if (value === \"8g\") {\n      this._accel_so = this._accelFs(this._ACCEL_FS_SEL_8G);\n    } else if (value === \"16g\") {\n      this._accel_so = this._accelFs(this._ACCEL_FS_SEL_16G);\n    } else {\n      throw new Error(\"must be '2g'/'4g'/'8g'/'16g'\");\n    }\n  }\n\n  public accelSf(value: string) {\n    if (value === \"g\") {\n      this._accel_sf = this._SF_G;\n    } else if (value === \"mg\") {\n      this._accel_sf = this._SF_MG;\n    } else if (value === \"ms2\") {\n      this._accel_sf = this._SF_M_S2;\n    } else {\n      throw new Error(\"must be 'g'/'mg'/'ms2'\");\n    }\n  }\n\n  public async accelerationWait(): Promise<[number, number, number]> {\n    /*\n    Acceleration measured by the sensor. By default will return a\n    3-tuple of X, Y, Z axis accelerationWait values in mG as integer.\n    */\n    const so = this._accel_so;\n    const sf = this._accel_sf;\n    const xyz: [number, number, number] = await this.readThreeInt16Wait(this._ACCEL_XOUT_H);\n    return xyz.map((e) => (e / so) * sf) as [number, number, number];\n  }\n\n  public async gyroWait(): Promise<[number, number, number]> {\n    // \"\"\"\n    // X, Y, Z radians per second as floats.\n    // \"\"\"\n    const so = this._gyro_so;\n    const sf = this._gyro_sf;\n    const xyz: [number, number, number] = await this.readThreeInt16Wait(this._GYRO_XOUT_H);\n    return xyz.map((e) => (e / so) * sf) as [number, number, number];\n  }\n\n  public async magneticWait(): Promise<[number, number, number]> {\n    return this._ak09916!.magnetic();\n  }\n\n  public async calibrateWait() {\n    return await this._ak09916!.calibrateWait();\n  }\n\n  public async whoamiWait(): Promise<number> {\n    // Value of the whoamiWait register. \"\"\"\n    const result = await this.readWait(this._WHO_AM_I, 1);\n    return result[0];\n  }\n\n  public gyroFs(value: string) {\n    if (value === \"250dps\") {\n      this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_250DPS);\n    } else if (value === \"500dps\") {\n      this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_500DPS);\n    } else if (value === \"1000dps\") {\n      this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_1000DPS);\n    } else if (value === \"2000dps\") {\n      this._gyro_so = this._gyroFs(this._GYRO_FS_SEL_2000DPS);\n    } else {\n      throw new Error(\"must be '250dps'/'500dps'/'1000dps'/'2000dps'\");\n    }\n  }\n\n  public gyroSf(value: string) {\n    if (value === \"dps\") {\n      this._gyro_sf = this._SF_DEG_S;\n    } else if (value === \"rps\") {\n      this._gyro_sf = this._SF_RAD_S;\n    } else {\n      throw new Error(\"must be 'dps'/'rps'\");\n    }\n  }\n\n  private async _gyroDlpfWait(dlpfcfg: number = -1) {\n    this.write(0x7f, [0x20]);\n    // # get ICM20948 gyroWait configuration.\n    let char: number = (await this.readWait(this._GYRO_CONFIG, 1))[0];\n    char &= this._GYRO_FS_MASK; // clear DLDF bits\n\n    if (dlpfcfg === -1) {\n      char |= 0x00000000;\n    } else if (dlpfcfg === 0) {\n      char |= 0x00000001;\n    } else if (dlpfcfg === 1) {\n      char |= 0x00001001;\n    } else if (dlpfcfg === 2) {\n      char |= 0x00010001;\n    } else if (dlpfcfg === 3) {\n      char |= 0x00011001;\n    } else if (dlpfcfg === 4) {\n      char |= 0x00100001;\n    } else if (dlpfcfg === 5) {\n      char |= 0x00101001;\n    } else if (dlpfcfg === 6) {\n      char |= 0x00110001;\n    } else if (dlpfcfg === 7) {\n      char |= 0x00111001;\n    } else {\n      char |= 0x00000000;\n    }\n    this.write(this._GYRO_CONFIG, [char]);\n    this.write(0x7f, [0x00]);\n  }\n\n  private _accelFs(value: number): number {\n    this.write(0x7f, [0x20]);\n    this.write(this._ACCEL_CONFIG, [value]);\n    this.write(0x7f, [0x00]);\n\n    // # Return the sensitivity divider\n    if (this._ACCEL_FS_SEL_2G === value) {\n      return this._ACCEL_SO_2G;\n    } else if (this._ACCEL_FS_SEL_4G === value) {\n      return this._ACCEL_SO_4G;\n    } else if (this._ACCEL_FS_SEL_8G === value) {\n      return this._ACCEL_SO_8G;\n    } else if (this._ACCEL_FS_SEL_16G === value) {\n      return this._ACCEL_SO_16G;\n    }\n    return 0;\n  }\n\n  private _gyroFs(value: number): number {\n    this.write(0x7f, [0x20]);\n    this.write(this._GYRO_CONFIG, [value]);\n    this.write(0x7f, [0x00]);\n\n    // # Return the sensitivity divider\n    if (this._GYRO_FS_SEL_250DPS === value) {\n      return this._GYRO_SO_250DPS;\n    } else if (this._GYRO_FS_SEL_500DPS === value) {\n      return this._GYRO_SO_500DPS;\n    } else if (this._GYRO_FS_SEL_1000DPS === value) {\n      return this._GYRO_SO_1000DPS;\n    } else if (this._GYRO_FS_SEL_2000DPS === value) {\n      return this._GYRO_SO_2000DPS;\n    }\n\n    return 0;\n  }\n}\n"]}