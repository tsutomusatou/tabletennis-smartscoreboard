{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/DHT12/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAC;AAC5F,OAAO,QAAQ,EAAE,EAAE,OAAO,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AAE/E,MAAM,WAAW,YAAa,SAAQ,uBAAuB;CAAG;AAEhE,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,QAAS,YAAW,mBAAmB;WAC1D,IAAI,IAAI,cAAc;IAM7B,OAAO,EAAE,OAAO,CAAC;;IAYjB,OAAO;IAID,cAAc,IAAI,OAAO,CAAC;QACrC,QAAQ,EAAE,MAAM,CAAC;QACjB,WAAW,EAAE,MAAM,CAAC;KACrB,CAAC;IAmBW,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;IAI9B,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC;CAG5C","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.DHT12\n */\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../../obniz/ObnizPartsInterface\";\nimport i2cParts, { I2cInfo, I2cPartsAbstractOptions } from \"../../../i2cParts\";\n\nexport interface DHT12Options extends I2cPartsAbstractOptions {}\n\nexport default class DHT12 extends i2cParts implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"DHT12\",\n    };\n  }\n\n  public i2cinfo: I2cInfo;\n\n  constructor() {\n    super();\n    this.i2cinfo = {\n      address: 0x5c,\n      clock: 100000,\n      voltage: \"3v\",\n      pull: \"3v\",\n    };\n  }\n\n  public i2cInfo() {\n    return this.i2cinfo;\n  }\n\n  public async getAllDataWait(): Promise<{\n    humidity: number;\n    temperature: number;\n  }> {\n    const data: any = await this.readWait(0x00, 5);\n    const humidity: any = data[0] + data[1] * 0.1;\n    let temperature: any = data[2] + (data[3] & 0x7f) * 0.1;\n    if (data[3] & 0x80) {\n      temperature *= -1;\n    }\n\n    const checksum: any = data[0] + data[1] + data[2] + data[3];\n    if (checksum !== data[4]) {\n      throw new Error(`checksum does not match`);\n    }\n\n    return {\n      humidity,\n      temperature,\n    };\n  }\n\n  public async getTempWait(): Promise<number> {\n    return ((await this.getAllDataWait()) as any).temperature;\n  }\n\n  public async getHumdWait(): Promise<number> {\n    return ((await this.getAllDataWait()) as any).humidity;\n  }\n}\n"]}