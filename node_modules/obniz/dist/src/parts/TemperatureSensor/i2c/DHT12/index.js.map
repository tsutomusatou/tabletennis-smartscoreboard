{"version":3,"sources":["../src/parts/TemperatureSensor/i2c/DHT12/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;AAGH,iEAA+E;AAI/E,MAAqB,KAAM,SAAQ,kBAAQ;IASzC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG;YACb,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,IAAI;SACX,CAAC;IACJ,CAAC;IAhBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,OAAO;SACd,CAAC;IACJ,CAAC;IAcM,OAAO;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,cAAc;QAIzB,MAAM,IAAI,GAAQ,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAC9C,IAAI,WAAW,GAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;QACxD,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;YAClB,WAAW,IAAI,CAAC,CAAC,CAAC;SACnB;QAED,MAAM,QAAQ,GAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QAED,OAAO;YACL,QAAQ;YACR,WAAW;SACZ,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,OAAQ,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAS,CAAC,WAAW,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,OAAQ,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAS,CAAC,QAAQ,CAAC;IACzD,CAAC;CACF;AApDD,wBAoDC","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.DHT12\n */\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../../obniz/ObnizPartsInterface\";\nimport i2cParts, { I2cInfo, I2cPartsAbstractOptions } from \"../../../i2cParts\";\n\nexport interface DHT12Options extends I2cPartsAbstractOptions {}\n\nexport default class DHT12 extends i2cParts implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"DHT12\",\n    };\n  }\n\n  public i2cinfo: I2cInfo;\n\n  constructor() {\n    super();\n    this.i2cinfo = {\n      address: 0x5c,\n      clock: 100000,\n      voltage: \"3v\",\n      pull: \"3v\",\n    };\n  }\n\n  public i2cInfo() {\n    return this.i2cinfo;\n  }\n\n  public async getAllDataWait(): Promise<{\n    humidity: number;\n    temperature: number;\n  }> {\n    const data: any = await this.readWait(0x00, 5);\n    const humidity: any = data[0] + data[1] * 0.1;\n    let temperature: any = data[2] + (data[3] & 0x7f) * 0.1;\n    if (data[3] & 0x80) {\n      temperature *= -1;\n    }\n\n    const checksum: any = data[0] + data[1] + data[2] + data[3];\n    if (checksum !== data[4]) {\n      throw new Error(`checksum does not match`);\n    }\n\n    return {\n      humidity,\n      temperature,\n    };\n  }\n\n  public async getTempWait(): Promise<number> {\n    return ((await this.getAllDataWait()) as any).temperature;\n  }\n\n  public async getHumdWait(): Promise<number> {\n    return ((await this.getAllDataWait()) as any).humidity;\n  }\n}\n"]}