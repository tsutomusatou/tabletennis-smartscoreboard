{"version":3,"sources":["../src/parts/Camera/JpegSerialCam/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAiBH,MAAqB,aAAa;IAkBhC;QACE,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAEzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAC1B,IAAI,CAAC,cAAc,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;IAC7D,CAAC;IAxBM,MAAM,CAAC,IAAI;QAChB,OAAO;YACL,IAAI,EAAE,eAAe;SACtB,CAAC;IACJ,CAAC;IAsBM,KAAK,CAAC,KAAY;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAEhC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,IAAoB,EAAE,MAAgB,EAAE,IAAe;QAC9E,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,GAAG,EAAE,CAAC;SACX;QACD,OAAO,IAAI,EAAE;YACX,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC1C,IAAI,IAAI,IAAI,CAAC,EAAE;gBACb,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBACrB,OAAO,IAAI,CAAC;aACb;YACD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC3B;IACH,CAAC;IAEM,SAAS,CAAC,MAAgB,EAAE,GAAa;QAC9C,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE;gBACxB,CAAC,EAAE,CAAC;gBACJ,IAAI,CAAC,KAAK,MAAM,CAAC,MAAM,EAAE;oBACvB,OAAO,CAAC,GAAG,CAAC,CAAC;iBACd;aACF;iBAAM;gBACL,CAAC,GAAG,CAAC,CAAC;aACP;SACF;QACD,OAAO,CAAC,CAAC,CAAC;IACZ,CAAC;IAEM,aAAa,CAAC,KAAe;QAClC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,GAAQ;QAC7B,IAAI,CAAC,GAAG,EAAE;YACR,GAAG,GAAG,EAAE,CAAC;SACV;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;YACd,EAAE,EAAE,IAAI,CAAC,KAAK;YACd,EAAE,EAAE,IAAI,CAAC,KAAK;YACd,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,KAAK;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,OAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QACrE,IAAI,CAAC,KAAK,CAAC,OAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QACrE,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,SAAS;QACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACzC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5D,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,UAA6B;QACpD,IAAI,GAAW,CAAC;QAChB,IAAI,UAAU,KAAK,SAAS,EAAE;YAC5B,GAAG,GAAG,IAAI,CAAC;SACZ;aAAM,IAAI,UAAU,KAAK,SAAS,EAAE;YACnC,GAAG,GAAG,IAAI,CAAC;SACZ;aAAM,IAAI,UAAU,KAAK,SAAS,EAAE;YACnC,GAAG,GAAG,IAAI,CAAC;SACZ;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACrC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACtE,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5D,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,sBAAsB,CAAC,QAAgB;QAClD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;QACtE,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5D,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,IAAuB;QAC9C,IAAI,GAAQ,CAAC;QACb,QAAQ,IAAI,EAAE;YACZ,KAAK,IAAI;gBACP,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnB,MAAM;YACR,KAAK,KAAK;gBACR,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnB,MAAM;YACR,KAAK,KAAK;gBACR,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnB,MAAM;YACR,KAAK,KAAK;gBACR,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnB,MAAM;YACR,KAAK,MAAM;gBACT,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACnB,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjF,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5D,+BAA+B;QAC/B,MAAM,IAAI,CAAC,SAAS,CAAC;YACnB,IAAI;SACL,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,8BAA8B;QAC9B,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAE7D,8BAA8B;QAC9B,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAE7D,6BAA6B;QAC7B,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,4BAA4B;QACvE,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;QAC3F,IAAI,EAAO,CAAC;QACZ,IAAI,EAAO,CAAC;QACZ,OAAO,IAAI,EAAE;YACX,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,qBAAqB;YACrB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC3B,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;gBACpB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACb,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACb,MAAM;aACP;YACD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7B;QACD,MAAM,SAAS,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC;QAChC,iDAAiD;QACjD,wCAAwC;QACxC,gCAAgC;QAEhC,qCAAqC;QACrC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACxG,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACpE,6BAA6B;QAC7B,OAAO,IAAI,EAAE;YACX,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC3B,8BAA8B;YAC9B,IAAI,IAAI,CAAC,MAAM,IAAI,SAAS,EAAE;gBAC5B,MAAM;aACP;YACD,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC3B;QACD,uBAAuB;QACvB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,cAAc;QAChD,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAlMD,gCAkMC","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.JpegSerialCam\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface JpegSerialCamOptions {\n  vcc?: number;\n  cam_tx: number;\n  cam_rx: number;\n  gnd?: number;\n}\n\nexport type JpegSerialCamSize = \"640x480\" | \"320x240\" | \"160x120\";\n\nexport type JpegSerialCamBaud = 9600 | 19200 | 38400 | 57600 | 115200;\n\nexport default class JpegSerialCam implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"JpegSerialCam\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public ioKeys: string[];\n  public displayName: string;\n  public displayIoNames: any;\n  public obniz!: Obniz;\n  public params: any;\n  public my_tx: any;\n  public my_rx: any;\n  public uart!: PeripheralUART;\n\n  constructor() {\n    this.keys = [\"vcc\", \"cam_tx\", \"cam_rx\", \"gnd\"];\n    this.requiredKeys = [\"cam_tx\", \"cam_rx\"];\n\n    this.ioKeys = this.keys;\n    this.displayName = \"Jcam\";\n    this.displayIoNames = { cam_tx: \"camTx\", cam_rx: \"camRx\" };\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n    this.my_tx = this.params.cam_rx;\n    this.my_rx = this.params.cam_tx;\n\n    this.obniz.getIO(this.my_tx).drive(\"3v\");\n\n    this.uart = this.obniz.getFreeUart();\n  }\n\n  public async _drainUntil(uart: PeripheralUART, search: number[], recv?: number[]) {\n    if (!recv) {\n      recv = [];\n    }\n    while (true) {\n      const readed = uart.readBytes();\n      recv = recv.concat(readed);\n      const tail = this._seekTail(search, recv);\n      if (tail >= 0) {\n        recv.splice(0, tail);\n        return recv;\n      }\n      await this.obniz.wait(10);\n    }\n  }\n\n  public _seekTail(search: number[], src: number[]) {\n    let f = 0;\n    for (let i = 0; i < src.length; i++) {\n      if (src[i] === search[f]) {\n        f++;\n        if (f === search.length) {\n          return i + 1;\n        }\n      } else {\n        f = 0;\n      }\n    }\n    return -1;\n  }\n\n  public arrayToBase64(array: number[]): string {\n    return Buffer.from(array).toString(\"base64\");\n  }\n\n  public async startWait(obj: any) {\n    if (!obj) {\n      obj = {};\n    }\n    this.uart.start({\n      tx: this.my_tx,\n      rx: this.my_rx,\n      baud: obj.baud || 38400,\n    });\n    this.obniz.display!.setPinName(this.my_tx, \"JpegSerialCam\", \"camRx\");\n    this.obniz.display!.setPinName(this.my_rx, \"JpegSerialCam\", \"camTx\");\n    await this.obniz.wait(2500);\n  }\n\n  public async resetwait() {\n    this.uart.send([0x56, 0x00, 0x26, 0x00]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x26, 0x00]);\n    await this.obniz.wait(2500);\n  }\n\n  public async setSizeWait(resolution: JpegSerialCamSize) {\n    let val: number;\n    if (resolution === \"640x480\") {\n      val = 0x00;\n    } else if (resolution === \"320x240\") {\n      val = 0x11;\n    } else if (resolution === \"160x120\") {\n      val = 0x22;\n    } else {\n      throw new Error(\"unsupported size\");\n    }\n    this.uart.send([0x56, 0x00, 0x31, 0x05, 0x04, 0x01, 0x00, 0x19, val]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\n    await this.resetwait();\n  }\n\n  public async setCompressibilityWait(compress: number) {\n    const val = Math.floor((compress / 100) * 0xff);\n    this.uart.send([0x56, 0x00, 0x31, 0x05, 0x01, 0x01, 0x12, 0x04, val]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\n    await this.resetwait();\n  }\n\n  public async setBaudWait(baud: JpegSerialCamBaud) {\n    let val: any;\n    switch (baud) {\n      case 9600:\n        val = [0xae, 0xc8];\n        break;\n      case 19200:\n        val = [0x56, 0xe4];\n        break;\n      case 38400:\n        val = [0x2a, 0xf2];\n        break;\n      case 57600:\n        val = [0x1c, 0x4c];\n        break;\n      case 115200:\n        val = [0x0d, 0xa6];\n        break;\n      default:\n        throw new Error(\"invalid baud rate\");\n    }\n    this.uart.send([0x56, 0x00, 0x31, 0x06, 0x04, 0x02, 0x00, 0x08, val[0], val[1]]);\n    await this._drainUntil(this.uart, [0x76, 0x00, 0x31, 0x00]);\n    // await this.obniz.wait(1000);\n    await this.startWait({\n      baud,\n    });\n  }\n\n  public async takeWait(): Promise<number[]> {\n    const uart = this.uart;\n    // console.log(\"stop a photo\")\n    uart.send([0x56, 0x00, 0x36, 0x01, 0x02]);\n    await this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);\n\n    // console.log(\"take a photo\")\n    uart.send([0x56, 0x00, 0x36, 0x01, 0x00]);\n    await this._drainUntil(uart, [0x76, 0x00, 0x36, 0x00, 0x00]);\n\n    // console.log(\"read length\")\n    uart.send([0x56, 0x00, 0x34, 0x01, 0x00]); // read length of image data\n    let recv = await this._drainUntil(uart, [0x76, 0x00, 0x34, 0x00, 0x04, 0x00, 0x00]); // ack\n    let XX: any;\n    let YY: any;\n    while (true) {\n      const readed = uart.readBytes();\n      // console.log(recv);\n      recv = recv.concat(readed);\n      if (recv.length >= 2) {\n        XX = recv[0];\n        YY = recv[1];\n        break;\n      }\n      await this.obniz.wait(1000);\n    }\n    const databytes = XX * 256 + YY;\n    // console.log(\"image: \" + databytes + \" Bytes\");\n    // const high = (databytes >> 8) & 0xff;\n    // const low = databytes & 0xff;\n\n    // console.log(\"start reading image\")\n    uart.send([0x56, 0x00, 0x32, 0x0c, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, XX, YY, 0x00, 0xff]);\n    recv = await this._drainUntil(uart, [0x76, 0x00, 0x32, 0x00, 0x00]);\n    // console.log(\"reading...\");\n    while (true) {\n      const readed = uart.readBytes();\n      recv = recv.concat(readed);\n      // console.log(readed.length);\n      if (recv.length >= databytes) {\n        break;\n      }\n      await this.obniz.wait(10);\n    }\n    // console.log(\"done\");\n    recv = recv.splice(0, databytes); // remove tail\n    recv = recv.concat([0xff, 0xd9]);\n    return recv;\n  }\n}\n"]}