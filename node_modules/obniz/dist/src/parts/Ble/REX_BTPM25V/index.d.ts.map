{"version":3,"sources":["../src/parts/Ble/REX_BTPM25V/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,MAAM,WAAW,kBAAkB;CAAG;AAEtC,MAAM,CAAC,OAAO,OAAO,WAAY,YAAW,mBAAmB;WAC/C,IAAI,IAAI,cAAc;WAMtB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;IAO/C,IAAI,EAAE,MAAM,EAAE,CAAM;IACpB,YAAY,EAAE,MAAM,EAAE,CAAM;IAC5B,MAAM,EAAE,GAAG,CAAC;IACZ,eAAe,EAAE,CAAC,CAAC,OAAO,EAAE,OAAO,KAAK,IAAI,CAAC,GAAG,IAAI,CAAQ;IAE5D,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAQ;IAC/C,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;IAE5C,OAAO,CAAC,MAAM,CAMZ;IACF,OAAO,CAAC,iCAAiC,CAAwC;IACjF,OAAO,CAAC,oCAAoC,CAAwC;IACpF,OAAO,CAAC,kBAAkB,CAAwC;IAClE,OAAO,CAAC,qBAAqB,CAAwC;gBAEzD,UAAU,EAAE,mBAAmB,GAAG,IAAI;IAQ3C,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;IAEnB,WAAW;IA8BX,cAAc;IAId,kBAAkB;;;;;;;;;IAUlB,qBAAqB;;;;;;;;;;;IAUrB,UAAU;IAOvB,OAAO,CAAC,mBAAmB;IAO3B,OAAO,CAAC,cAAc;IA4BtB,OAAO,CAAC,SAAS;IAgBjB,OAAO,CAAC,iBAAiB;CAiD1B","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.REX_BTPM25V\n */\n\nimport Obniz from \"../../../obniz\";\nimport BleRemoteCharacteristic from \"../../../obniz/libs/embeds/bleHci/bleRemoteCharacteristic\";\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface REX_BTPM25VOptions {}\n\nexport default class REX_BTPM25V implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"REX_BTPM25V\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    if (peripheral.localName !== \"PM25V\") {\n      return false;\n    }\n    return true;\n  }\n\n  public keys: string[] = [];\n  public requiredKeys: string[] = [];\n  public params: any;\n  public onbuttonpressed: ((pressed: boolean) => void) | null = null;\n\n  public _peripheral: BleRemotePeripheral | null = null;\n  public ondisconnect?: (reason: any) => void;\n\n  private _uuids = {\n    service: \"00001523-1212-EFDE-1523-785FEABCD123\",\n    buttonChar: \"000000A1-1212-EFDE-1523-785FEABCD123\",\n    continuousMeasurementChar: \"000000A5-1212-EFDE-1523-785FEABCD123\",\n    oneShotMeasurementChar: \"000000A8-1212-EFDE-1523-785FEABCD123\",\n    ledChar: \"000000A9-1212-EFDE-1523-785FEABCD123\",\n  };\n  private _oneShotMeasurementCharacteristic: BleRemoteCharacteristic | null = null;\n  private _continuousMeasurementCharacteristic: BleRemoteCharacteristic | null = null;\n  private _ledCharacteristic: BleRemoteCharacteristic | null = null;\n  private _buttonCharacteristic: BleRemoteCharacteristic | null = null;\n\n  constructor(peripheral: BleRemotePeripheral | null) {\n    if (peripheral && !REX_BTPM25V.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not RS_Seek3\");\n    }\n    this._peripheral = peripheral;\n  }\n\n  // @ts-ignore\n  public wired(obniz: Obniz): void {}\n\n  public async connectWait() {\n    if (!this._peripheral) {\n      throw new Error(\"RS_Seek3 is not find.\");\n    }\n    this._peripheral.ondisconnect = (reason: any) => {\n      if (typeof this.ondisconnect === \"function\") {\n        this.ondisconnect(reason);\n      }\n    };\n    await this._peripheral.connectWait();\n    this._oneShotMeasurementCharacteristic = this._peripheral\n      .getService(this._uuids.service)!\n      .getCharacteristic(this._uuids.oneShotMeasurementChar);\n    this._continuousMeasurementCharacteristic = this._peripheral\n      .getService(this._uuids.service)!\n      .getCharacteristic(this._uuids.continuousMeasurementChar);\n    this._ledCharacteristic = this._peripheral.getService(this._uuids.service)!.getCharacteristic(this._uuids.ledChar);\n    this._buttonCharacteristic = this._peripheral\n      .getService(this._uuids.service)!\n      .getCharacteristic(this._uuids.buttonChar);\n\n    if (this._buttonCharacteristic) {\n      this._buttonCharacteristic.registerNotify((data: number[]) => {\n        if (typeof this.onbuttonpressed === \"function\") {\n          this.onbuttonpressed(data[0] === 1);\n        }\n      });\n    }\n  }\n\n  public async disconnectWait() {\n    await this._peripheral?.disconnectWait();\n  }\n\n  public async measureOneShotWait() {\n    if (!this._oneShotMeasurementCharacteristic) {\n      throw new Error(\"device is not connected\");\n    }\n    const sendData = new Array(20);\n    sendData[0] = 0x01;\n    const data = await this._sendAndReceiveWait(this._oneShotMeasurementCharacteristic, sendData);\n    return this._analyzeResult(data);\n  }\n\n  public async measureOneShotExtWait() {\n    if (!this._oneShotMeasurementCharacteristic) {\n      throw new Error(\"device is not connected\");\n    }\n    const sendData = new Array(20);\n    sendData[0] = 0x10;\n    const data = await this._sendAndReceiveWait(this._oneShotMeasurementCharacteristic, sendData);\n    return this._analyzeResultExt(data);\n  }\n\n  public async getLedMode() {\n    if (!this._ledCharacteristic) {\n      throw new Error(\"device is not connected\");\n    }\n    const data = this._sendAndReceiveWait(this._ledCharacteristic, [0xff, 0x00]);\n  }\n\n  private _sendAndReceiveWait(char: BleRemoteCharacteristic, data: number[]): Promise<number[]> {\n    return new Promise((resolve) => {\n      char.registerNotify(resolve);\n      char.write(data);\n    });\n  }\n\n  private _analyzeResult(data: number[]) {\n    const buf = Buffer.from(data);\n    const [minutes, hour, day, month, year] = buf.slice(0, 5);\n    const pm2_5 = buf.readInt16LE(5);\n    const pm10 = buf.readInt16LE(7);\n    const barometricPressure = buf.readInt16LE(9);\n    const temperature = buf.readInt8(11);\n    const humidity = buf.readInt8(12);\n    const lux = buf.readUInt16LE(13);\n    const dummy = buf.slice(15, 19);\n    const mode = buf.readInt8(19);\n\n    return {\n      // minutes,\n      // hour,\n      // day,\n      // month,\n      // year,\n      pm2_5,\n      pm10,\n      barometricPressure,\n      temperature,\n      humidity,\n      lux,\n      mode,\n    };\n  }\n\n  private _bitValue(buffer: Buffer, location: { start: number; end: number }): number {\n    const startLoc = { byte: Math.floor(location.start / 8), bit: location.start % 8 };\n    const endLoc = { byte: Math.floor(location.end / 8), bit: location.end % 8 };\n\n    let result = 0;\n    result = buffer.readUInt8(endLoc.byte) & (~(0xff << (endLoc.bit + 1)) & 0xff);\n    if (startLoc.byte === endLoc.byte) {\n      return result >> startLoc.bit;\n    }\n    for (let byte = endLoc.byte - 1; byte > startLoc.byte; byte--) {\n      result = result << (8 + buffer.readInt8(byte));\n    }\n    result = (result << (8 - startLoc.bit)) + (buffer.readUInt8(startLoc.byte) >> startLoc.bit);\n    return result;\n  }\n\n  private _analyzeResultExt(data: number[]) {\n    const buf = Buffer.from(data);\n    const buf1 = buf.slice(0, 4);\n    const minutes = this._bitValue(buf1, { start: 5, end: 10 });\n    const hour = this._bitValue(buf1, { start: 11, end: 15 });\n    const day = this._bitValue(buf1, { start: 16, end: 20 });\n    const month = this._bitValue(buf1, { start: 21, end: 24 });\n    const year = this._bitValue(buf1, { start: 25, end: 31 });\n\n    const buf2 = buf.slice(4, 8);\n    const pm2_5 = this._bitValue(buf2, { start: 0, end: 9 });\n    const pm10 = this._bitValue(buf2, { start: 10, end: 19 });\n    const uv = this._bitValue(buf2, { start: 20, end: 23 });\n\n    const buf3 = buf.slice(8, 12);\n    const temperature = this._bitValue(buf3, { start: 0, end: 10 }) / 10 - 40;\n    const humidity = this._bitValue(buf3, { start: 11, end: 20 }) / 10;\n\n    const buf4 = buf.slice(12, 16);\n    const barometricPressure = this._bitValue(buf4, { start: 0, end: 13 }) / 10;\n    const vocState_init = this._bitValue(buf4, { start: 14, end: 14 });\n    const vocState_wakeup = this._bitValue(buf4, { start: 15, end: 15 });\n    const lux = this._bitValue(buf4, { start: 16, end: 31 });\n\n    const buf5 = buf.slice(16, 20);\n    const tvoc = this._bitValue(buf5, { start: 0, end: 10 });\n    const eco2 = this._bitValue(buf5, { start: 11, end: 23 });\n    const mode = this._bitValue(buf5, { start: 24, end: 31 });\n\n    return {\n      // minutes,\n      // hour,\n      // day,\n      // month,\n      // year,\n      pm2_5,\n      pm10,\n      barometricPressure,\n      temperature,\n      humidity,\n      lux,\n      // mode,\n      tvoc,\n      eco2,\n      uv,\n      // vocState_init,\n      // vocState_wakeup,\n    };\n  }\n}\n"]}