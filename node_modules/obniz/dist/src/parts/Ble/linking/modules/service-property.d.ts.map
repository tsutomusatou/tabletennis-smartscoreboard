{"version":3,"sources":["../src/parts/Ble/linking/modules/service-property.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAWH,MAAM,CAAC,OAAO,OAAO,sBAAsB;IAClC,UAAU,SAAQ;IAClB,YAAY,SAAyC;IACrD,gBAAgB,EAAE,GAAG,CAG1B;IAGF,OAAO,CAAC,qBAAqB,CAE3B;IACF,OAAO,CAAC,OAAO,CAAW;;IAInB,aAAa,CAAC,IAAI,EAAE,GAAG;IAIvB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAkBhC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAyBlC,gBAAgB,CAAC,GAAG,EAAE,GAAG;;;;;IAuBzB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;;IAarB,iBAAiB,CAAC,GAAG,EAAE,GAAG;;;;;;;IAwB1B,cAAc,CAAC,GAAG,EAAE,GAAG;;;;IAOvB,eAAe,CAAC,GAAG,EAAE,GAAG;;;;IAOxB,sBAAsB,CAAC,GAAG,EAAE,GAAG;;;;;;;IA8B/B,yBAAyB,CAAC,GAAG,EAAE,GAAG;;;;;;IA8BlC,kBAAkB,CAAC,GAAG,EAAE,GAAG;;;;;;;IAiC3B,aAAa,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IA2B5C,cAAc,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAQ7C,kCAAkC,CAAC,MAAM,EAAE,GAAG;CAKtD","file":"service-property.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Linking\n */\n\n/* ------------------------------------------------------------------\n * node-linking - service-property.js\n *\n * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.\n * Released under the MIT license\n * Date: 2019-10-24\n * ---------------------------------------------------------------- */\n\"use strict\";\n\nexport default class LinkingServiceProperty {\n  public SERVICE_ID = 0x00;\n  public SERVICE_NAME = \"PeripheralDevicePropertyInformation\";\n  public MESSAGE_NAME_MAP: any = {\n    \"00\": \"GET_DEVICE_INFORMATION\",\n    \"01\": \"GET_DEVICE_INFORMATION_RESP\",\n  };\n\n  // Private\n  private _WRITE_MESSAGE_ID_MAP: any = {\n    GET_DEVICE_INFORMATION: 0x00,\n  };\n  private _device: any = {};\n\n  constructor() {}\n\n  public setDeviceInfo(info: any) {\n    this._device = info;\n  }\n\n  public parsePayload(pnum: any, buf: any) {\n    let offset = 0;\n    const parameters = [];\n    try {\n      for (let i = 0; i < pnum; i++) {\n        const pid = buf.readUInt8(offset++);\n        let plen_buf = buf.slice(offset, offset + 3);\n        plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);\n        const plen = plen_buf.readUInt32LE(0);\n        offset += 3;\n        const pvalue_buf = buf.slice(offset, offset + plen);\n        offset += plen;\n        parameters.push(this._parseParameter(pid, pvalue_buf));\n      }\n    } catch (e) {}\n    return parameters;\n  }\n\n  public _parseParameter(pid: any, buf: any) {\n    let parsed: any = null;\n    if (pid === 0x00) {\n      parsed = this._parseResultCode(buf);\n    } else if (pid === 0x01) {\n      parsed = this._parseCancel(buf);\n    } else if (pid === 0x02) {\n      parsed = this._parseServiceList(buf);\n    } else if (pid === 0x03) {\n      parsed = this._parseDeviceId(buf);\n    } else if (pid === 0x04) {\n      parsed = this._parseDeviceUid(buf);\n    } else if (pid === 0x05) {\n      parsed = this._parseDeviceCapability(buf);\n    } else if (pid === 0x06) {\n      parsed = this._parseOriginalInformation(buf);\n    } else if (pid === 0x07) {\n      parsed = this._parseExSensorType(buf);\n    }\n    if (parsed) {\n      parsed.parameterId = pid;\n    }\n    return parsed;\n  }\n\n  public _parseResultCode(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OK, request processed correctly\";\n    } else if (code === 0x01) {\n      text = \"Cancel\";\n    } else if (code === 0x02) {\n      text = \"Error, failed\";\n    } else if (code === 0x03) {\n      text = \"Error, no reason defined\";\n    } else if (code === 0x04) {\n      text = \"Error, data not available\";\n    } else if (code === 0x05) {\n      text = \"Error, not supported\";\n    }\n    return {\n      name: \"ResultCode\",\n      resultCode: code,\n      resultText: text,\n    };\n  }\n\n  public _parseCancel(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"User cancel\";\n    }\n    return {\n      name: \"Cancel\",\n      cancelCode: code,\n      cancelText: text,\n    };\n  }\n\n  public _parseServiceList(buf: any) {\n    const v = buf.readUInt8(0);\n    const list = [];\n    if (v & 0b00000001) {\n      list.push({ id: 0, name: \"PeripheralDevicePropertyInformation\" });\n    }\n    if (v & 0b00000010) {\n      list.push({ id: 1, name: \"PeripheralDeviceNotification\" });\n    }\n    if (v & 0b00000100) {\n      list.push({ id: 2, name: \"PeripheralDeviceOperation\" });\n    }\n    if (v & 0b00001000) {\n      list.push({ id: 3, name: \"PeripheralDeviceSensorInformation\" });\n    }\n    if (v & 0b00010000) {\n      list.push({ id: 4, name: \"PeripheralDeviceSettingOperation\" });\n    }\n    return {\n      name: \"ServiceList\",\n      serviceList: list,\n    };\n  }\n\n  public _parseDeviceId(buf: any) {\n    return {\n      name: \"DeviceId\",\n      deviceId: buf.toString(\"hex\"),\n    };\n  }\n\n  public _parseDeviceUid(buf: any) {\n    return {\n      name: \"DeviceUid\",\n      deviceUid: buf.toString(\"hex\"),\n    };\n  }\n\n  public _parseDeviceCapability(buf: any) {\n    const v = buf.readUInt8(0);\n    const list = [];\n    if (v & 0b00000010) {\n      list.push({ id: 1, name: \"Gyroscope\" });\n    }\n    if (v & 0b00000100) {\n      list.push({ id: 2, name: \"Accelerometer\" });\n    }\n    if (v & 0b00001000) {\n      list.push({ id: 3, name: \"Orientation\" });\n    }\n    if (v & 0b00010000) {\n      list.push({ id: 4, name: \"Battery\" });\n    }\n    if (v & 0b00100000) {\n      list.push({ id: 5, name: \"Temperature\" });\n    }\n    if (v & 0b01000000) {\n      list.push({ id: 6, name: \"Humidity\" });\n    }\n    if (v & 0b10000000) {\n      list.push({ id: 7, name: \"Atmospheric pressure\" });\n    }\n    return {\n      name: \"DeviceCapability\",\n      deviceCapability: list,\n    };\n  }\n\n  public _parseOriginalInformation(buf: any) {\n    const type = buf.readUInt8(0);\n    let type_name = \"\";\n    if (type === 0x00) {\n      type_name = \"AppName\";\n    } else if (type === 0x01) {\n      type_name = \"AppNameLocal\";\n    } else if (type === 0x02) {\n      type_name = \"AppDLURL1\";\n    } else if (type === 0x03) {\n      type_name = \"AppDLURL2\";\n    } else if (type === 0x04) {\n      type_name = \"AppDLURL3\";\n    } else if (type === 0x05) {\n      type_name = \"AppExecInfo1\";\n    } else if (type === 0x06) {\n      type_name = \"AppExecInfo2\";\n    } else if (type === 0x07) {\n      type_name = \"AppExecInfo3\";\n    } else if (type === 0x08) {\n      type_name = \"AppPackage\";\n    }\n    return {\n      name: \"OriginalInformation\",\n      originalInformationCode: type,\n      originalInformationName: type_name,\n      originalInformationText: buf.slice(1).toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseExSensorType(buf: any) {\n    const v = buf.readUInt8(0);\n    const list = [];\n    if (v & 0b00000001) {\n      list.push({ id: 0, name: \"Version\" });\n    }\n    if (v & 0b00000010) {\n      list.push({ id: 1, name: \"Version\" });\n    }\n    if (v & 0b00000100) {\n      list.push({ id: 2, name: \"Flag\" });\n    }\n    if (v & 0b00001000) {\n      list.push({ id: 3, name: \"Button\" });\n    }\n    if (v & 0b00010000) {\n      list.push({ id: 4, name: \"Opening and closing\" });\n    }\n    if (v & 0b00100000) {\n      list.push({ id: 5, name: \"Human detection\" });\n    }\n    if (v & 0b01000000) {\n      list.push({ id: 6, name: \"Move\" });\n    }\n    if (v & 0b10000000) {\n      list.push({ id: 7, name: \"Illuminance\" });\n    }\n    return {\n      name: \"ExSensorType\",\n      exSensorType: list,\n    };\n  }\n\n  public createRequest(message_name: any, params: any) {\n    if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {\n      return null;\n    }\n    const buf_list = [];\n    // packet header\n    const header_buf: any = Buffer.alloc(1);\n    header_buf.writeUInt8(parseInt(\"00000011\", 2));\n    buf_list.push(header_buf);\n    // Service ID\n    const sid_buf: any = Buffer.alloc(1);\n    sid_buf.writeUInt8(this.SERVICE_ID);\n    buf_list.push(sid_buf);\n    // Message ID\n    const mid_buf: any = Buffer.alloc(2);\n    mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);\n    buf_list.push(mid_buf);\n    // Number of parameters + Payload\n    const pl_buf = this._createPayload(message_name, params);\n    if (!pl_buf) {\n      return null;\n    }\n    buf_list.push(pl_buf);\n\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayload(message_name: any, params: any) {\n    if (message_name === \"GET_DEVICE_INFORMATION\") {\n      return this._createPayloadGetDeviceInformation(params);\n    } else {\n      return null;\n    }\n  }\n\n  public _createPayloadGetDeviceInformation(params: any) {\n    const pnum_buf: any = Buffer.alloc(1);\n    pnum_buf.writeUInt8(0);\n    return pnum_buf;\n  }\n}\n"]}