{"version":3,"sources":["../src/parts/Ble/linking/modules/service.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAgBH,MAAM,CAAC,OAAO,OAAO,cAAc;IAC1B,SAAS,EAAE,GAAG,CAMnB;IAEK,uBAAuB,EAAE,GAAG,CAejC;IAEK,YAAY,EAAE,GAAG,CAAQ;IAEzB,aAAa,CAAC,WAAW,EAAE,GAAG;IAO9B,aAAa,CAAC,GAAG,EAAE,GAAG;;;;;;;;IAyBtB,aAAa,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAU5C,2BAA2B,CAAC,YAAY,EAAE,GAAG;CAsBrD","file":"service.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Linking\n */\n\n/* ------------------------------------------------------------------\n * node-linking - service.js\n *\n * Copyright (c) 2017, Futomi Hatano, All rights reserved.\n * Released under the MIT license\n * Date: 2017-04-15\n * ---------------------------------------------------------------- */\n\"use strict\";\nimport LinkingServiceNotification from \"./service-notification\";\nimport LinkingServiceOperation from \"./service-operation.js\";\nimport LinkingServiceProperty from \"./service-property.js\";\nimport LinkingServiceSensor from \"./service-sensor.js\";\nimport LinkingServiceSetting from \"./service-setting.js\";\n\nexport default class LinkingService {\n  public _services: any = {\n    \"00\": new LinkingServiceProperty(),\n    \"01\": new LinkingServiceNotification(),\n    \"02\": new LinkingServiceOperation(),\n    \"03\": new LinkingServiceSensor(),\n    \"04\": new LinkingServiceSetting(),\n  };\n\n  public _write_message_name_map: any = {\n    // PeripheralDevicePropertyInformation Service\n    GET_DEVICE_INFORMATION: \"00\",\n    // PeripheralDeviceNotification Service\n    CONFIRM_NOTIFY_CATEGORY: \"01\",\n    NOTIFY_INFORMATION: \"01\",\n    // PeripheralDeviceSensorInformation Service\n    GET_SENSOR_INFO: \"03\",\n    SET_NOTIFY_SENSOR_INFO: \"03\",\n    // PeripheralDeviceSettingOperation Service\n    GET_APP_VERSION: \"04\",\n    CONFIRM_INSTALL_APP: \"04\",\n    GET_SETTING_INFORMATION: \"04\",\n    GET_SETTING_NAME: \"04\",\n    SELECT_SETTING_INFORMATION: \"04\",\n  };\n\n  public _device_info: any = null;\n\n  public setDeviceInfo(device_info: any) {\n    for (const code in this._services) {\n      this._services[code].setDeviceInfo(device_info);\n    }\n    this._device_info = device_info;\n  }\n\n  public parseResponse(buf: any) {\n    const service_id_hex = buf.slice(1, 2).toString(\"hex\");\n    const service = this._services[service_id_hex];\n    if (!service) {\n      return null;\n    }\n    const service_id = buf.readUInt8(1);\n    const msg_id = buf.readUInt16LE(2);\n    // let msg_id = buf.readUInt8(2);\n    const msg_id_hex = buf.slice(2, 3).toString(\"hex\");\n    const pnum = buf.readUInt8(4);\n    const payload_buf = buf.slice(5, buf.length);\n    const parameters = service.parsePayload(pnum, payload_buf);\n\n    const parsed = {\n      buffer: buf,\n      serviceId: service_id,\n      serviceName: service.SERVICE_NAME,\n      messageId: msg_id,\n      messageName: service.MESSAGE_NAME_MAP[msg_id_hex],\n      parameters,\n    };\n    return parsed;\n  }\n\n  public createRequest(message_name: any, params: any) {\n    if (!(message_name in this._write_message_name_map)) {\n      return null;\n    }\n    const sid = this._write_message_name_map[message_name];\n    const service = this._services[sid];\n    const buf = service.createRequest(message_name, params);\n    return buf;\n  }\n\n  public isSupportedWriteMessageName(message_name: any) {\n    if (!message_name) {\n      return false;\n    }\n    let sid = this._write_message_name_map[message_name];\n    if (!sid) {\n      return false;\n    }\n    sid = parseInt(sid, 10);\n    const services = this._device_info && this._device_info.services ? this._device_info.services : null;\n    if (!services) {\n      return false;\n    }\n    let res = false;\n    for (const k in services) {\n      if (services[k] === sid) {\n        res = true;\n        break;\n      }\n    }\n    return res;\n  }\n}\n"]}