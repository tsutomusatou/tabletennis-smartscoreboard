{"version":3,"sources":["../src/parts/Ble/linking/modules/service-setting.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAWH,MAAM,CAAC,OAAO,OAAO,qBAAqB;IACjC,UAAU,SAAQ;IAClB,YAAY,SAAsC;IAClD,gBAAgB,EAAE,GAAG,CAW1B;IAGF,OAAO,CAAC,qBAAqB,CAM3B;IACF,OAAO,CAAC,sBAAsB,CAK5B;IACF,OAAO,CAAC,OAAO,CAAW;IAEnB,aAAa,CAAC,IAAI,EAAE,GAAG;IAIvB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAkBhC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IA6BlC,gBAAgB,CAAC,GAAG,EAAE,GAAG;;;;;IAuBzB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;;IAarB,qBAAqB,CAAC,GAAG,EAAE,GAAG;;;;;IAmB9B,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IAOtB,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IAWtB,cAAc,CAAC,GAAG,EAAE,GAAG;;;;IAOvB,0BAA0B,CAAC,GAAG,EAAE,GAAG;;;;;IA6BnC,+BAA+B,CAAC,GAAG,EAAE,GAAG;;;;;;;;;;;;;;;;;;;;;;IA0DxC,4BAA4B,CAAC,GAAG,EAAE,GAAG;;;;;;;;;;;;;;;;;;;;IA8CrC,qBAAqB,CAAC,GAAG,EAAE,GAAG;;;;IAsB9B,aAAa,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IA2B5C,cAAc,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAmB7C,0BAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAgBjD,2BAA2B,CAAC,MAAM,EAAE,GAAG;IAuBvC,+BAA+B,CAAC,MAAM,EAAE,GAAG;IA6C3C,mCAAmC,CAAC,MAAM,EAAE,GAAG;IAK/C,4BAA4B,CAAC,MAAM,EAAE,GAAG;IAyCxC,sCAAsC,CAAC,MAAM,EAAE,GAAG;CAgL1D","file":"service-setting.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Linking\n */\n\n/* ------------------------------------------------------------------\n * node-linking - service-setting.js\n *\n * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.\n * Released under the MIT license\n * Date: 2019-10-24\n * ---------------------------------------------------------------- */\n\"use strict\";\n\nexport default class LinkingServiceSetting {\n  public SERVICE_ID = 0x04;\n  public SERVICE_NAME = \"PeripheralDeviceSettingOperation\";\n  public MESSAGE_NAME_MAP: any = {\n    \"00\": \"GET_APP_VERSION\",\n    \"01\": \"GET_APP_VERSION_RESP\",\n    \"02\": \"CONFIRM_INSTALL_APP\",\n    \"03\": \"CONFIRM_INSTALL_APP_RESP\",\n    \"04\": \"GET_SETTING_INFORMATION\",\n    \"05\": \"GET_SETTING_INFORMATION_RESP\",\n    \"06\": \"GET_SETTING_NAME\",\n    \"07\": \"GET_SETTING_NAME_RESP\",\n    \"08\": \"SELECT_SETTING_INFORMATION\",\n    \"09\": \"SELECT_SETTING_INFORMATION_RESP\",\n  };\n\n  // Private\n  private _WRITE_MESSAGE_ID_MAP: any = {\n    GET_APP_VERSION: 0x00,\n    CONFIRM_INSTALL_APP: 0x02,\n    GET_SETTING_INFORMATION: 0x04,\n    GET_SETTING_NAME: 0x06,\n    SELECT_SETTING_INFORMATION: 0x08,\n  };\n  private _SETTING_NAME_TYPE_MAP: any = {\n    LEDColorName: 0x00,\n    LEDPatternName: 0x01,\n    VibrationPatternName: 0x02,\n    BeepPatternName: 0x03,\n  };\n  private _device: any = {};\n\n  public setDeviceInfo(info: any) {\n    this._device = info;\n  }\n\n  public parsePayload(pnum: any, buf: any) {\n    let offset = 0;\n    const parameters = [];\n    try {\n      for (let i = 0; i < pnum; i++) {\n        const pid = buf.readUInt8(offset++);\n        let plen_buf = buf.slice(offset, offset + 3);\n        plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);\n        const plen = plen_buf.readUInt32LE(0);\n        offset += 3;\n        const pvalue_buf = buf.slice(offset, offset + plen);\n        offset += plen;\n        parameters.push(this._parseParameter(pid, pvalue_buf));\n      }\n    } catch (e) {}\n    return parameters;\n  }\n\n  public _parseParameter(pid: any, buf: any) {\n    let parsed: any = null;\n    if (pid === 0x00) {\n      parsed = this._parseResultCode(buf);\n    } else if (pid === 0x01) {\n      parsed = this._parseCancel(buf);\n    } else if (pid === 0x02) {\n      parsed = this._parseSettingNameType(buf);\n    } else if (pid === 0x03) {\n      parsed = this._parseAppName(buf);\n    } else if (pid === 0x04) {\n      parsed = this._parseFileVer(buf);\n    } else if (pid === 0x05) {\n      parsed = this._parseFileSize(buf);\n    } else if (pid === 0x06) {\n      parsed = this._parseInstallConfirmStatus(buf);\n    } else if (pid === 0x07) {\n      parsed = this._parseSettingInformationRequest(buf);\n    } else if (pid === 0x08) {\n      parsed = this._parseSettingInformationData(buf);\n    } else if (pid === 0x09) {\n      parsed = this._parseSettingNameData(buf);\n    }\n    if (parsed) {\n      parsed.parameterId = pid;\n    }\n    return parsed;\n  }\n\n  public _parseResultCode(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OK, request processed correctly\";\n    } else if (code === 0x01) {\n      text = \"Cancel\";\n    } else if (code === 0x02) {\n      text = \"Error, failed\";\n    } else if (code === 0x03) {\n      text = \"Error, no reason defined\";\n    } else if (code === 0x04) {\n      text = \"Error, data not available\";\n    } else if (code === 0x05) {\n      text = \"Error, not supported\";\n    }\n    return {\n      name: \"ResultCode\",\n      resultCode: code,\n      resultText: text,\n    };\n  }\n\n  public _parseCancel(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"User cancel\";\n    }\n    return {\n      name: \"Cancel\",\n      cancelCode: code,\n      cancelText: text,\n    };\n  }\n\n  public _parseSettingNameType(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"LEDColorName\";\n    } else if (code === 0x01) {\n      text = \"LEDPatternName\";\n    } else if (code === 0x02) {\n      text = \"VibrationPatternName\";\n    } else if (code === 0x03) {\n      text = \"BeepPatternName\";\n    }\n    return {\n      name: \"SettingNameType\",\n      settingNameTypeCode: code,\n      settingNameTypeText: text,\n    };\n  }\n\n  public _parseAppName(buf: any) {\n    return {\n      name: \"AppName\",\n      appName: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseFileVer(buf: any) {\n    const list = [];\n    for (let i = 0; i < buf.length; i++) {\n      list.push(buf.readUInt8(i));\n    }\n    return {\n      name: \"FileVer\",\n      fileVer: list.join(\".\"),\n    };\n  }\n\n  public _parseFileSize(buf: any) {\n    return {\n      name: \"FileSize\",\n      fileSize: buf.readUInt32LE(0),\n    };\n  }\n\n  public _parseInstallConfirmStatus(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OK, Device has been ready for install\";\n    } else if (code === 0x01) {\n      text = \"Cancel\";\n    } else if (code === 0x02) {\n      text = \"Error, failed\";\n    } else if (code === 0x03) {\n      text = \"Error, no reason defined\";\n    } else if (code === 0x04) {\n      text = \"Error, data not available\";\n    } else if (code === 0x05) {\n      text = \"Error, not supported\";\n    } else if (code === 0x06) {\n      text = \"Error, Device has no space to install\";\n    } else if (code === 0x07) {\n      text = \"Error, Requested file was already installed\";\n    } else if (code === 0x08) {\n      text = \"Error, Newest file was already installed\";\n    }\n    return {\n      name: \"InstallConfirmStatus\",\n      installConfirmStatusCode: code,\n      installConfirmStatusText: text,\n    };\n  }\n\n  public _parseSettingInformationRequest(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"SETTING\";\n    } else if (code === 0x01) {\n      text = \"START_DEMONSTRATION\";\n    } else if (code === 0x02) {\n      text = \"STOP_DEMONSTRATION\";\n    }\n\n    let offset = 1;\n    const settings = [];\n    while (true) {\n      const setting_code = buf.readUInt8(offset);\n      if (setting_code === 0x00) {\n        settings.push({\n          settingCode: setting_code,\n          settingName: \"LED\",\n          colorMax: buf.readUInt8(offset + 1),\n          colorNumber: buf.readUInt8(offset + 2),\n          patternMax: buf.readUInt8(offset + 3),\n          patternNumber: buf.readUInt8(offset + 4),\n          duration: buf.readUInt8(offset + 5),\n        });\n        offset += 5;\n      } else if (setting_code === 0x01) {\n        settings.push({\n          settingCode: setting_code,\n          settingName: \"Vibration\",\n          patternMax: buf.readUInt8(offset + 1),\n          patternNumber: buf.readUInt8(offset + 2),\n          duration: buf.readUInt8(offset + 3),\n        });\n        offset += 3;\n      } else if (setting_code === 0x02) {\n        settings.push({\n          settingCode: setting_code,\n          settingName: \"Beep\",\n          patternMax: buf.readUInt8(offset + 1),\n          patternNumber: buf.readUInt8(offset + 2),\n          duration: buf.readUInt8(offset + 3),\n        });\n        offset += 3;\n      }\n      if (offset >= buf.length) {\n        break;\n      }\n    }\n\n    return {\n      name: \"SettingInformationRequest\",\n      settingInformationRequestCode: code,\n      settingInformationRequestName: text,\n      settingInformationRequestData: settings,\n    };\n  }\n\n  public _parseSettingInformationData(buf: any) {\n    let offset = 0;\n    const settings = [];\n    while (true) {\n      const setting_code = buf.readUInt8(offset);\n      if (setting_code === 0x00) {\n        settings.push({\n          id: setting_code,\n          name: \"LED\",\n          colorMax: buf.readUInt8(offset + 1),\n          colorNumber: buf.readUInt8(offset + 2),\n          patternMax: buf.readUInt8(offset + 3),\n          patternNumber: buf.readUInt8(offset + 4),\n          duration: buf.readUInt8(offset + 5),\n        });\n        offset += 6;\n      } else if (setting_code === 0x01) {\n        settings.push({\n          id: setting_code,\n          name: \"Vibration\",\n          patternMax: buf.readUInt8(offset + 1),\n          patternNumber: buf.readUInt8(offset + 2),\n          duration: buf.readUInt8(offset + 3),\n        });\n        offset += 4;\n      } else if (setting_code === 0x02) {\n        settings.push({\n          id: setting_code,\n          name: \"Beep\",\n          patternMax: buf.readUInt8(offset + 1),\n          patternNumber: buf.readUInt8(offset + 2),\n          duration: buf.readUInt8(offset + 3),\n        });\n        offset += 4;\n      }\n      if (offset >= buf.length) {\n        break;\n      }\n    }\n\n    return {\n      name: \"SettingInformationData\",\n      settingInformationData: settings,\n    };\n  }\n\n  public _parseSettingNameData(buf: any) {\n    const list = [];\n    let offset = 0;\n    while (true) {\n      const len = buf.readUInt8(offset++);\n      const name = buf.slice(offset, offset + len - 1).toString(\"utf-8\");\n      offset += len;\n      list.push(name);\n      if (offset >= buf.length) {\n        break;\n      }\n    }\n\n    return {\n      name: \"SettingNameData\",\n      settingNameData: list,\n    };\n  }\n\n  /* ------------------------------------------------------------------\n   * Method: createRequest(message_name, params)\n   * ---------------------------------------------------------------- */\n  public createRequest(message_name: any, params: any) {\n    if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {\n      return null;\n    }\n    const buf_list = [];\n    // packet header\n    const header_buf: any = Buffer.alloc(1);\n    header_buf.writeUInt8(parseInt(\"00000011\", 2));\n    buf_list.push(header_buf);\n    // Service ID\n    const sid_buf: any = Buffer.alloc(1);\n    sid_buf.writeUInt8(this.SERVICE_ID);\n    buf_list.push(sid_buf);\n    // Message ID\n    const mid_buf: any = Buffer.alloc(2);\n    mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);\n    buf_list.push(mid_buf);\n    // Number of parameters + Payload\n    const pl_buf = this._createPayload(message_name, params);\n    if (!pl_buf) {\n      return null;\n    }\n    buf_list.push(pl_buf);\n\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayload(message_name: any, params: any) {\n    if (!params || typeof params !== \"object\") {\n      params = {};\n    }\n    if (message_name === \"GET_APP_VERSION\") {\n      return this._createPayloadGetAppVersion(params);\n    } else if (message_name === \"CONFIRM_INSTALL_APP\") {\n      return this._createPayloadConfirmInstallApp(params);\n    } else if (message_name === \"GET_SETTING_INFORMATION\") {\n      return this._createPayloadGetSettingInformation(params);\n    } else if (message_name === \"GET_SETTING_NAME\") {\n      return this._createPayloadGetSettingName(params);\n    } else if (message_name === \"SELECT_SETTING_INFORMATION\") {\n      return this._createPayloadSelectSettingInformation(params);\n    } else {\n      return null;\n    }\n  }\n\n  public _createPropertyBlockBuffer(pid: any, val_buf: any) {\n    const pid_buf = Buffer.from([pid]);\n    let len = 0;\n    if (val_buf) {\n      len = val_buf.length;\n    }\n    let len_buf: any = Buffer.alloc(4);\n    len_buf.writeUInt32LE(len);\n    len_buf = len_buf.slice(0, 3);\n    const buf_list = [pid_buf, len_buf];\n    if (val_buf) {\n      buf_list.push(val_buf);\n    }\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadGetAppVersion(params: any) {\n    let pnum = 0;\n    let app_name = null;\n    if (\"AppName\" in params && typeof params.AppName === \"string\") {\n      app_name = params.AppName;\n      pnum++;\n    } else {\n      return null;\n    }\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // AppName\n    if (app_name !== null) {\n      const val_buf = Buffer.from(app_name);\n      buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadConfirmInstallApp(params: any) {\n    let pnum = 0;\n    let app_name = null;\n    if (\"AppName\" in params && typeof params.AppName === \"string\") {\n      app_name = params.AppName;\n      pnum++;\n    } else {\n      return null;\n    }\n    let file_ver = null;\n    if (\"FileVer\" in params && typeof params.FileVer === \"string\") {\n      file_ver = params.FileVer;\n      pnum++;\n    }\n    let file_size: any = null;\n    if (\"FileSize\" in params && typeof params.FileSize === \"number\" && file_size % 1 === 0) {\n      file_size = params.FileSize;\n      pnum++;\n    }\n\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // AppName\n    if (app_name !== null) {\n      const val_buf = Buffer.from(app_name);\n      buf_list.push(this._createPropertyBlockBuffer(0x03, val_buf));\n    }\n    // FileVer\n    if (file_ver !== null) {\n      const val_buf = Buffer.from(file_ver);\n      buf_list.push(this._createPropertyBlockBuffer(0x04, val_buf));\n    }\n    // FileSize\n    if (file_size !== null) {\n      const val_buf: any = Buffer.alloc(4);\n      val_buf.writeUInt32LE(file_size);\n      buf_list.push(this._createPropertyBlockBuffer(0x05, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadGetSettingInformation(params: any) {\n    const pnum_buf = Buffer.from([0]);\n    return pnum_buf;\n  }\n\n  public _createPayloadGetSettingName(params: any) {\n    let pnum = 0;\n    let type = null;\n    if (\"SettingNameType\" in params) {\n      type = params.SettingNameType;\n      if (typeof type === \"number\") {\n        let setting_name = \"\";\n        for (const name in this._SETTING_NAME_TYPE_MAP) {\n          if (this._SETTING_NAME_TYPE_MAP[name] === type) {\n            setting_name = name;\n            break;\n          }\n        }\n        if (!setting_name) {\n          return null;\n        }\n      } else if (typeof type === \"string\") {\n        if (type in this._SETTING_NAME_TYPE_MAP) {\n          type = this._SETTING_NAME_TYPE_MAP[type];\n        } else {\n          return null;\n        }\n      }\n    } else {\n      return null;\n    }\n    pnum++;\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // SettingNameType\n    if (type !== null) {\n      const val_buf = Buffer.from([type]);\n      buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadSelectSettingInformation(params: any) {\n    let pnum = 0;\n    let code = null;\n    if (\"SettingInformationRequest\" in params && typeof params.SettingInformationRequest === \"object\") {\n      const req = params.SettingInformationRequest;\n      if (\n        \"requestCode\" in req &&\n        typeof req.requestCode === \"number\" &&\n        req.requestCode >= 0 &&\n        req.requestCode <= 0x02 &&\n        req.requestCode % 1 === 0\n      ) {\n        code = req.requestCode;\n      } else if (\"requestName\" in req && typeof req.requestName === \"string\") {\n        const name = req.requestName;\n        if (name === \"SETTING\") {\n          code = 0x00;\n        } else if (name === \"START_DEMONSTRATION\") {\n          code = 0x01;\n        } else if (name === \"STOP_DEMONSTRATION\") {\n          code = 0x02;\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n    pnum++;\n\n    let settings = null;\n    if (\"SettingInformationData\" in params) {\n      if (Array.isArray(params.SettingInformationData)) {\n        settings = [];\n        for (let i = 0; i < params.SettingInformationData.length; i++) {\n          const s = params.SettingInformationData[i];\n          let scode = null;\n          let sname = \"\";\n          if (\n            \"settingCode\" in s &&\n            typeof s.settingCode === \"number\" &&\n            s.settingCode >= 0x00 &&\n            s.settingCode <= 0x02 &&\n            s.settingCode % 1 === 0\n          ) {\n            scode = s.settingCode;\n            if (scode === 0x00) {\n              sname = \"LED\";\n            } else if (scode === 0x01) {\n              sname = \"Vibration\";\n            } else if (scode === 0x02) {\n              sname = \"Beep\";\n            }\n          } else if (\"settingName\" in s && typeof s.settingName === \"string\") {\n            sname = s.settingName;\n            if (sname === \"LED\") {\n              scode = 0x00;\n            } else if (sname === \"Vibration\") {\n              scode = 0x01;\n            } else if (sname === \"Beep\") {\n              scode = 0x02;\n            } else {\n              return null;\n            }\n          }\n          if (!(sname in this._device.settings)) {\n            return null;\n          }\n\n          let cn = null;\n          let cm = null;\n          if (scode === 0x00) {\n            // LED\n            if (\"colorNumber\" in s) {\n              if (\n                typeof s.colorNumber === \"number\" &&\n                s.colorNumber >= 0 &&\n                s.colorNumber <= this._device.settings.LED.colorMax &&\n                s.colorNumber % 1 === 0\n              ) {\n                cn = s.colorNumber;\n              } else {\n                return null;\n              }\n            } else {\n              cn = this._device.settings.LED.colorNumber;\n            }\n            cm = this._device.settings.LED.colorMax;\n          }\n\n          let pn = null;\n          if (\"patternNumber\" in s) {\n            if (\n              typeof s.patternNumber === \"number\" &&\n              s.patternNumber >= 0 &&\n              s.patternNumber <= this._device.settings[sname].patternMax &&\n              s.patternNumber % 1 === 0\n            ) {\n              pn = s.patternNumber;\n            } else {\n              return null;\n            }\n          } else {\n            pn = this._device.settings[sname].patternNumber;\n          }\n          const pm = this._device.settings[sname].patternMax;\n\n          let dur = null;\n          if (\"duration\" in s) {\n            if (typeof s.duration === \"number\" && s.duration >= 0 && s.duration <= 0xff && s.duration % 1 === 0) {\n              dur = s.duration;\n              if (dur <= 0x05) {\n                dur = 0x05;\n              } else if (dur <= 0x0a) {\n                dur = 0x0a;\n              } else if (dur <= 0x1e) {\n                dur = 0x1e;\n              } else if (dur <= 0x3c) {\n                dur = 0x3c;\n              } else if (dur <= 0xb4) {\n                dur = 0xb4;\n              }\n            } else {\n              return null;\n            }\n          } else {\n            dur = this._device.settings[sname].duration;\n          }\n          settings.push({\n            settingCode: scode,\n            colorNumber: cn,\n            colorMax: cm,\n            patternNumber: pn,\n            patternMax: pm,\n            duration: dur,\n          });\n        }\n      } else {\n        return null;\n      }\n      if (settings.length === 0) {\n        settings = null;\n      } else {\n        pnum++;\n      }\n    }\n\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // SettingInformationRequest\n    if (code !== null) {\n      const val_buf = Buffer.from([code]);\n      buf_list.push(this._createPropertyBlockBuffer(0x07, val_buf));\n    }\n    // SettingInformationData\n    if (settings !== null) {\n      const val_buf_list: any = [];\n      settings.forEach((s: any) => {\n        val_buf_list.push(Buffer.from([s.settingCode]));\n        if (s.colorNumber !== null) {\n          val_buf_list.push(Buffer.from([s.colorMax, s.colorNumber]));\n        }\n        val_buf_list.push(Buffer.from([s.patternMax, s.patternNumber]));\n        val_buf_list.push(Buffer.from([s.duration]));\n      });\n      const val_buf = Buffer.concat(val_buf_list);\n      buf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n}\n"]}