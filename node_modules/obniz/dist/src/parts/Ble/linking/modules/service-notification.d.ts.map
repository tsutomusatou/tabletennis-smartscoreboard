{"version":3,"sources":["../src/parts/Ble/linking/modules/service-notification.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAeH,MAAM,CAAC,OAAO,OAAO,0BAA0B;IACtC,UAAU,SAAQ;IAClB,YAAY,SAAkC;IAC9C,gBAAgB;;;;;;;;;MASrB;IAGF,OAAO,CAAC,qBAAqB,CAK3B;IACF,OAAO,CAAC,4BAA4B,CAUlC;IACF,OAAO,CAAC,OAAO,CAAW;;IAInB,aAAa,CAAC,IAAI,EAAE,GAAG;IAIvB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAuBhC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,mBAAmB,CAAC,EAAE,GAAG;IA+E7D,gBAAgB,CAAC,GAAG,EAAE,GAAG;;;;;IAuBzB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;;IAarB,eAAe,CAAC,GAAG,EAAE,GAAG;;;;;IAyBxB,oBAAoB,CAAC,GAAG,EAAE,GAAG;;;;;;;IAkE7B,sBAAsB,CAAC,GAAG,EAAE,GAAG;;;;;IA+B/B,oBAAoB,CAAC,GAAG,EAAE,GAAG;;;;IAO7B,wBAAwB,CAAC,GAAG,EAAE,GAAG;;;;IAOjC,qBAAqB,CAAC,GAAG,EAAE,GAAG,EAAE,kBAAkB,EAAE,GAAG;;;;;;;IAwKvD,cAAc,CAAC,GAAG,EAAE,GAAG;;;;IAOvB,cAAc,CAAC,GAAG,EAAE,GAAG;;;;IAOvB,2BAA2B,CAAC,GAAG,EAAE,GAAG;;;;;IAepC,YAAY,CAAC,GAAG,EAAE,GAAG;;;;IAOrB,UAAU,CAAC,GAAG,EAAE,GAAG;;;;IAOnB,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IAOtB,kBAAkB,CAAC,GAAG,EAAE,GAAG;;;;IAO3B,eAAe,CAAC,GAAG,EAAE,GAAG;;;;IAOxB,qBAAqB,CAAC,GAAG,EAAE,GAAG;;;;;;;IAkB9B,sBAAsB,CAAC,GAAG,EAAE,GAAG;;;;IAoB/B,gBAAgB,CAAC,GAAG,EAAE,GAAG;;;;IAoBzB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;IAOrB,mBAAmB,CAAC,GAAG,EAAE,GAAG;;;;IAO5B,iBAAiB,CAAC,GAAG,EAAE,GAAG;;;;IAc1B,eAAe,CAAC,GAAG,EAAE,GAAG;;;;IAcxB,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IActB,UAAU,CAAC,GAAG,EAAE,GAAG;;;;IAOnB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;IA6BrB,sBAAsB,CAAC,GAAG,EAAE,GAAG;;;;IAO/B,sBAAsB,CAAC,GAAG,EAAE,GAAG;;;;IAO/B,WAAW,CAAC,GAAG,EAAE,GAAG;;;;IAOpB,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;;;;IAOjC,WAAW,CAAC,GAAG,EAAE,GAAG;;;;IAOpB,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IAOtB,WAAW,CAAC,GAAG,EAAE,GAAG;;;;IAOpB,wBAAwB,CAAC,GAAG,EAAE,GAAG;;;;IAOjC,iBAAiB,CAAC,GAAG,EAAE,GAAG;;;;IAoB1B,aAAa,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IA2B5C,cAAc,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAc7C,0BAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAgBjD,mCAAmC,CAAC,MAAM,EAAE,GAAG;IAM/C,+BAA+B,CAAC,MAAM,EAAE,GAAG;IAgF3C,uCAAuC,CAAC,MAAM,EAAE,GAAG;IAiDnD,oCAAoC,CAAC,MAAM,EAAE,GAAG;CA6BxD","file":"service-notification.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Linking\n */\n\n/* ------------------------------------------------------------------\n * node-linking - service-notification.js\n *\n * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.\n * Released under the MIT license\n * Date: 2019-10-24\n * ---------------------------------------------------------------- */\n\"use strict\";\n\n/* ------------------------------------------------------------------\n * Constructor: LinkingServiceNotification()\n * ---------------------------------------------------------------- */\n\nexport default class LinkingServiceNotification {\n  public SERVICE_ID = 0x01;\n  public SERVICE_NAME = \"PeripheralDeviceNotification\";\n  public MESSAGE_NAME_MAP = {\n    \"00\": \"CONFIRM_NOTIFY_CATEGORY\",\n    \"01\": \"CONFIRM_NOTIFY_CATEGORY_RESP\",\n    \"02\": \"NOTIFY_INFORMATION\",\n    \"03\": \"GET_PD_NOTIFY_DETAIL_DATA\",\n    \"04\": \"GET_PD_NOTIFY_DETAIL_DATA_RESP\",\n    \"05\": \"NOTIFY_PD_GENERAL_INFORMATION\",\n    \"06\": \"START_PD_APPLICATION\",\n    \"07\": \"START_PD_APPLICATION_RESP\",\n  };\n\n  // Private\n  private _WRITE_MESSAGE_ID_MAP: any = {\n    CONFIRM_NOTIFY_CATEGORY: 0x00,\n    NOTIFY_INFORMATION: 0x02,\n    GET_PD_NOTIFY_DETAIL_DATA_RESP: 0x04,\n    START_PD_APPLICATION_RESP: 0x07,\n  };\n  private _NOTIFY_CATEGORY_NAME_ID_MAP = {\n    NotNotify: 0,\n    All: 1,\n    PhoneIncomingCall: 2,\n    PhoneInCall: 3,\n    PhoneIdle: 4,\n    Mail: 5,\n    Schedule: 6,\n    General: 7,\n    Etc: 8,\n  };\n  private _device: any = {};\n\n  constructor() {}\n\n  public setDeviceInfo(info: any) {\n    this._device = info;\n  }\n\n  public parsePayload(pnum: any, buf: any) {\n    let offset = 0;\n    const parameters = [];\n    let notify_cateogry_id = 0;\n    try {\n      for (let i = 0; i < pnum; i++) {\n        const pid = buf.readUInt8(offset++);\n        let plen_buf = buf.slice(offset, offset + 3);\n        plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);\n        const plen = plen_buf.readUInt32LE(0);\n        offset += 3;\n        const pvalue_buf = buf.slice(offset, offset + plen);\n        offset += plen;\n        const p = this._parseParameter(pid, pvalue_buf);\n        parameters.push(this._parseParameter(pid, pvalue_buf, notify_cateogry_id));\n        if (pid === 0x04 && \"id\" in p) {\n          notify_cateogry_id = p.id;\n        }\n      }\n    } catch (e) {}\n    return parameters;\n  }\n\n  public _parseParameter(pid: any, buf: any, notify_cateogory_id?: any) {\n    let parsed: any = null;\n    if (pid === 0x00) {\n      parsed = this._parseResultCode(buf);\n    } else if (pid === 0x01) {\n      parsed = this._parseCancel(buf);\n    } else if (pid === 0x02) {\n      parsed = this._parseGetStatus(buf);\n    } else if (pid === 0x03) {\n      parsed = this._parseNotifyCategory(buf);\n    } else if (pid === 0x04) {\n      parsed = this._parseNotifyCategoryID(buf);\n    } else if (pid === 0x05) {\n      parsed = this._parseGetParameterID(buf);\n    } else if (pid === 0x06) {\n      parsed = this._parseGetParameterLength(buf);\n    } else if (pid === 0x07) {\n      parsed = this._parseParameterIdList(buf, notify_cateogory_id);\n    } else if (pid === 0x08) {\n      parsed = this._parseUniqueId(buf);\n    } else if (pid === 0x09) {\n      parsed = this._parseNotifyId(buf);\n    } else if (pid === 0x0a) {\n      parsed = this._parseNotificationOperation(buf);\n    } else if (pid === 0x0b) {\n      parsed = this._parseTittle(buf);\n    } else if (pid === 0x0c) {\n      parsed = this._parseText(buf);\n    } else if (pid === 0x0d) {\n      parsed = this._parseAppName(buf);\n    } else if (pid === 0x0e) {\n      parsed = this._parseAppNameLocal(buf);\n    } else if (pid === 0x0f) {\n      parsed = this._parseNotifyApp(buf);\n    } else if (pid === 0x10) {\n      parsed = this._parseRumblingSetting(buf);\n    } else if (pid === 0x11) {\n      parsed = this._parseVibrationPattern(buf);\n    } else if (pid === 0x12) {\n      parsed = this._parseLedPattern(buf);\n    } else if (pid === 0x13) {\n      parsed = this._parseSender(buf);\n    } else if (pid === 0x14) {\n      parsed = this._parseSenderAddress(buf);\n    } else if (pid === 0x15) {\n      parsed = this._parseReceiveDate(buf);\n    } else if (pid === 0x16) {\n      parsed = this._parseStartDate(buf);\n    } else if (pid === 0x17) {\n      parsed = this._parseEndDate(buf);\n    } else if (pid === 0x18) {\n      parsed = this._parseArea(buf);\n    } else if (pid === 0x19) {\n      parsed = this._parsePerson(buf);\n    } else if (pid === 0x1a) {\n      parsed = this._parseMimeTypeForImage(buf);\n    } else if (pid === 0x1b) {\n      parsed = this._parseMimeTypeForMedia(buf);\n    } else if (pid === 0x1c) {\n      parsed = this._parseImage(buf);\n    } else if (pid >= 0x1d && pid <= 0x26) {\n      parsed = this._parseContents(buf, pid);\n    } else if (pid === 0x27) {\n      parsed = this._parseMedia(buf);\n    } else if (pid === 0x28) {\n      parsed = this._parsePackage(buf);\n    } else if (pid === 0x29) {\n      parsed = this._parseClass(buf);\n    } else if (pid === 0x2a) {\n      parsed = this._parseSharingInformation(buf);\n    } else if (pid === 0x2b) {\n      parsed = this._parseBeepPattern(buf);\n    }\n    if (parsed) {\n      parsed.parameterId = pid;\n    }\n    return parsed;\n  }\n\n  public _parseResultCode(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OK, request processed correctly\";\n    } else if (code === 0x01) {\n      text = \"Cancel\";\n    } else if (code === 0x02) {\n      text = \"Error, failed\";\n    } else if (code === 0x03) {\n      text = \"Error, no reason defined\";\n    } else if (code === 0x04) {\n      text = \"Error, data not available\";\n    } else if (code === 0x05) {\n      text = \"Error, not supported\";\n    }\n    return {\n      name: \"ResultCode\",\n      resultCode: code,\n      resultText: text,\n    };\n  }\n\n  public _parseCancel(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"User cancel\";\n    }\n    return {\n      name: \"Cancel\",\n      cancelCode: code,\n      cancelText: text,\n    };\n  }\n\n  public _parseGetStatus(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OK, request processed correctly\";\n    } else if (code === 0x01) {\n      text = \"OK, request processed ,but some parameter not\";\n    } else if (code === 0x02) {\n      text = \"Cancel\";\n    } else if (code === 0x03) {\n      text = \"Error, failed\";\n    } else if (code === 0x04) {\n      text = \"Error, no reason defined\";\n    } else if (code === 0x05) {\n      text = \"Error, data not available\";\n    } else if (code === 0x06) {\n      text = \"Error, not supported\";\n    }\n    return {\n      name: \"GetStatus\",\n      statusCode: code,\n      statusText: text,\n    };\n  }\n\n  public _parseNotifyCategory(buf: any) {\n    const list = [];\n    const v1 = buf.readUInt8(0);\n    if (v1 & 0b00000001) {\n      list.push({\n        id: 0,\n        name: \"NotNotify\",\n      });\n    }\n    if (v1 & 0b00000010) {\n      list.push({\n        id: 1,\n        name: \"All\",\n      });\n    }\n    if (v1 & 0b00000100) {\n      list.push({\n        id: 2,\n        name: \"PhoneIncomingCall\",\n      });\n    }\n    if (v1 & 0b00001000) {\n      list.push({\n        id: 3,\n        name: \"PhoneInCall\",\n      });\n    }\n    if (v1 & 0b00010000) {\n      list.push({\n        id: 4,\n        name: \"PhoneIdle\",\n      });\n    }\n    if (v1 & 0b00100000) {\n      list.push({\n        id: 5,\n        name: \"Mail\",\n      });\n    }\n    if (v1 & 0b01000000) {\n      list.push({\n        id: 6,\n        name: \"Schedule\",\n      });\n    }\n    if (v1 & 0b10000000) {\n      list.push({\n        id: 7,\n        name: \"General\",\n      });\n    }\n\n    const v2 = buf.readUInt8(1);\n    if (v2 & 0b00000001) {\n      list.push({\n        id: 8,\n        name: \"Etc\",\n      });\n    }\n\n    return {\n      name: \"NotifyCategory\",\n      notifyCategory: list,\n    };\n  }\n\n  public _parseNotifyCategoryID(buf: any) {\n    let res: any = null;\n    const v1 = buf.readUInt8(0);\n    const v2 = buf.readUInt8(1);\n    if (v1 & 0b00000001) {\n      res = { id: 0, text: \"NotNotify\" };\n    } else if (v1 & 0b00000010) {\n      res = { id: 1, text: \"All\" };\n    } else if (v1 & 0b00000100) {\n      res = { id: 2, text: \"PhoneIncomingCall\" };\n    } else if (v1 & 0b00001000) {\n      res = { id: 3, text: \"PhoneInCall\" };\n    } else if (v1 & 0b00010000) {\n      res = { id: 4, text: \"PhoneIdle\" };\n    } else if (v1 & 0b00100000) {\n      res = { id: 5, text: \"Mail\" };\n    } else if (v1 & 0b01000000) {\n      res = { id: 6, text: \"Schedule\" };\n    } else if (v1 & 0b10000000) {\n      res = { id: 7, text: \"General\" };\n    } else if (v2 & 0b00000001) {\n      res = { id: 8, text: \"Etc\" };\n    }\n\n    return {\n      name: \"NotifyCategoryID\",\n      notifyCategoryId: res.id,\n      NotifyCategoryText: res.text,\n    };\n  }\n\n  public _parseGetParameterID(buf: any) {\n    return {\n      name: \"GetParameterID\",\n      getParameterId: buf.readUInt8(0),\n    };\n  }\n\n  public _parseGetParameterLength(buf: any) {\n    return {\n      name: \"GetParameterLength\",\n      getParameterLength: buf.readUInt32LE(0),\n    };\n  }\n\n  public _parseParameterIdList(buf: any, notify_cateogry_id: any) {\n    const v = buf.readUInt16LE(0);\n    const list = [];\n    if (notify_cateogry_id >= 2 && notify_cateogry_id <= 4) {\n      // PhoneIncomingCall/PhoneInCall/PhoneIdle\n      if (v & 0b0000000000000001) {\n        list.push({ id: 0x09, name: \"NotifyId\" });\n      }\n      if (v & 0b0000000000000010) {\n        list.push({ id: 0x04, name: \"NotifyCategoryID\" });\n      }\n    } else if (notify_cateogry_id === 5) {\n      // Mail\n      if (v & 0b0000000000000001) {\n        list.push({ id: 0x0d, name: \"AppName\" });\n      }\n      if (v & 0b0000000000000010) {\n        list.push({ id: 0x0e, name: \"AppNameLocal\" });\n      }\n      if (v & 0b0000000000000100) {\n        list.push({ id: 0x28, name: \"Package\" });\n      }\n      if (v & 0b0000000000001000) {\n        list.push({ id: 0x0b, name: \"Tittle\" });\n      }\n      if (v & 0b0000000000010000) {\n        list.push({ id: 0x0c, name: \"Text\" });\n      }\n      if (v & 0b0000000000100000) {\n        list.push({ id: 0x13, name: \"Sender\" });\n      }\n      if (v & 0b0000000001000000) {\n        list.push({ id: 0x14, name: \"SenderAddress\" });\n      }\n      if (v & 0b0000000010000000) {\n        list.push({ id: 0x15, name: \"ReceiveDate\" });\n      }\n      if (v & 0b0000000100000000) {\n        list.push({ id: 0x09, name: \"NotifyId\" });\n      }\n      if (v & 0b0000001000000000) {\n        list.push({ id: 0x04, name: \"NotifyCategoryID\" });\n      }\n    } else if (notify_cateogry_id === 6) {\n      // Schedule\n      if (v & 0b0000000000000001) {\n        list.push({ id: 0x0d, name: \"AppName\" });\n      }\n      if (v & 0b0000000000000010) {\n        list.push({ id: 0x0e, name: \"AppNameLocal\" });\n      }\n      if (v & 0b0000000000000100) {\n        list.push({ id: 0x28, name: \"Package\" });\n      }\n      if (v & 0b0000000000001000) {\n        list.push({ id: 0x0b, name: \"Tittle\" });\n      }\n      if (v & 0b0000000000010000) {\n        list.push({ id: 0x16, name: \"StartDate\" });\n      }\n      if (v & 0b0000000000100000) {\n        list.push({ id: 0x17, name: \"EndDate\" });\n      }\n      if (v & 0b0000000001000000) {\n        list.push({ id: 0x18, name: \"Area\" });\n      }\n      if (v & 0b0000000010000000) {\n        list.push({ id: 0x19, name: \"Person\" });\n      }\n      if (v & 0b0000000100000000) {\n        list.push({ id: 0x0c, name: \"Text\" });\n      }\n      if (v & 0b0000001000000000) {\n        list.push({ id: 0x1d, name: \"Contents1\" });\n      }\n      if (v & 0b0000010000000000) {\n        list.push({ id: 0x1e, name: \"Contents2\" });\n      }\n      if (v & 0b0000100000000000) {\n        list.push({ id: 0x1f, name: \"Contents3\" });\n      }\n      if (v & 0b0001000000000000) {\n        list.push({ id: 0x09, name: \"NotifyId\" });\n      }\n      if (v & 0b0010000000000000) {\n        list.push({ id: 0x04, name: \"NotifyCategoryID\" });\n      }\n    } else if (notify_cateogry_id === 7) {\n      // General\n      if (v & 0b0000000000000001) {\n        list.push({ id: 0x0d, name: \"AppName\" });\n      }\n      if (v & 0b0000000000000010) {\n        list.push({ id: 0x0e, name: \"AppNameLocal\" });\n      }\n      if (v & 0b0000000000000100) {\n        list.push({ id: 0x28, name: \"Package\" });\n      }\n      if (v & 0b0000000000001000) {\n        list.push({ id: 0x0b, name: \"Tittle\" });\n      }\n      if (v & 0b0000000000010000) {\n        list.push({ id: 0x0c, name: \"Text\" });\n      }\n      if (v & 0b0000000000100000) {\n        list.push({ id: 0x09, name: \"NotifyId\" });\n      }\n      if (v & 0b0000000001000000) {\n        list.push({ id: 0x04, name: \"NotifyCategoryID\" });\n      }\n    } else if (notify_cateogry_id === 8) {\n      // Etc\n      if (v & 0b0000000000000001) {\n        list.push({ id: 0x0d, name: \"AppName\" });\n      }\n      if (v & 0b0000000000000010) {\n        list.push({ id: 0x0e, name: \"AppNameLocal\" });\n      }\n      if (v & 0b0000000000000100) {\n        list.push({ id: 0x28, name: \"Package\" });\n      }\n      if (v & 0b0000000000001000) {\n        list.push({ id: 0x1d, name: \"Contents1\" });\n      }\n      if (v & 0b0000000000010000) {\n        list.push({ id: 0x1e, name: \"Contents2\" });\n      }\n      if (v & 0b0000000000100000) {\n        list.push({ id: 0x1f, name: \"Contents3\" });\n      }\n      if (v & 0b0000000001000000) {\n        list.push({ id: 0x20, name: \"Contents4\" });\n      }\n      if (v & 0b0000000010000000) {\n        list.push({ id: 0x21, name: \"Contents5\" });\n      }\n      if (v & 0b0000000100000000) {\n        list.push({ id: 0x22, name: \"Contents6\" });\n      }\n      if (v & 0b0000001000000000) {\n        list.push({ id: 0x23, name: \"Contents7\" });\n      }\n      if (v & 0b0000010000000000) {\n        list.push({ id: 0x1b, name: \"MimeTypeForMedia\" });\n      }\n      if (v & 0b0000100000000000) {\n        list.push({ id: 0x27, name: \"Media\" });\n      }\n      if (v & 0b0001000000000000) {\n        list.push({ id: 0x1a, name: \"MimeTypeForImage\" });\n      }\n      if (v & 0b0010000000000000) {\n        list.push({ id: 0x1c, name: \"Image\" });\n      }\n      if (v & 0b0100000000000000) {\n        list.push({ id: 0x09, name: \"NotifyId\" });\n      }\n      if (v & 0b1000000000000000) {\n        list.push({ id: 0x04, name: \"NotifyCategoryID\" });\n      }\n    }\n\n    return {\n      name: \"ParameterIdList\",\n      parameterIdList: list,\n    };\n  }\n\n  public _parseUniqueId(buf: any) {\n    return {\n      name: \"UniqueId\",\n      uniqueId: buf.readUInt16LE(0),\n    };\n  }\n\n  public _parseNotifyId(buf: any) {\n    return {\n      name: \"NotifyId\",\n      notifyId: buf.readUInt16LE(0),\n    };\n  }\n\n  public _parseNotificationOperation(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"AlreadyRead\";\n    } else if (code === 0x01) {\n      text = \"Delete\";\n    }\n    return {\n      name: \"NotificationOperation\",\n      notificationOperationCode: code,\n      notificationOperationText: text,\n    };\n  }\n\n  public _parseTittle(buf: any) {\n    return {\n      name: \"Tittle\",\n      title: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseText(buf: any) {\n    return {\n      name: \"Text\",\n      text: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseAppName(buf: any) {\n    return {\n      name: \"AppName\",\n      appName: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseAppNameLocal(buf: any) {\n    return {\n      name: \"AppNameLocal\",\n      appNameLocal: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseNotifyApp(buf: any) {\n    return {\n      name: \"NotifyApp\",\n      notifyApp: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseRumblingSetting(buf: any) {\n    const list = [];\n    const v = buf.readUInt8(0);\n    if (v & 0b00000001) {\n      list.push({ id: 0, name: \"LED\" });\n    }\n    if (v & 0b00000010) {\n      list.push({ id: 1, name: \"Vibration\" });\n    }\n    if (v & 0b00000100) {\n      list.push({ id: 2, name: \"Beep\" });\n    }\n    return {\n      name: \"RumblingSetting\",\n      rumblingSetting: list,\n    };\n  }\n\n  public _parseVibrationPattern(buf: any) {\n    const list = [];\n    let offset = 0;\n    while (true) {\n      const len = buf.readUInt8(offset++);\n      let name = \"\";\n      for (let i = 0; i < len; i++) {\n        name += String.fromCharCode(buf.readUInt8(offset++));\n      }\n      list.push(name);\n      if (offset >= buf.length) {\n        break;\n      }\n    }\n    return {\n      name: \"VibrationPattern\",\n      vibrationPattern: list,\n    };\n  }\n\n  public _parseLedPattern(buf: any) {\n    const list = [];\n    let offset = 0;\n    while (true) {\n      const len = buf.readUInt8(offset++);\n      let name = \"\";\n      for (let i = 0; i < len; i++) {\n        name += String.fromCharCode(buf.readUInt8(offset++));\n      }\n      list.push(name);\n      if (offset >= buf.length) {\n        break;\n      }\n    }\n    return {\n      name: \"LedPattern\",\n      LedPattern: list,\n    };\n  }\n\n  public _parseSender(buf: any) {\n    return {\n      name: \"Sender\",\n      sender: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseSenderAddress(buf: any) {\n    return {\n      name: \"SenderAddress\",\n      senderAddress: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseReceiveDate(buf: any) {\n    const Y = buf.readUInt16LE(0);\n    const M = buf.readUInt8(2);\n    const D = buf.readUInt8(3);\n    const h = buf.readUInt8(4);\n    const m = buf.readUInt8(5);\n    const s = buf.readUInt8(6);\n    const dt = new Date(Y, M, D, h, m, s);\n    return {\n      name: \"ReceiveDate\",\n      receiveDate: dt,\n    };\n  }\n\n  public _parseStartDate(buf: any) {\n    const Y = buf.readUInt16LE(0);\n    const M = buf.readUInt8(2);\n    const D = buf.readUInt8(3);\n    const h = buf.readUInt8(4);\n    const m = buf.readUInt8(5);\n    const s = buf.readUInt8(6);\n    const dt = new Date(Y, M, D, h, m, s);\n    return {\n      name: \"StartDate\",\n      startDate: dt,\n    };\n  }\n\n  public _parseEndDate(buf: any) {\n    const Y = buf.readUInt16LE(0);\n    const M = buf.readUInt8(2);\n    const D = buf.readUInt8(3);\n    const h = buf.readUInt8(4);\n    const m = buf.readUInt8(5);\n    const s = buf.readUInt8(6);\n    const dt = new Date(Y, M, D, h, m, s);\n    return {\n      name: \"EndDate\",\n      endDate: dt,\n    };\n  }\n\n  public _parseArea(buf: any) {\n    return {\n      name: \"Area\",\n      area: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parsePerson(buf: any) {\n    const buf_list = [];\n    let offset = 0;\n    let start = 0;\n    while (true) {\n      if (buf.readUInt8(offset) === 0x00) {\n        if (start !== offset) {\n          buf_list.push(buf.slice(start, offset));\n          start = offset;\n        }\n      }\n      offset++;\n      if (offset >= buf.length) {\n        if (start !== offset) {\n          buf_list.push(buf.slice(start, offset));\n        }\n        break;\n      }\n    }\n    const list: any = [];\n    buf_list.forEach((b) => {\n      list.push(b.toString(\"UTF-8\"));\n    });\n    return {\n      name: \"Person\",\n      person: list,\n    };\n  }\n\n  public _parseMimeTypeForImage(buf: any) {\n    return {\n      name: \"MimeTypeForImage\",\n      mimeTypeForImage: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseMimeTypeForMedia(buf: any) {\n    return {\n      name: \"MimeTypeForMedia\",\n      mimeTypeForMedia: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseImage(buf: any) {\n    return {\n      name: \"Image\",\n      image: buf,\n    };\n  }\n\n  public _parseContents(buf: any, pid: any) {\n    return {\n      name: \"Contents\" + pid,\n      contents: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseMedia(buf: any) {\n    return {\n      name: \"Media\",\n      media: buf,\n    };\n  }\n\n  public _parsePackage(buf: any) {\n    return {\n      name: \"Package\",\n      package: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseClass(buf: any) {\n    return {\n      name: \"Class\",\n      class: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseSharingInformation(buf: any) {\n    return {\n      name: \"SharingInformation\",\n      sharingInformation: buf.toString(\"UTF-8\"),\n    };\n  }\n\n  public _parseBeepPattern(buf: any) {\n    const list = [];\n    let offset = 0;\n    while (true) {\n      const len = buf.readUInt8(offset++);\n      let name = \"\";\n      for (let i = 0; i < len; i++) {\n        name += String.fromCharCode(buf.readUInt8(offset++));\n      }\n      list.push(name);\n      if (offset >= buf.length) {\n        break;\n      }\n    }\n    return {\n      name: \"BeepPattern\",\n      beepPattern: list,\n    };\n  }\n\n  public createRequest(message_name: any, params: any) {\n    if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {\n      return null;\n    }\n    const buf_list = [];\n    // packet header\n    const header_buf: any = Buffer.alloc(1);\n    header_buf.writeUInt8(parseInt(\"00000011\", 2));\n    buf_list.push(header_buf);\n    // Service ID\n    const sid_buf: any = Buffer.alloc(1);\n    sid_buf.writeUInt8(this.SERVICE_ID);\n    buf_list.push(sid_buf);\n    // Message ID\n    const mid_buf: any = Buffer.alloc(2);\n    mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);\n    buf_list.push(mid_buf);\n    // Number of parameters + Payload\n    const pl_buf = this._createPayload(message_name, params);\n    if (!pl_buf) {\n      return null;\n    }\n    buf_list.push(pl_buf);\n\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayload(message_name: any, params: any) {\n    if (message_name === \"CONFIRM_NOTIFY_CATEGORY\") {\n      return this._createPayloadConfirmNotifyCategory(params);\n    } else if (message_name === \"NOTIFY_INFORMATION\") {\n      return this._createPayloadNotifyInformation(params);\n    } else if (message_name === \"GET_PD_NOTIFY_DETAIL_DATA_RESP\") {\n      return this._createPayloadGetPdNotifyDetailDataResp(params);\n    } else if (message_name === \"START_PD_APPLICATION_RESP\") {\n      return this._createPayloadStartPdApplicationResp(params);\n    } else {\n      return null;\n    }\n  }\n\n  public _createPropertyBlockBuffer(pid: any, val_buf: any) {\n    const pid_buf = Buffer.from([pid]);\n    let len = 0;\n    if (val_buf) {\n      len = val_buf.length;\n    }\n    let len_buf: any = Buffer.alloc(4);\n    len_buf.writeUInt32LE(len);\n    len_buf = len_buf.slice(0, 3);\n    const buf_list = [pid_buf, len_buf];\n    if (val_buf) {\n      buf_list.push(val_buf);\n    }\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadConfirmNotifyCategory(params: any) {\n    const pnum_buf: any = Buffer.alloc(1);\n    pnum_buf.writeUInt8(0);\n    return pnum_buf;\n  }\n\n  public _createPayloadNotifyInformation(params: any) {\n    /*\n\t\tNotifyCategory   M 2 0x03\n\t\tUniqueId         M 2 0x08\n\t\tParameterIdList  M 2 0x07\n\t\tRumblingSetting  O 1 0x10\n\t\tVibrationPattern O   0x11\n\t\tLedPattern       O   0x12\n\t\tBeepPattern      O   0x2B\n\t\t*/\n\n    /*\n\t\tlet pnum = 0;\n\t\tlet notify_category = null;\n\t\tlet notify_category_name = '';\n\t\tif('NotifyCategory' in params) {\n\t\t\tnotify_category =  params['NotifyCategory'];\n\t\t\tif(typeof(notify_category) === 'number') {\n\t\t\t\tif(notify_category >= 0 && notify_category <= 0xFF && notify_category % 1 === 0) {\n\t\t\t\t\tlet hit = false;\n\t\t\t\t\tfor(let name in this._NOTIFY_CATEGORY_NAME_ID_MAP) {\n\t\t\t\t\t\tif(this._NOTIFY_CATEGORY_NAME_ID_MAP[name] === notify_category) {\n\t\t\t\t\t\t\thit = true;\n\t\t\t\t\t\t\tnotify_category_name = name;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(hit === true) {\n\t\t\t\t\t\tpnum ++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else if(typeof(notify_category) === 'string') {\n\t\t\t\tif(notify_category in this._NOTIFY_CATEGORY_NAME_ID_MAP) {\n\t\t\t\t\tnotify_category = this._NOTIFY_CATEGORY_NAME_ID_MAP[notify_category];\n\t\t\t\t\tnotify_category_name = notify_category;\n\t\t\t\t\tpnum ++;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\tlet uid = null;\n\t\tif(('UniqueId' in params) && typeof(params['UniqueId']) === 'number' && params['UniqueId'] >= 0 && params['UniqueId'] <= 0xFFFF && params['UniqueId'] % 1 === 0) {\n\t\t\tuid = params['UniqueId'];\n\t\t\tpnum ++;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\t// buffer list\n\t\tlet buf_list = [];\n\t\t// Number of parameters\n\t\tlet pnum_buf = Buffer.from([pnum]);\n\t\tbuf_list.push(pnum_buf);\n\t\t// NotifyCategory\n\t\tif(notify_category !== null) {\n\t\t\tlet n = 1 << notify_category;\n\t\t\tlet val_buf = Buffer.alloc(2);\n\t\t\tval_buf.writeUInt16LE(n);\n\t\t\tbuf_list.push(this._createPropertyBlockBuffer(0x03, val_buf));\n\t\t}\n\t\t// UniqueId\n\t\tif(uid !== null) {\n\t\t\tlet val_buf = Buffer.alloc(2);\n\t\t\tval_buf.writeUInt16LE(uid);\n\t\t\tbuf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));\n\t\t}\n\t\t// Create a packet\n\t\treturn Buffer.concat(buf_list);\n\t\t*/\n    return null;\n  }\n\n  public _createPayloadGetPdNotifyDetailDataResp(params: any) {\n    let pnum = 0;\n    let rcode = null;\n    if (\n      \"ResultCode\" in params &&\n      typeof params.ResultCode === \"number\" &&\n      params.ResultCode >= 0 &&\n      params.ResultCode <= 0xff &&\n      params.ResultCode % 1 === 0\n    ) {\n      rcode = params.ResultCode;\n      pnum++;\n    } else {\n      return null;\n    }\n    let uid = null;\n    if (\n      \"UniqueId\" in params &&\n      typeof params.UniqueId === \"number\" &&\n      params.UniqueId >= 0 &&\n      params.UniqueId <= 0xff &&\n      params.UniqueId % 1 === 0\n    ) {\n      uid = params.UniqueId;\n      pnum++;\n    } else {\n      return null;\n    }\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // ResultCode\n    if (rcode !== null) {\n      const val_buf: any = Buffer.alloc(1);\n      val_buf.writeUInt8(rcode);\n      buf_list.push(this._createPropertyBlockBuffer(0x00, val_buf));\n    }\n    // UniqueId\n    if (uid !== null) {\n      const val_buf: any = Buffer.alloc(2);\n      val_buf.writeUInt16LE(uid);\n      buf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadStartPdApplicationResp(params: any) {\n    let pnum = 0;\n    let rcode: any;\n    if (\n      \"ResultCode\" in params &&\n      typeof params.ResultCode === \"number\" &&\n      params.ResultCode >= 0 &&\n      params.ResultCode <= 0xff &&\n      params.ResultCode % 1 === 0\n    ) {\n      rcode = params.ResultCode;\n      pnum++;\n    } else {\n      return null;\n    }\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // ResultCode\n    if (rcode !== null) {\n      const val_buf: any = Buffer.alloc(1);\n      val_buf.writeUInt8(rcode);\n      buf_list.push(this._createPropertyBlockBuffer(0x00, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n}\n"]}