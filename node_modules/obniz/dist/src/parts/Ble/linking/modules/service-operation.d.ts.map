{"version":3,"sources":["../src/parts/Ble/linking/modules/service-operation.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAWH,MAAM,CAAC,OAAO,OAAO,uBAAuB;IACnC,UAAU,SAAQ;IAClB,YAAY,SAA+B;IAC3C,gBAAgB,EAAE,GAAG,CAE1B;IAEF,OAAO,CAAC,OAAO,CAAW;IAEnB,aAAa,CAAC,IAAI,EAAE,GAAG;IAIvB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAkBhC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAelC,gBAAgB,CAAC,GAAG,EAAE,GAAG;;;;;IAuBzB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;;IAarB,cAAc,CAAC,GAAG,EAAE,GAAG;;;;;CAqD/B","file":"service-operation.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Linking\n */\n\n/* ------------------------------------------------------------------\n * node-linking - service-operation.js\n *\n * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.\n * Released under the MIT license\n * Date: 2019-11-02\n * ---------------------------------------------------------------- */\n\"use strict\";\n\nexport default class LinkingServiceOperation {\n  public SERVICE_ID = 0x02;\n  public SERVICE_NAME = \"PeripheralDeviceOperation\";\n  public MESSAGE_NAME_MAP: any = {\n    \"00\": \"NOTIFY_PD_OPERATION\",\n  };\n\n  private _device: any = {};\n\n  public setDeviceInfo(info: any) {\n    this._device = info;\n  }\n\n  public parsePayload(pnum: any, buf: any) {\n    let offset = 0;\n    const parameters = [];\n    try {\n      for (let i = 0; i < pnum; i++) {\n        const pid = buf.readUInt8(offset++);\n        let plen_buf = buf.slice(offset, offset + 3);\n        plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);\n        const plen = plen_buf.readUInt32LE(0);\n        offset += 3;\n        const pvalue_buf = buf.slice(offset, offset + plen);\n        offset += plen;\n        parameters.push(this._parseParameter(pid, pvalue_buf));\n      }\n    } catch (e) {}\n    return parameters;\n  }\n\n  public _parseParameter(pid: any, buf: any) {\n    let parsed: any = null;\n    if (pid === 0x00) {\n      parsed = this._parseResultCode(buf);\n    } else if (pid === 0x01) {\n      parsed = this._parseCancel(buf);\n    } else if (pid === 0x02) {\n      parsed = this._parseButtonId(buf);\n    }\n    if (parsed) {\n      parsed.parameterId = pid;\n    }\n    return parsed;\n  }\n\n  public _parseResultCode(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OK, request processed correctly\";\n    } else if (code === 0x01) {\n      text = \"Cancel\";\n    } else if (code === 0x02) {\n      text = \"Error, failed\";\n    } else if (code === 0x03) {\n      text = \"Error, no reason defined\";\n    } else if (code === 0x04) {\n      text = \"Error, data not available\";\n    } else if (code === 0x05) {\n      text = \"Error, not supported\";\n    }\n    return {\n      name: \"ResultCode\",\n      resultCode: code,\n      resultText: text,\n    };\n  }\n\n  public _parseCancel(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"User cancel\";\n    }\n    return {\n      name: \"Cancel\",\n      cancelCode: code,\n      cancelText: text,\n    };\n  }\n\n  public _parseButtonId(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"Power\";\n    } else if (code === 0x01) {\n      text = \"Return\";\n    } else if (code === 0x02) {\n      text = \"SingleClick\";\n    } else if (code === 0x03) {\n      text = \"Home\";\n    } else if (code === 0x04) {\n      text = \"DoubleClick\";\n    } else if (code === 0x05) {\n      text = \"VolumeUp\";\n    } else if (code === 0x06) {\n      text = \"VolumeDown\";\n    } else if (code === 0x07) {\n      text = \"LongPress\";\n    } else if (code === 0x08) {\n      text = \"Pause\";\n    } else if (code === 0x09) {\n      text = \"LongPressRelease\";\n    } else if (code === 0x0a) {\n      text = \"FastForward\";\n    } else if (code === 0x0b) {\n      text = \"ReWind\";\n    } else if (code === 0x0c) {\n      text = \"Shutter\";\n    } else if (code === 0x0d) {\n      text = \"Up\";\n    } else if (code === 0x0e) {\n      text = \"Down\";\n    } else if (code === 0x0f) {\n      text = \"Left\";\n    } else if (code === 0x10) {\n      text = \"Right\";\n    } else if (code === 0x11) {\n      text = \"Enter\";\n    } else if (code === 0x12) {\n      text = \"Menu\";\n    } else if (code === 0x13) {\n      text = \"Play\";\n    } else if (code === 0x14) {\n      text = \"Stop\";\n    }\n\n    return {\n      name: \"ButtonId\",\n      buttonId: code,\n      buttonName: text,\n    };\n  }\n}\n"]}