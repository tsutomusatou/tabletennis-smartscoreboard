{"version":3,"sources":["../src/parts/Ble/linking/modules/service-sensor.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAaH,MAAM,CAAC,OAAO,OAAO,oBAAoB;IAChC,UAAU,SAAQ;IAClB,YAAY,SAAuC;IACnD,gBAAgB,EAAE,GAAG,CAM1B;IAGF,OAAO,CAAC,qBAAqB,CAG3B;IACF,OAAO,CAAC,OAAO,CAAW;IAEnB,aAAa,CAAC,IAAI,EAAE,GAAG;IAIvB,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAuBhC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IA6BpD,gBAAgB,CAAC,GAAG,EAAE,GAAG;;;;;IAuBzB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;;IAarB,gBAAgB,CAAC,GAAG,EAAE,GAAG;;;;;IAiCzB,YAAY,CAAC,GAAG,EAAE,GAAG;;;;;IAerB,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IAOtB,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IAOtB,aAAa,CAAC,GAAG,EAAE,GAAG;;;;IAOtB,iBAAiB,CAAC,GAAG,EAAE,GAAG;;;;IAO1B,iBAAiB,CAAC,GAAG,EAAE,GAAG;;;;IAO1B,iBAAiB,CAAC,GAAG,EAAE,GAAG;;;;IAO1B,kBAAkB,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoD7C,aAAa,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IA2B5C,cAAc,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG;IAU7C,0BAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG;IAgBjD,2BAA2B,CAAC,MAAM,EAAE,GAAG;IA6BvC,iCAAiC,CAAC,MAAM,EAAE,GAAG;CAuGrD","file":"service-sensor.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Linking\n */\n\n/* ------------------------------------------------------------------\n * node-linking - service-sensor.js\n *\n * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.\n * Released under the MIT license\n * Date: 2019-11-02\n * ---------------------------------------------------------------- */\n\"use strict\";\n\nimport LinkingIEEE754 from \"./ieee754\";\n\nexport default class LinkingServiceSensor {\n  public SERVICE_ID = 0x03;\n  public SERVICE_NAME = \"PeripheralDeviceSensorInformation\";\n  public MESSAGE_NAME_MAP: any = {\n    \"00\": \"GET_SENSOR_INFO\",\n    \"01\": \"GET_SENSOR_INFO_RESP\",\n    \"02\": \"SET_NOTIFY_SENSOR_INFO\",\n    \"03\": \"SET_NOTIFY_SENSOR_INFO_RESP\",\n    \"04\": \"NOTIFY_PD_SENSOR_INFO\",\n  };\n\n  // Private\n  private _WRITE_MESSAGE_ID_MAP: any = {\n    GET_SENSOR_INFO: 0x00,\n    SET_NOTIFY_SENSOR_INFO: 0x02,\n  };\n  private _device: any = {};\n\n  public setDeviceInfo(info: any) {\n    this._device = info;\n  }\n\n  public parsePayload(pnum: any, buf: any) {\n    let offset = 0;\n    const parameters = [];\n    let sensor_type = 0;\n    try {\n      for (let i = 0; i < pnum; i++) {\n        const pid = buf.readUInt8(offset++);\n        let plen_buf = buf.slice(offset, offset + 3);\n        plen_buf = Buffer.concat([plen_buf, Buffer.from([0x00])]);\n        const plen = plen_buf.readUInt32LE(0);\n        offset += 3;\n        const pvalue_buf = buf.slice(offset, offset + plen);\n        offset += plen;\n        const p = this._parseParameter(pid, pvalue_buf, sensor_type);\n        if (pid === 0x02 && \"sensorTypeCode\" in p) {\n          sensor_type = p.sensorTypeCode;\n        }\n        parameters.push(p);\n      }\n    } catch (e) {}\n    return parameters;\n  }\n\n  public _parseParameter(pid: any, buf: any, sensor_type: any) {\n    let parsed: any = {};\n    if (pid === 0x00) {\n      parsed = this._parseResultCode(buf);\n    } else if (pid === 0x01) {\n      parsed = this._parseCancel(buf);\n    } else if (pid === 0x02) {\n      parsed = this._parseSensorType(buf);\n    } else if (pid === 0x03) {\n      parsed = this._parseStatus(buf);\n    } else if (pid === 0x04) {\n      parsed = this._parseX_value(buf);\n    } else if (pid === 0x05) {\n      parsed = this._parseY_value(buf);\n    } else if (pid === 0x06) {\n      parsed = this._parseZ_value(buf);\n    } else if (pid === 0x07) {\n      parsed = this._parseX_threshold(buf);\n    } else if (pid === 0x08) {\n      parsed = this._parseY_threshold(buf);\n    } else if (pid === 0x09) {\n      parsed = this._parseZ_threshold(buf);\n    } else if (pid === 0x0a) {\n      parsed = this._parseOriginalData(buf, sensor_type);\n    }\n    parsed.parameterId = pid;\n    return parsed;\n  }\n\n  public _parseResultCode(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OK, request processed correctly\";\n    } else if (code === 0x01) {\n      text = \"Cancel\";\n    } else if (code === 0x02) {\n      text = \"Error, failed\";\n    } else if (code === 0x03) {\n      text = \"Error, no reason defined\";\n    } else if (code === 0x04) {\n      text = \"Error, data not available\";\n    } else if (code === 0x05) {\n      text = \"Error, not supported\";\n    }\n    return {\n      name: \"ResultCode\",\n      resultCode: code,\n      resultText: text,\n    };\n  }\n\n  public _parseCancel(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"User cancel\";\n    }\n    return {\n      name: \"Cancel\",\n      cancelCode: code,\n      cancelText: text,\n    };\n  }\n\n  public _parseSensorType(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"Gyroscope\";\n    } else if (code === 0x01) {\n      text = \"Accelerometer\";\n    } else if (code === 0x02) {\n      text = \"Orientation\";\n    } else if (code === 0x03) {\n      text = \"Battery\";\n    } else if (code === 0x04) {\n      text = \"Temperature\";\n    } else if (code === 0x05) {\n      text = \"Humidity\";\n    } else if (code === 0x06) {\n      text = \"Atmospheric pressure\";\n    } else if (code === 0x07) {\n      text = \"Opening and closing\";\n    } else if (code === 0x08) {\n      text = \"Human detection\";\n    } else if (code === 0x09) {\n      text = \"Move\";\n    } else if (code === 0x0a) {\n      text = \"Illuminance\";\n    }\n    return {\n      name: \"SensorType\",\n      sensorTypeCode: code,\n      sensorTypeText: text,\n    };\n  }\n\n  public _parseStatus(buf: any) {\n    const code = buf.readUInt8(0);\n    let text = \"\";\n    if (code === 0x00) {\n      text = \"OFF\";\n    } else if (code === 0x01) {\n      text = \"ON\";\n    }\n    return {\n      name: \"Status\",\n      statusCode: code,\n      statusText: text,\n    };\n  }\n\n  public _parseX_value(buf: any) {\n    return {\n      name: \"X_value\",\n      xValue: buf.readFloatLE(0),\n    };\n  }\n\n  public _parseY_value(buf: any) {\n    return {\n      name: \"Y_value\",\n      yValue: buf.readFloatLE(0),\n    };\n  }\n\n  public _parseZ_value(buf: any) {\n    return {\n      name: \"Z_value\",\n      zValue: buf.readFloatLE(0),\n    };\n  }\n\n  public _parseX_threshold(buf: any) {\n    return {\n      name: \"X_threshold\",\n      xThreshold: buf.readFloatLE(0),\n    };\n  }\n\n  public _parseY_threshold(buf: any) {\n    return {\n      name: \"Y_threshold\",\n      yThreshold: buf.readFloatLE(0),\n    };\n  }\n\n  public _parseZ_threshold(buf: any) {\n    return {\n      name: \"Z_threshold\",\n      zThreshold: buf.readFloatLE(0),\n    };\n  }\n\n  public _parseOriginalData(buf: any, sensor_type: any) {\n    const n = buf.readUInt16LE(0) & 0b0000111111111111;\n    if (sensor_type === 0x03) {\n      // Battery\n      return {\n        chargeRequired: n & 0b0000100000000000 ? true : false,\n        chargeLevel: Math.min((n & 0b0000011111111111) / 10, 100),\n      };\n    } else if (sensor_type === 0x04) {\n      // Temperature\n      return {\n        temperature: LinkingIEEE754.read(n, 1, 4, 7),\n      };\n    } else if (sensor_type === 0x05) {\n      // Humidity\n      const v = LinkingIEEE754.read(n, 0, 4, 8);\n      return {\n        humidity: v,\n      };\n    } else if (sensor_type === 0x06) {\n      // Atmospheric pressure\n      return {\n        pressure: buf.readFloatLE(0),\n      };\n    } else if (sensor_type === 0x07) {\n      // Opening and closing\n      return {\n        openingStatus: n & 0b0000100000000000 ? true : false,\n        openingCount: Math.min((n & 0b0000011111111111) / 10, 100),\n      };\n    } else if (sensor_type === 0x08) {\n      // Human detection\n      return {\n        humanDetectionResponse: n & 0b0000100000000000 ? true : false,\n        humanDetectionCount: n & 0b0000011111111111,\n      };\n    } else if (sensor_type === 0x09) {\n      // Move (Vibration Sensor)\n      return {\n        moveResponse: n & 0b0000100000000000 ? true : false,\n        moveCount: n & 0b0000011111111111,\n      };\n    } else if (sensor_type === 0x0a) {\n      // Illuminance\n      return {\n        illuminance: buf.readFloatLE(0),\n      };\n    } else {\n      return {};\n    }\n  }\n\n  public createRequest(message_name: any, params: any) {\n    if (!(message_name in this._WRITE_MESSAGE_ID_MAP)) {\n      return null;\n    }\n    const buf_list = [];\n    // packet header\n    const header_buf: any = Buffer.alloc(1);\n    header_buf.writeUInt8(parseInt(\"00000011\", 2));\n    buf_list.push(header_buf);\n    // Service ID\n    const sid_buf: any = Buffer.alloc(1);\n    sid_buf.writeUInt8(this.SERVICE_ID);\n    buf_list.push(sid_buf);\n    // Message ID\n    const mid_buf: any = Buffer.alloc(2);\n    mid_buf.writeUInt16LE(this._WRITE_MESSAGE_ID_MAP[message_name]);\n    buf_list.push(mid_buf);\n    // Number of parameters + Payload\n    const pl_buf = this._createPayload(message_name, params);\n    if (!pl_buf) {\n      return null;\n    }\n    buf_list.push(pl_buf);\n\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayload(message_name: any, params: any) {\n    if (message_name === \"GET_SENSOR_INFO\") {\n      return this._createPayloadGetSensorInfo(params);\n    } else if (message_name === \"SET_NOTIFY_SENSOR_INFO\") {\n      return this._createPayloadSetNotifySensorInfo(params);\n    } else {\n      return null;\n    }\n  }\n\n  public _createPropertyBlockBuffer(pid: any, val_buf: any) {\n    const pid_buf = Buffer.from([pid]);\n    let len = 0;\n    if (val_buf) {\n      len = val_buf.length;\n    }\n    let len_buf: any = Buffer.alloc(4);\n    len_buf.writeUInt32LE(len);\n    len_buf = len_buf.slice(0, 3);\n    const buf_list = [pid_buf, len_buf];\n    if (val_buf) {\n      buf_list.push(val_buf);\n    }\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadGetSensorInfo(params: any) {\n    let pnum = 0;\n    let sensor_type = null;\n    if (\n      \"SensorType\" in params &&\n      typeof params.SensorType === \"number\" &&\n      params.SensorType >= 0x00 &&\n      params.SensorType <= 0xff &&\n      params.SensorType % 1 === 0\n    ) {\n      sensor_type = params.SensorType;\n      pnum++;\n    } else {\n      return null;\n    }\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // SensorType\n    if (sensor_type !== null) {\n      const val_buf = Buffer.from([sensor_type]);\n      buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n\n  public _createPayloadSetNotifySensorInfo(params: any) {\n    let pnum = 0;\n    let sensor_type = null;\n    if (\n      \"SensorType\" in params &&\n      typeof params.SensorType === \"number\" &&\n      params.SensorType >= 0x00 &&\n      params.SensorType <= 0xff &&\n      params.SensorType % 1 === 0\n    ) {\n      sensor_type = params.SensorType;\n      pnum++;\n    } else {\n      return null;\n    }\n    let status = null;\n    if (\"Status\" in params) {\n      status = params.Status ? 1 : 0;\n      pnum++;\n    } else {\n      return null;\n    }\n    let x = null;\n    let y = null;\n    let z = null;\n    if (sensor_type <= 0x02) {\n      if (\"X_threshold\" in params) {\n        if (typeof params.X_threshold === \"number\") {\n          x = params.X_threshold;\n          pnum++;\n        } else {\n          return null;\n        }\n      }\n      if (\"Y_threshold\" in params) {\n        if (typeof params.Y_threshold === \"number\") {\n          y = params.Y_threshold;\n          pnum++;\n        } else {\n          return null;\n        }\n      }\n      if (\"Z_threshold\" in params) {\n        if (typeof params.Z_threshold === \"number\") {\n          z = params.Z_threshold;\n          pnum++;\n        } else {\n          return null;\n        }\n      }\n    }\n\n    let odata = null;\n    if (\"OriginalData\" in params) {\n      if (params.OriginalData && params.OriginalData instanceof Buffer) {\n        odata = params.OriginalData;\n        pnum++;\n      } else {\n        return null;\n      }\n    }\n\n    // buffer list\n    const buf_list = [];\n    // Number of parameters\n    const pnum_buf = Buffer.from([pnum]);\n    buf_list.push(pnum_buf);\n    // SensorType\n    if (sensor_type !== null) {\n      const val_buf = Buffer.from([sensor_type]);\n      buf_list.push(this._createPropertyBlockBuffer(0x02, val_buf));\n    }\n    // Status\n    if (status !== null) {\n      const val_buf = Buffer.from([status]);\n      buf_list.push(this._createPropertyBlockBuffer(0x03, val_buf));\n    }\n    // X_threshold\n    if (x !== null) {\n      const val_buf = Buffer.alloc(4);\n      val_buf.writeFloatLE(x, 0);\n      buf_list.push(this._createPropertyBlockBuffer(0x07, val_buf));\n    }\n    // Y_threshold\n    if (y !== null) {\n      const val_buf = Buffer.alloc(4);\n      val_buf.writeFloatLE(y, 0);\n      buf_list.push(this._createPropertyBlockBuffer(0x08, val_buf));\n    }\n    // Z_threshold\n    if (z !== null) {\n      const val_buf = Buffer.alloc(4);\n      val_buf.writeFloatLE(z, 0);\n      buf_list.push(this._createPropertyBlockBuffer(0x09, val_buf));\n    }\n    // OriginalData\n    if (odata !== null) {\n      const val_buf = odata;\n      buf_list.push(this._createPropertyBlockBuffer(0x0a, val_buf));\n    }\n    // Create a packet\n    return Buffer.concat(buf_list);\n  }\n}\n"]}