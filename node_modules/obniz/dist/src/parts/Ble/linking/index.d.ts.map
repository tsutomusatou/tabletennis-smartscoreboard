{"version":3,"sources":["../src/parts/Ble/linking/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAUH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAGpE,OAAO,aAAa,MAAM,kBAAkB,CAAC;AAE7C,MAAM,WAAW,cAAc;CAAG;AAElC,MAAM,CAAC,OAAO,OAAO,OAAO;WACZ,IAAI,IAAI,cAAc;IAM7B,eAAe,EAAE,GAAG,CAAC;IACrB,UAAU,EAAE,GAAG,CAAC;IAChB,yBAAyB,WAAgD;IACzE,gBAAgB,EAAE,GAAG,CAAC;IACtB,cAAc,EAAE,GAAG,CAAC;IACpB,eAAe,EAAE,GAAG,CAAC;IACrB,YAAY,EAAE,GAAG,CAAC;IAClB,WAAW,UAAS;IAEpB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,SAAS,EAAE,mBAAmB,GAAG,IAAI,CAAC;IACtC,KAAK,EAAG,KAAK,CAAC;gBAET,MAAM,EAAE,GAAG;IAehB,KAAK,CAAC,KAAK,EAAE,KAAK;IAIZ,IAAI;IAKV,QAAQ,CAAC,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAsDhC,iBAAiB;IAWjB,iBAAiB,CAAC,UAAU,EAAE,mBAAmB,EAAE,WAAW,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;IAyBnF,YAAY;IAYZ,QAAQ;IAWR,SAAS,CAAC,CAAC,EAAE,GAAG;CAkCxB","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Linking\n */\n\n/* ------------------------------------------------------------------\n * node-linking - linking.js\n *\n * Copyright (c) 2017-2019, Futomi Hatano, All rights reserved.\n * Released under the MIT license\n * Date: 2019-10-24\n * ---------------------------------------------------------------- */\n\nimport Obniz from \"../../../obniz\";\nimport bleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nimport LinkingAdvertising from \"./modules/advertising\";\nimport LinkingDevice from \"./modules/device\";\n\nexport interface LinkingOptions {}\n\nexport default class Linking {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"Linking\",\n    };\n  }\n\n  public onadvertisement: any;\n  public ondiscover: any;\n  public PRIMARY_SERVICE_UUID_LIST = [\"b3b3690150d34044808d50835b13a6cd\", \"fe4e\"];\n  public _discover_status: any;\n  public _discover_wait: any;\n  public _discover_timer: any;\n  public _peripherals: any;\n  public initialized = false;\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public periperal: bleRemotePeripheral | null;\n  public obniz!: Obniz;\n\n  constructor(params: any) {\n    this.keys = [];\n    this.requiredKeys = [];\n    this.periperal = null;\n\n    this.onadvertisement = null;\n    this.ondiscover = null;\n\n    // Private properties\n    this._discover_status = false;\n    this._discover_wait = 3000; // ms\n    this._discover_timer = null;\n    this._peripherals = {};\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n  }\n\n  public async init() {\n    await this.obniz.ble!.initWait();\n    this.initialized = true;\n  }\n\n  public discover(p: any): Promise<any[]> {\n    this._checkInitialized();\n\n    let duration = 5000;\n    let name_filter = \"\";\n    let id_filter = \"\";\n    let quick = false;\n    if (p && typeof p === \"object\") {\n      if (\"duration\" in p && typeof p.duration === \"number\") {\n        duration = p.duration;\n        if (duration < 1000) {\n          duration = 1000;\n        }\n      }\n      if (\"nameFilter\" in p && typeof (p.nameFilter === \"string\")) {\n        name_filter = p.nameFilter;\n      }\n      if (\"idFilter\" in p && typeof (p.idFilter === \"string\")) {\n        id_filter = p.idFilter;\n      }\n      if (\"quick\" in p && typeof (p.quick === \"boolean\")) {\n        quick = p.quick;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      let timer: any = null;\n      const finishDiscovery = () => {\n        if (timer) {\n          clearTimeout(timer);\n        }\n        this.stopScan();\n        const device_list = [];\n        for (const addr in this._peripherals) {\n          device_list.push(this._peripherals[addr]);\n        }\n        resolve(device_list);\n      };\n      this._peripherals = {};\n      this.obniz.ble!.scan.onfind = (peripheral: bleRemotePeripheral) => {\n        const dev = this._discoveredDevice(peripheral, name_filter, id_filter);\n        if (quick && dev) {\n          finishDiscovery();\n          return;\n        }\n      };\n      this._scanDevices();\n      this._discover_status = true;\n      timer = setTimeout(() => {\n        finishDiscovery();\n      }, duration);\n    });\n  }\n\n  public _checkInitialized() {\n    if (this.initialized === false) {\n      throw new Error(\"The `init()` method has not been called yet.\");\n      return;\n    }\n    if (this._discover_status === true) {\n      throw new Error(\"The `discover()` or the `startScan()` method is in progress.\");\n      return;\n    }\n  }\n\n  public _discoveredDevice(peripheral: bleRemotePeripheral, name_filter: any, id_filter: any) {\n    if (!peripheral.localName) {\n      return null;\n    }\n    // if (!peripheral.id) {\n    //   return null;\n    // }\n    if (name_filter && peripheral.localName.indexOf(name_filter) !== 0) {\n      return null;\n    }\n    // if (id_filter && peripheral.id.indexOf(id_filter) !== 0) {\n    //   return null;\n    // }\n    const addr = peripheral.address;\n    if (this._peripherals[addr]) {\n      return null;\n    }\n    const device = new LinkingDevice(peripheral);\n    if (this.ondiscover && typeof this.ondiscover === \"function\") {\n      this.ondiscover(device);\n    }\n    this._peripherals[addr] = device;\n    return device;\n  }\n\n  public _scanDevices() {\n    this.obniz.ble!.scan.onfinish = () => {\n      // console.log(\"scan timeout!\")\n      this._discover_status = false;\n    };\n    // var target = {\n    //   uuids: this.PRIMARY_SERVICE_UUID_LIST\n    // };\n    this.obniz.ble!.scan.start();\n    this._discover_status = true;\n  }\n\n  public stopScan() {\n    if (this._discover_status === true) {\n      this._discover_status = false;\n      if (this._discover_timer !== null) {\n        clearTimeout(this._discover_timer);\n        this._discover_timer = null;\n      }\n      this.obniz.ble!.scan.end();\n    }\n  }\n\n  public startScan(p: any) {\n    this._checkInitialized();\n    let name_filter = \"\";\n    let id_filter = \"\";\n    if (p && typeof p === \"object\") {\n      if (\"nameFilter\" in p && typeof (p.nameFilter === \"string\")) {\n        name_filter = p.nameFilter;\n      }\n      if (\"idFilter\" in p && typeof (p.idFilter === \"string\")) {\n        id_filter = p.idFilter;\n      }\n    }\n\n    this.obniz.ble!.scan.onfind = (peripheral: bleRemotePeripheral) => {\n      if (!peripheral.localName) {\n        return;\n      }\n      if (name_filter && peripheral.localName.indexOf(name_filter) !== 0) {\n        return;\n      }\n      // TODO\n      // if (id_filter && peripheral.id.indexOf(id_filter) !== 0) {\n      //   return;\n      // }\n      if (typeof this.onadvertisement === \"function\") {\n        const parsed = LinkingAdvertising.parse(peripheral);\n        if (parsed) {\n          this.onadvertisement(parsed);\n        }\n      }\n    };\n\n    this._scanDevices();\n  }\n}\n"]}