{"version":3,"sources":["../src/parts/Ble/HEM_6233T/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,MAAM,uCAAuC,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEpE,MAAM,WAAW,gBAAgB;CAAG;AAEpC,oBAAY,yBAAyB,GACjC,uBAAuB,GACvB,kBAAkB,GAClB,yBAAyB,GACzB,yBAAyB,GACzB,8BAA8B,CAAC;AAEnC,MAAM,WAAW,eAAe;IAC9B,aAAa,CAAC,EAAE;QACd,QAAQ,EAAE,MAAM,CAAC;QACjB,SAAS,EAAE,MAAM,CAAC;QAClB,oBAAoB,EAAE,MAAM,CAAC;QAC7B,IAAI,EAAE,MAAM,CAAC;KACd,CAAC;IACF,IAAI,CAAC,EAAE;QACL,IAAI,EAAE,MAAM,CAAC;QACb,KAAK,EAAE,MAAM,CAAC;QACd,GAAG,EAAE,MAAM,CAAC;QACZ,IAAI,EAAE,MAAM,CAAC;QACb,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;IACF,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,iBAAiB,CAAC,EAAE,yBAAyB,EAAE,CAAC;CACjD;AAED,MAAM,CAAC,OAAO,OAAO,SAAU,YAAW,sBAAsB;WAChD,IAAI,IAAI,cAAc;WAMtB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;IAO/C,IAAI,EAAE,MAAM,EAAE,CAAM;IACpB,YAAY,EAAE,MAAM,EAAE,CAAM;IAC5B,MAAM,EAAE,GAAG,CAAC;IACZ,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAQ;IACtD,OAAO,CAAC,qBAAqB,CAAS;gBAE1B,UAAU,EAAE,mBAAmB,GAAG,IAAI,EAAE,oBAAoB,EAAE,MAAM;IAQnE,WAAW,CAAC,WAAW,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC;IA6C7D,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,GAAG;IAY3D,kBAAkB,CAAC,gBAAgB,EAAE,MAAM;IAqBxD,OAAO,CAAC,YAAY;IAUpB,OAAO,CAAC,aAAa;IAUrB,OAAO,CAAC,YAAY;CA4DrB","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.HEM_6233T\n */\n\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface from \"../../../obniz/ObnizPartsBleInterface\";\nimport { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface HEM_6233TOptions {}\n\nexport type HEM_6233TMesurementStatus =\n  | \"BodyMovementDetection\"\n  | \"CuffFitDetection\"\n  | \"IrregularPulseDetection\"\n  | \"PulseRateRangeDetection\"\n  | \"MeasurementPositionDetection\";\n\nexport interface HEM_6233TResult {\n  bloodPressure?: {\n    systolic: number;\n    diastolic: number;\n    meanArterialPressure: number;\n    unit: \"mmHg\";\n  };\n  date?: {\n    year: number;\n    month: number;\n    day: number;\n    hour: number;\n    minute: number;\n    second: number;\n  };\n  pulseRate?: number;\n  userId?: number;\n  measurementStatus?: HEM_6233TMesurementStatus[];\n}\n\nexport default class HEM_6233T implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"HEM_6233T\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    if (peripheral.localName && peripheral.localName.startsWith(\"BLESmart_\")) {\n      return true;\n    }\n    return false;\n  }\n\n  public keys: string[] = [];\n  public requiredKeys: string[] = [];\n  public params: any;\n  public _peripheral: BleRemotePeripheral | null = null;\n  private _timezoneOffsetMinute: number;\n\n  constructor(peripheral: BleRemotePeripheral | null, timezoneOffsetMinute: number) {\n    // if (peripheral && !HEM_6233T.isDevice(peripheral)) {\n    //   throw new Error(\"peripheral is not HEM_6233T\");\n    // }\n    this._peripheral = peripheral;\n    this._timezoneOffsetMinute = timezoneOffsetMinute;\n  }\n\n  public async getDataWait(pairingKeys?: string): Promise<HEM_6233TResult[]> {\n    if (!this._peripheral) {\n      throw new Error(\"HEM_6233T is not find.\");\n    }\n    await this._peripheral.connectWait({\n      autoDiscovery: true,\n      pairingOption: {\n        keys: pairingKeys,\n      },\n    });\n\n    const results: any[] = [];\n    return await new Promise(async (resolve, reject) => {\n      this._peripheral!.ondisconnect = (reason: any) => {\n        resolve(results);\n      };\n      await this.subscribeWait(\"1805\", \"2A2B\"); // current time\n      await this.subscribeWait(\"180F\", \"2A19\", async () => {\n        // send command (unknown meaning)\n        this._peripheral!.obnizBle.hci.write([\n          0x02,\n          0x00,\n          0x00,\n          0x09,\n          0x00,\n          0x05,\n          0x00,\n          0x04,\n          0x00,\n          0x01,\n          0x06,\n          0x01,\n          0x00,\n          0x0a,\n        ]);\n\n        this._writeTimeCharWait(this._timezoneOffsetMinute);\n      }); // battery Level\n      await this.subscribeWait(\"1810\", \"2A35\", async (data: number[]) => {\n        console.error(\"SUCCESS\", data);\n        results.push(this._analyzeData(data));\n      }); // blood pressure\n    });\n  }\n\n  public async subscribeWait(service: string, char: string, callback?: any) {\n    if (!this._peripheral) {\n      throw new Error(\"HEM_6233T is not find.\");\n    }\n    const characteristics = this._peripheral.getService(service)!.getCharacteristic(char)!;\n    await characteristics.registerNotifyWait(async (data) => {\n      if (callback) {\n        callback(data);\n      }\n    });\n  }\n\n  public async _writeTimeCharWait(timeOffsetMinute: number) {\n    if (!this._peripheral) {\n      throw new Error(\"HEM_6233T is not find.\");\n    }\n\n    const timeChar = this._peripheral.getService(\"1805\")!.getCharacteristic(\"2A2B\")!;\n    const date = new Date();\n    date.setTime(Date.now() + 1000 * 60 * timeOffsetMinute);\n\n    const buf = Buffer.alloc(7);\n    buf.writeUInt16LE(date.getUTCFullYear(), 0);\n    buf.writeUInt8(date.getUTCMonth() + 1, 2);\n    buf.writeUInt8(date.getUTCDate(), 3);\n    buf.writeUInt8(date.getUTCHours(), 4);\n    buf.writeUInt8(date.getUTCMinutes(), 5);\n    buf.writeUInt8(date.getUTCSeconds(), 6);\n\n    const arr = Array.from(buf);\n    await timeChar.writeWait(arr);\n  }\n\n  private _readFloatLE(buffer: Buffer, index: number) {\n    const data = buffer.readUInt16LE(index);\n    let mantissa = data & 0x0fff;\n    if ((mantissa & 0x0800) > 0) {\n      mantissa = -1 * (~(mantissa - 0x01) & 0x0fff);\n    }\n    const exponential = data >> 12;\n    return mantissa * Math.pow(10, exponential);\n  }\n\n  private _readSFloatLE(buffer: Buffer, index: number) {\n    const data = buffer.readUInt32LE(index);\n    let mantissa = data & 0x00ffffff;\n    if ((mantissa & 0x00800000) > 0) {\n      mantissa = -1 * (~(mantissa - 0x01) & 0x00ffffff);\n    }\n    const exponential = data >> 24;\n    return mantissa * Math.pow(10, exponential);\n  }\n\n  private _analyzeData(data: number[]): HEM_6233TResult {\n    const buf = Buffer.from(data);\n    const flags = buf.readUInt8(0);\n\n    let index = 1;\n    const result: HEM_6233TResult = {};\n    let scale = 1;\n    if (flags & 0x01) {\n      // kPa\n      scale = 7.501;\n    }\n    result.bloodPressure = {\n      systolic: this._readFloatLE(buf, index) * scale,\n      diastolic: this._readFloatLE(buf, index + 2) * scale,\n      meanArterialPressure: this._readFloatLE(buf, index + 4) * scale,\n      unit: \"mmHg\",\n    };\n    index += 6;\n\n    if (flags & 0x02) {\n      // Time Stamp field present\n      result.date = {\n        year: buf.readUInt16LE(index),\n        month: buf.readUInt8(index + 2),\n        day: buf.readUInt8(index + 3),\n        hour: buf.readUInt8(index + 4),\n        minute: buf.readUInt8(index + 5),\n        second: buf.readUInt8(index + 6),\n      };\n      index += 7;\n    }\n    if (flags & 0x04) {\n      result.pulseRate = buf.readUInt16LE(index);\n      index += 2;\n    }\n\n    if (flags & 0x08) {\n      result.userId = buf.readUInt8(index);\n      index += 1;\n    }\n    if (flags & 0x10) {\n      const statusFlag: { [_: number]: HEM_6233TMesurementStatus } = {\n        0x01: \"BodyMovementDetection\",\n        0x02: \"CuffFitDetection\",\n        0x04: \"IrregularPulseDetection\",\n        0x08: \"PulseRateRangeDetection\",\n        0x10: \"MeasurementPositionDetection\",\n      };\n      const mesurementStatus = buf.readUInt16LE(index);\n      index++;\n      result.measurementStatus = [];\n\n      for (const f in statusFlag) {\n        if (+f & mesurementStatus) {\n          result.measurementStatus.push(statusFlag[f]);\n        }\n      }\n    }\n    return result;\n  }\n}\n"]}