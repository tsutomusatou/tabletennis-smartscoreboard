{"version":3,"sources":["../src/parts/Ble/toio_corecube/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,MAAM,WAAW,oBAAoB;CAAG;AAExC,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,mBAAmB;WACjD,IAAI,IAAI,cAAc;WAMtB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;IAQ/C,UAAU,EAAE,mBAAmB,GAAG,IAAI,CAAQ;IAC9C,mBAAmB,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAQ;IAC7D,oBAAoB,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAQ;IAE9D,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;IAErC,IAAI,EAAE,MAAM,EAAE,CAAM;IACpB,YAAY,EAAE,MAAM,EAAE,CAAM;IAC5B,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC;IAClB,MAAM,EAAE,GAAG,CAAC;IAEnB,OAAO,CAAC,MAAM,CAOZ;IAEF,OAAO,CAAC,OAAO,CAAe;IAC9B,OAAO,CAAC,qBAAqB,CAAwC;IACrE,OAAO,CAAC,qBAAqB,CAAwC;IACrE,OAAO,CAAC,uBAAuB,CAAwC;IACvE,OAAO,CAAC,oBAAoB,CAAwC;IACpE,OAAO,CAAC,sBAAsB,CAAwC;gBAE1D,UAAU,EAAE,mBAAmB,GAAG,IAAI;IAO3C,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;IAEnB,WAAW,CAAC,OAAO,EAAE,MAAM;IA4C3B,cAAc;IAId,eAAe;;;;;;;;IAcf,aAAa;;;;;;IAYb,kBAAkB;IASlB,mBAAmB;IAKnB,cAAc,CAAC,eAAe,GAAE,MAAU,EAAE,gBAAgB,GAAE,MAAU;IAoCxE,gBAAgB,CAC3B,UAAU,GAAE,MAAU,EACtB,QAAQ,GAAE,MAAU,EACpB,aAAa,GAAE,MAAW,EAC1B,cAAc,GAAE,MAAW,EAC3B,UAAU,GAAE,MAAU,EACtB,UAAU,GAAE,MAAU,EACtB,WAAW,GAAE,MAAU;CA+C1B","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Toio_CoreCube\n */\n\nimport Obniz from \"../../../obniz\";\nimport BleRemoteCharacteristic from \"../../../obniz/libs/embeds/bleHci/bleRemoteCharacteristic\";\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface Toio_CoreCubeOptions {}\n\nexport default class Toio_CoreCube implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"toio_CoreCube\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    if (peripheral.localName === \"toio Core Cube\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public peripheral: BleRemotePeripheral | null = null;\n  public functionButtonPress: ((value: number) => void) | null = null;\n  public functionMotionChange: ((value: number) => void) | null = null;\n\n  public ondisconnect?: (reason: any) => void;\n\n  public keys: string[] = [];\n  public requiredKeys: string[] = [];\n  public ioKeys?: string[];\n  public params: any;\n\n  private _uuids = {\n    serviceID: \"10B20100-5B3B-4571-9508-CF3EFCD7BBAE\",\n    characteristicIDMotor: \"10B20102-5B3B-4571-9508-CF3EFCD7BBAE\",\n    characteristicIDPos: \"10B20101-5B3B-4571-9508-CF3EFCD7BBAE\",\n    characteristicIDMotion: \"10B20106-5B3B-4571-9508-CF3EFCD7BBAE\",\n    characteristicIDButton: \"10B20107-5B3B-4571-9508-CF3EFCD7BBAE\",\n    characteristicIDBattery: \"10B20108-5B3B-4571-9508-CF3EFCD7BBAE\",\n  };\n\n  private timeout: number = 100;\n  private _buttonCharacteristic: BleRemoteCharacteristic | null = null;\n  private _motionCharacteristic: BleRemoteCharacteristic | null = null;\n  private _positionCharacteristic: BleRemoteCharacteristic | null = null;\n  private _motorCharacteristic: BleRemoteCharacteristic | null = null;\n  private _batteryCharacteristic: BleRemoteCharacteristic | null = null;\n\n  constructor(peripheral: BleRemotePeripheral | null) {\n    if (peripheral && !Toio_CoreCube.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not RS_Seek3\");\n    }\n    this.peripheral = peripheral;\n  }\n\n  public wired(obniz: Obniz): void {}\n\n  public async connectWait(timeout: number) {\n    if (!this.peripheral) {\n      throw new Error(\"RS_Seek3 is not find.\");\n    }\n    this.peripheral.ondisconnect = (reason: any) => {\n      if (typeof this.ondisconnect === \"function\") {\n        this.ondisconnect(reason);\n      }\n    };\n\n    this.timeout = timeout;\n\n    await this.peripheral.connectWait();\n\n    this._buttonCharacteristic = this.peripheral\n      .getService(this._uuids.serviceID)!\n      .getCharacteristic(this._uuids.characteristicIDButton);\n    this._motorCharacteristic = this.peripheral\n      .getService(this._uuids.serviceID)!\n      .getCharacteristic(this._uuids.characteristicIDMotor);\n    this._motionCharacteristic = this.peripheral\n      .getService(this._uuids.serviceID)!\n      .getCharacteristic(this._uuids.characteristicIDMotion);\n    this._positionCharacteristic = this.peripheral\n      .getService(this._uuids.serviceID)!\n      .getCharacteristic(this._uuids.characteristicIDPos);\n    this._batteryCharacteristic = this.peripheral\n      .getService(this._uuids.serviceID)!\n      .getCharacteristic(this._uuids.characteristicIDBattery);\n\n    if (this._buttonCharacteristic) {\n      if (typeof this.functionButtonPress === \"function\") {\n        this._buttonCharacteristic.registerNotify(this.functionButtonPress);\n      }\n    }\n    if (this._buttonCharacteristic) {\n      if (typeof this.functionMotionChange === \"function\") {\n        this._buttonCharacteristic.registerNotify(this.functionMotionChange);\n      }\n    }\n\n    return 0;\n  }\n\n  public async disconnectWait() {\n    await this.peripheral?.disconnect();\n  }\n\n  public async getPositionWait() {\n    const readData = await this._positionCharacteristic!.readWait();\n\n    return {\n      // NOTE: toioの中心から見たポジション\n      posX: (readData[2] << 8) | readData[1],\n      posY: (readData[4] << 8) | readData[3],\n      angle: (readData[6] << 8) | readData[5],\n      posSensorX: (readData[8] << 8) | readData[7],\n      posSensorY: (readData[10] << 8) | readData[9],\n      posSensorAngle: (readData[12] << 8) | readData[11],\n    };\n  }\n\n  public async getMotionWait() {\n    const readData = await this._motionCharacteristic!.readWait();\n\n    return {\n      // NOTE: toioの中心から見たポジション\n      isHorizon: readData[1] === 1,\n      isCollision: readData[2] === 1,\n      isDoubletap: readData[3] === 1,\n      atitude: readData[4],\n    };\n  }\n\n  public async getButtonStateWait() {\n    const readData = await this._buttonCharacteristic!.readWait();\n    if (readData[1] === 0x80) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public async getBatteryStateWait() {\n    const readData = await this._batteryCharacteristic!.readWait();\n    return readData[0];\n  }\n\n  public async moveAroundWait(_leftWheelPower: number = 0, _rightWheelPower: number = 0) {\n    const constraintWheelPower = (wheelPower: number) => {\n      // NOTE: Power is limited belong 0 to 255. And minus value is backward.\n      if (wheelPower < -255) {\n        wheelPower = -255;\n      } else if (wheelPower > 255) {\n        wheelPower = 255;\n      }\n      return wheelPower;\n    };\n\n    const numWheelDirection = (wheelPower: number) => {\n      // NOTE: 1 is forward. and 2 is backward.\n      if (wheelPower >= 0) {\n        return 1;\n      } else if (wheelPower < 0) {\n        return 2;\n      }\n    };\n\n    const leftWheelPower: number = constraintWheelPower(_leftWheelPower);\n    const rightWheelPower: number = constraintWheelPower(_rightWheelPower);\n    const leftWheelDirection = numWheelDirection(leftWheelPower);\n    const rightWheelDirection = numWheelDirection(rightWheelPower);\n\n    await this._motorCharacteristic!.writeWait([\n      1,\n      1,\n      leftWheelDirection,\n      Math.abs(leftWheelPower),\n      2,\n      rightWheelDirection,\n      Math.abs(rightWheelPower),\n    ]);\n  }\n\n  public async movePositionWait(\n    timeoutSec: number = 5,\n    moveType: number = 0,\n    maxWheelPower: number = 30,\n    wheelPowerType: number = 30,\n    targetPosX: number = 0,\n    targetPosY: number = 0,\n    targetAngle: number = 0,\n  ) {\n    const parceNumber = (pos: number) => {\n      // NOTE: Pos is must hove belong 0 to 65535.\n      if (pos > 65535) {\n        pos = 65535;\n      } else if (pos < 0) {\n        pos = 0;\n      }\n\n      const buffer = new ArrayBuffer(2);\n      const dv = new DataView(buffer);\n      dv.setUint16(0, pos);\n\n      interface ValTrans {\n        value1: number;\n        value2: number;\n      }\n\n      const obj: ValTrans = {\n        value1: dv.getUint8(0),\n        value2: dv.getUint8(1),\n      };\n\n      return obj;\n    };\n\n    const posXObj = parceNumber(targetPosX);\n    const posYObj = parceNumber(targetPosY);\n    const targetAngleObj = parceNumber(targetAngle);\n\n    await this._motorCharacteristic!.writeWait([\n      0x03,\n      0x00,\n      timeoutSec,\n      moveType,\n      maxWheelPower,\n      wheelPowerType,\n      0x00,\n      posXObj.value2,\n      posXObj.value1,\n      posYObj.value2,\n      posYObj.value1,\n      targetAngleObj.value2,\n      targetAngleObj.value1,\n    ]);\n  }\n}\n"]}