{"version":3,"sources":["../src/parts/Ble/scbtgaaac/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,EAAE,EAAE,iBAAiB,EAAE,MAAM,uCAAuC,CAAC;AAElG,MAAM,WAAW,gBAAgB;CAAG;AAEpC,MAAM,CAAC,OAAO,OAAO,SAAU,YAAW,sBAAsB;WAChD,IAAI,IAAI,iBAAiB;WAMzB,QAAQ,CAAC,UAAU,EAAE,mBAAmB,GAAG,OAAO;WAIlD,OAAO,CAAC,UAAU,EAAE,mBAAmB,GAAG,MAAM,GAAG,IAAI;IAuBrE,OAAO,CAAC,MAAM,CAAC,aAAa;IAWrB,WAAW,EAAE,IAAI,GAAG,mBAAmB,CAAQ;;CAGvD","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.SCBTGAAAC\n */\n\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface, { ObnizPartsBleInfo } from \"../../../obniz/ObnizPartsBleInterface\";\n\nexport interface SCBTGAAACOptions {}\n\nexport default class SCBTGAAAC implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsBleInfo {\n    return {\n      name: \"SCBTGAAAC\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral): boolean {\n    return SCBTGAAAC.getData(peripheral) !== null;\n  }\n\n  public static getData(peripheral: BleRemotePeripheral): string | null {\n    const data: any = SCBTGAAAC.searchTypeVal(peripheral.advertise_data_rows, 0xff);\n    if (!data || data[0] !== 0x31 || data[1] !== 0x07 || data[2] !== 0x02 || data[3] !== 0x15 || data.length !== 25) {\n      return null;\n    }\n    const uuidData: any = data.slice(4, 20);\n    let uuid: any = \"\";\n    for (let i = 0; i < uuidData.length; i++) {\n      uuid = uuid + (\"00\" + uuidData[i].toString(16)).slice(-2);\n      if (i === 4 - 1 || i === 4 + 2 - 1 || i === 4 + 2 * 2 - 1 || i === 4 + 2 * 3 - 1) {\n        uuid += \"-\";\n      }\n    }\n\n    const major: any = (data[20] << 8) + data[21];\n    const minor: any = (data[22] << 8) + data[23];\n    const power: any = data[24];\n    if (uuid === \"5d490d6c-7eb9-474e-8160-45bde999119a\" && major === 3) {\n      return `03-${minor}`;\n    }\n    return null;\n  }\n\n  private static searchTypeVal(advertise_data_rows: any, type: number) {\n    for (let i = 0; i < advertise_data_rows.length; i++) {\n      if (advertise_data_rows[i][0] === type) {\n        const results: any = [].concat(advertise_data_rows[i]);\n        results.shift();\n        return results;\n      }\n    }\n    return undefined;\n  }\n\n  public _peripheral: null | BleRemotePeripheral = null;\n\n  constructor() {}\n}\n"]}