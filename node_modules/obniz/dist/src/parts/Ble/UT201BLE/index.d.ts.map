{"version":3,"sources":["../src/parts/Ble/UT201BLE/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAGH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,EAAE,EAAE,iBAAiB,EAAE,MAAM,uCAAuC,CAAC;AAClG,OAAO,iBAAiB,MAAM,qCAAqC,CAAC;AACpE,OAAO,gBAAgB,MAAM,oCAAoC,CAAC;AAElE,MAAM,WAAW,eAAe;CAAG;AAEnC,MAAM,WAAW,cAAc;IAC7B,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,IAAI,CAAC,EAAE;QACL,IAAI,EAAE,MAAM,CAAC;QACb,KAAK,EAAE,MAAM,CAAC;QACd,GAAG,EAAE,MAAM,CAAC;QACZ,IAAI,EAAE,MAAM,CAAC;QACb,MAAM,EAAE,MAAM,CAAC;QACf,MAAM,EAAE,MAAM,CAAC;KAChB,CAAC;IACF,eAAe,CAAC,EAAE,MAAM,CAAC;CAC1B;AAED,MAAM,CAAC,OAAO,OAAO,QAAS,YAAW,sBAAsB;WAC/C,IAAI,IAAI,iBAAiB;WAMzB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;IAI/C,QAAQ,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,KAAK,IAAI,CAAC;IACjC,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAC;IACxC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;IACrC,aAAa,CAAC,EAAE,gBAAgB,CAAC;IACjC,cAAc,CAAC,EAAE,iBAAiB,CAAC;IAC1C,OAAO,CAAC,qBAAqB,CAAS;gBAE1B,UAAU,EAAE,mBAAmB,GAAG,IAAI,EAAE,oBAAoB,EAAE,MAAM;IAQnE,WAAW,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IA0BrC,WAAW,CAAC,WAAW,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,cAAc,EAAE,CAAC;IAgCzE,OAAO,CAAC,YAAY;IAUpB,OAAO,CAAC,YAAY;IAgDpB,OAAO,CAAC,SAAS;YAoBH,cAAc;CAe7B","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.UT201BLE\n */\n\nimport BleRemoteCharacteristic from \"../../../obniz/libs/embeds/bleHci/bleRemoteCharacteristic\";\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface, { ObnizPartsBleInfo } from \"../../../obniz/ObnizPartsBleInterface\";\nimport BleBatteryService from \"../abstract/services/batteryService\";\nimport BleGenericAccess from \"../abstract/services/genericAccess\";\n\nexport interface UT201BLEOptions {}\n\nexport interface UT201BLEResult {\n  fahrenheit?: number;\n  celsius?: number;\n  date?: {\n    year: number;\n    month: number;\n    day: number;\n    hour: number;\n    minute: number;\n    second: number;\n  };\n  temperatureType?: string;\n}\n\nexport default class UT201BLE implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsBleInfo {\n    return {\n      name: \"UT201BLE\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    return peripheral.localName && peripheral.localName.startsWith(\"A&D_UT201BLE_\");\n  }\n\n  public onNotify?: (co2: number) => void;\n  public _peripheral: BleRemotePeripheral | null;\n  public ondisconnect?: (reason: any) => void;\n  public genericAccess?: BleGenericAccess;\n  public batteryService?: BleBatteryService;\n  private _timezoneOffsetMinute: number;\n\n  constructor(peripheral: BleRemotePeripheral | null, timezoneOffsetMinute: number) {\n    if (!peripheral || !UT201BLE.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not UT201BLE\");\n    }\n    this._peripheral = peripheral;\n    this._timezoneOffsetMinute = timezoneOffsetMinute;\n  }\n\n  public async pairingWait(): Promise<string | null> {\n    if (!this._peripheral) {\n      throw new Error(\"UT201BLE not found\");\n    }\n    this._peripheral.ondisconnect = (reason: any) => {\n      if (typeof this.ondisconnect === \"function\") {\n        this.ondisconnect(reason);\n      }\n    };\n    let key: string | null = null;\n    await this._peripheral.connectWait({\n      pairingOption: {\n        onPairedCallback: (pairingKey) => {\n          key = pairingKey;\n        },\n      },\n    });\n\n    const { timeChar, customServiceChar } = this._getChars();\n\n    await this._writeTimeChar(this._timezoneOffsetMinute);\n\n    await customServiceChar.writeWait([2, 1, 3]); // disconnect req\n    return key;\n  }\n\n  public async getDataWait(pairingKeys?: string): Promise<UT201BLEResult[]> {\n    if (!this._peripheral) {\n      throw new Error(\"UT201BLE not found\");\n    }\n\n    await this._peripheral.connectWait({\n      pairingOption: {\n        keys: pairingKeys,\n      },\n    });\n\n    return await new Promise(async (resolve, reject) => {\n      if (!this._peripheral) {\n        throw new Error(\"UT201BLE not found\");\n      }\n      const results: UT201BLEResult[] = [];\n      const { temperatureMeasurementChar, timeChar, customServiceChar } = this._getChars();\n\n      await customServiceChar.writeWait([2, 0, 0xe1]); // send all data\n\n      await this._writeTimeChar(this._timezoneOffsetMinute);\n\n      temperatureMeasurementChar.registerNotifyWait((data: number[]) => {\n        results.push(this._analyzeData(data));\n      });\n\n      this._peripheral.ondisconnect = (reason: any) => {\n        resolve(results);\n      };\n    });\n  }\n\n  private _readFloatLE(buffer: Buffer, index: number) {\n    const data = buffer.readUInt32LE(index);\n    let mantissa = data & 0x00ffffff;\n    if ((mantissa & 0x00800000) > 0) {\n      mantissa = -1 * (~(mantissa - 0x01) & 0x00ffffff);\n    }\n    const exponential = data >> 24;\n    return mantissa * Math.pow(10, exponential);\n  }\n\n  private _analyzeData(data: number[]): UT201BLEResult {\n    const buf = Buffer.from(data);\n    const flags = buf.readUInt8(0);\n\n    let index = 1;\n    const result: UT201BLEResult = {};\n    if (flags & 0x01) {\n      // Fahrenheit\n      result.fahrenheit = this._readFloatLE(buf, index);\n      index += 4;\n    } else {\n      // Celsius\n      result.celsius = this._readFloatLE(buf, index);\n      index += 4;\n    }\n    if (flags & 0x02) {\n      // Time Stamp field present\n      result.date = {\n        year: buf.readUInt16LE(index),\n        month: buf.readUInt8(index + 2),\n        day: buf.readUInt8(index + 3),\n        hour: buf.readUInt8(index + 4),\n        minute: buf.readUInt8(index + 5),\n        second: buf.readUInt8(index + 6),\n      };\n      index += 7;\n    }\n    if (flags & 0x04) {\n      const types = [\n        \"unknown\",\n        \"Armpit\",\n        \"Body\",\n        \"Ear\",\n        \"Finger\",\n        \"Gastro-intestinal Tract\",\n        \"Mouth\",\n        \"Rectum\",\n        \"Toe\",\n        \"Tympanum\",\n      ];\n      const value = buf.readUInt8(index);\n      index++;\n      result.temperatureType = types[value] || \"unknown\";\n    }\n\n    return result;\n  }\n\n  private _getChars() {\n    if (!this._peripheral) {\n      throw new Error(\"UT201BLE not found\");\n    }\n\n    const temperatureMeasurementChar: BleRemoteCharacteristic = this._peripheral\n      .getService(\"1809\")!\n      .getCharacteristic(\"2A1C\")!;\n    const timeChar = this._peripheral.getService(\"1809\")!.getCharacteristic(\"2A08\")!;\n    const customServiceChar = this._peripheral\n      .getService(\"233bf0005a341b6d975c000d5690abe4\")!\n      .getCharacteristic(\"233bf0015a341b6d975c000d5690abe4\")!;\n\n    return {\n      temperatureMeasurementChar,\n      timeChar,\n      customServiceChar,\n    };\n  }\n\n  private async _writeTimeChar(timeOffsetMinute: number) {\n    const { timeChar } = this._getChars();\n\n    const date = new Date();\n    date.setTime(Date.now() + 1000 * 60 * timeOffsetMinute);\n    const buf = Buffer.alloc(7);\n    buf.writeUInt16LE(date.getUTCFullYear(), 0);\n    buf.writeUInt8(date.getUTCMonth() + 1, 2);\n    buf.writeUInt8(date.getUTCDate(), 3);\n    buf.writeUInt8(date.getUTCHours(), 4);\n    buf.writeUInt8(date.getUTCMinutes(), 5);\n    buf.writeUInt8(date.getUTCSeconds(), 6);\n    const arr = Array.from(buf);\n    await timeChar.writeWait(arr);\n  }\n}\n"]}