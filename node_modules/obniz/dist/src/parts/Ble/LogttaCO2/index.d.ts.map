{"version":3,"sources":["../src/parts/Ble/LogttaCO2/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,EAAE,EAAE,iBAAiB,EAAE,MAAM,uCAAuC,CAAC;AAClG,OAAO,iBAAiB,MAAM,qCAAqC,CAAC;AACpE,OAAO,gBAAgB,MAAM,oCAAoC,CAAC;AAClE,MAAM,WAAW,iBAAiB;CAAG;AAErC,MAAM,WAAW,mBAAmB;IAClC,GAAG,EAAE,MAAM,CAAC;IACZ,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;CACjB;AAED,MAAM,CAAC,OAAO,OAAO,UAAW,YAAW,sBAAsB;WACjD,IAAI,IAAI,iBAAiB;WAMzB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;WAIxC,WAAW,CAAC,UAAU,EAAE,mBAAmB;WAW3C,OAAO,CAAC,UAAU,EAAE,mBAAmB,GAAG,mBAAmB,GAAG,IAAI;IAmBlF,OAAO,CAAC,MAAM,CAAC,OAAO;IAWtB,OAAO,CAAC,MAAM,CAAC,QAAQ;IAIhB,QAAQ,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,KAAK,IAAI,CAAC;IACjC,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAC;IACxC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;IACrC,aAAa,CAAC,EAAE,gBAAgB,CAAC;IACjC,cAAc,CAAC,EAAE,iBAAiB,CAAC;gBAE9B,UAAU,EAAE,mBAAmB,GAAG,IAAI;IAOrC,WAAW;IAuBX,cAAc;IAMd,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAUjC,eAAe;IAcf,eAAe,CAAC,IAAI,EAAE,MAAM;IAkB5B,aAAa,CAAC,MAAM,EAAE,OAAO;IAa1C,OAAO,CAAC,WAAW;CAOpB","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Logtta_CO2\n */\n\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface, { ObnizPartsBleInfo } from \"../../../obniz/ObnizPartsBleInterface\";\nimport BleBatteryService from \"../abstract/services/batteryService\";\nimport BleGenericAccess from \"../abstract/services/genericAccess\";\nexport interface Logtta_CO2Options {}\n\nexport interface Logtta_CO2_Adv_Data {\n  co2: number;\n  battery: number;\n  interval: number;\n  address: string;\n}\n\nexport default class Logtta_CO2 implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsBleInfo {\n    return {\n      name: \"Logtta_CO2\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    return peripheral.localName === \"CO2 Sensor\";\n  }\n\n  public static isAdvDevice(peripheral: BleRemotePeripheral) {\n    if (peripheral.adv_data.length !== 31) {\n      return false;\n    }\n    const data = peripheral.adv_data;\n    if (Logtta_CO2.getName(data) !== \"CO2 Sensor\") {\n      return false;\n    }\n    return true;\n  }\n\n  public static getData(peripheral: BleRemotePeripheral): Logtta_CO2_Adv_Data | null {\n    if (peripheral.adv_data.length !== 31) {\n      return null;\n    }\n    const data: number[] = peripheral.adv_data;\n    if (Logtta_CO2.getName(data) !== \"CO2 Sensor\") {\n      return null;\n    }\n    const alert: number = data[15];\n    const interval: number = (data[13] << 8) | data[14];\n    const advData: Logtta_CO2_Adv_Data = {\n      battery: data[12],\n      co2: (data[8] << 8) | data[9],\n      interval,\n      address: peripheral.address,\n    };\n    return advData;\n  }\n\n  private static getName(data: number[]) {\n    let name: string = \"\";\n    for (let i = 16; i < data.length; i++) {\n      if (data[i] === 0) {\n        break;\n      }\n      name += String.fromCharCode(data[i]);\n    }\n    return name;\n  }\n\n  private static get_uuid(uuid: string): string {\n    return `31f3${uuid}-bd1c-46b1-91e4-f57abcf7d449`;\n  }\n\n  public onNotify?: (co2: number) => void;\n  public _peripheral: BleRemotePeripheral | null;\n  public ondisconnect?: (reason: any) => void;\n  public genericAccess?: BleGenericAccess;\n  public batteryService?: BleBatteryService;\n\n  constructor(peripheral: BleRemotePeripheral | null) {\n    if (!peripheral || !Logtta_CO2.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not Logtta CO2\");\n    }\n    this._peripheral = peripheral;\n  }\n\n  public async connectWait() {\n    if (!this._peripheral) {\n      throw new Error(\"Logtta CO2 not found\");\n    }\n    if (!this._peripheral.connected) {\n      this._peripheral.ondisconnect = (reason: any) => {\n        if (typeof this.ondisconnect === \"function\") {\n          this.ondisconnect(reason);\n        }\n      };\n      await this._peripheral.connectWait();\n\n      const service1800 = this._peripheral.getService(\"1800\");\n      if (service1800) {\n        this.genericAccess = new BleGenericAccess(service1800);\n      }\n      const service180F = this._peripheral.getService(\"180F\");\n      if (service180F) {\n        this.batteryService = new BleBatteryService(service180F);\n      }\n    }\n  }\n\n  public async disconnectWait() {\n    if (this._peripheral && this._peripheral.connected) {\n      await this._peripheral.disconnectWait();\n    }\n  }\n\n  public async getWait(): Promise<number | null> {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return null;\n    }\n\n    const c = this._peripheral!.getService(Logtta_CO2.get_uuid(\"AB20\"))!.getCharacteristic(Logtta_CO2.get_uuid(\"AB21\"));\n    const data: number[] = await c!.readWait();\n    return data[0] * 256 + data[1];\n  }\n\n  public async startNotifyWait() {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return;\n    }\n\n    const c = this._peripheral!.getService(Logtta_CO2.get_uuid(\"AB20\"))!.getCharacteristic(Logtta_CO2.get_uuid(\"AB21\"));\n\n    await c!.registerNotifyWait((data: number[]) => {\n      if (this.onNotify) {\n        this.onNotify(data[0] * 256 + data[1]);\n      }\n    });\n  }\n\n  public async authPinCodeWait(code: string) {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return;\n    }\n\n    if (code.length !== 4) {\n      throw new Error(\"Invalid length auth code\");\n    }\n\n    const data: [number] = [0];\n    for (let i = 0; i < code.length; i += 2) {\n      data.push((this.checkNumber(code.charAt(i)) << 4) | this.checkNumber(code.charAt(i + 1)));\n    }\n    const c = this._peripheral!.getService(Logtta_CO2.get_uuid(\"AB20\"))!.getCharacteristic(Logtta_CO2.get_uuid(\"AB30\"));\n    await c!.writeWait(data);\n  }\n\n  // 有効にしたあと、切断するとビーコンが発信される\n  public async setBeaconMode(enable: boolean) {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return;\n    }\n\n    const c = this._peripheral!.getService(Logtta_CO2.get_uuid(\"AB20\"))!.getCharacteristic(Logtta_CO2.get_uuid(\"AB2D\"));\n    if (enable) {\n      await c!.writeWait([1]);\n    } else {\n      await c!.writeWait([0]);\n    }\n  }\n\n  private checkNumber(data: string) {\n    if (data >= \"0\" && data <= \"9\") {\n      return parseInt(data, 10);\n    } else {\n      throw new Error(`authorization code can only be entered from 0-9.input word : ${data}`);\n    }\n  }\n}\n"]}