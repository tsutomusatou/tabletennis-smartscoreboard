{"version":3,"sources":["../src/parts/Ble/LogttaTemp/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,EAAE,EAAE,iBAAiB,EAAE,MAAM,uCAAuC,CAAC;AAElG,MAAM,WAAW,gBAAgB;CAAG;AAEpC,MAAM,WAAW,cAAc;IAC7B,WAAW,EAAE,MAAM,CAAC;IACpB,QAAQ,EAAE,MAAM,CAAC;CAClB;AAED,MAAM,WAAW,kBAAkB;IACjC,WAAW,EAAE,MAAM,CAAC;IACpB,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;CACjB;AAED,MAAM,CAAC,OAAO,OAAO,SAAU,YAAW,sBAAsB;WAChD,IAAI,IAAI,iBAAiB;WAMzB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;WAIxC,WAAW,CAAC,UAAU,EAAE,mBAAmB;WAW3C,OAAO,CAAC,UAAU,EAAE,mBAAmB,GAAG,kBAAkB,GAAG,IAAI;IAoBjF,OAAO,CAAC,MAAM,CAAC,OAAO;IAWtB,OAAO,CAAC,MAAM,CAAC,QAAQ;IAIhB,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,cAAc,KAAK,IAAI,CAAC;IAC1C,WAAW,EAAE,IAAI,GAAG,mBAAmB,CAAC;IACxC,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;gBAEhC,UAAU,EAAE,mBAAmB,GAAG,IAAI;IAOrC,WAAW;IAcX,cAAc;IAMd,UAAU,IAAI,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;IAa5C,kBAAkB,IAAI,OAAO,CAAC,MAAM,CAAC;IAIrC,eAAe,IAAI,OAAO,CAAC,MAAM,CAAC;IAIlC,eAAe;IAiBf,eAAe,CAAC,IAAI,EAAE,MAAM;IAkB5B,aAAa,CAAC,MAAM,EAAE,OAAO;IAa1C,OAAO,CAAC,WAAW;CAOpB","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.Logtta_TH\n */\n\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface, { ObnizPartsBleInfo } from \"../../../obniz/ObnizPartsBleInterface\";\n\nexport interface Logtta_THOptions {}\n\nexport interface Logtta_TH_Data {\n  temperature: number;\n  humidity: number;\n}\n\nexport interface Logtta_TH_Adv_Data {\n  temperature: number;\n  humidity: number;\n  battery: number;\n  interval: number;\n  address: string;\n}\n\nexport default class Logtta_TH implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsBleInfo {\n    return {\n      name: \"Logtta_TH\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    return peripheral.localName === \"TH Sensor\";\n  }\n\n  public static isAdvDevice(peripheral: BleRemotePeripheral) {\n    if (peripheral.adv_data.length !== 31) {\n      return false;\n    }\n    const data = peripheral.adv_data;\n    if (Logtta_TH.getName(data) !== \"TH Sensor\") {\n      return false;\n    }\n    return true;\n  }\n\n  public static getData(peripheral: BleRemotePeripheral): Logtta_TH_Adv_Data | null {\n    if (peripheral.adv_data.length !== 31) {\n      return null;\n    }\n    const data: number[] = peripheral.adv_data;\n    if (Logtta_TH.getName(data) !== \"TH Sensor\") {\n      return null;\n    }\n    const alert: number = data[15];\n    const interval: number = (data[13] << 8) | data[14];\n    const advData: Logtta_TH_Adv_Data = {\n      battery: data[12],\n      temperature: (((data[8] << 8) | data[9]) / 65536) * 175.72 - 46.85,\n      humidity: (((data[10] << 8) | data[11]) / 65536) * 125 - 6,\n      interval,\n      address: peripheral.address,\n    };\n    return advData;\n  }\n\n  private static getName(data: number[]) {\n    let name: string = \"\";\n    for (let i = 16; i < data.length; i++) {\n      if (data[i] === 0) {\n        break;\n      }\n      name += String.fromCharCode(data[i]);\n    }\n    return name;\n  }\n\n  private static get_uuid(uuid: string): string {\n    return `f7ee${uuid}-276e-4165-aa69-7e3de7fc627e`;\n  }\n\n  public onNotify?: (data: Logtta_TH_Data) => void;\n  public _peripheral: null | BleRemotePeripheral;\n  public ondisconnect?: (reason: any) => void;\n\n  constructor(peripheral: BleRemotePeripheral | null) {\n    if (peripheral && !Logtta_TH.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not logtta TH\");\n    }\n    this._peripheral = peripheral;\n  }\n\n  public async connectWait() {\n    if (!this._peripheral) {\n      throw new Error(\"Logtta TH not found\");\n    }\n    if (!this._peripheral.connected) {\n      this._peripheral.ondisconnect = (reason: any) => {\n        if (typeof this.ondisconnect === \"function\") {\n          this.ondisconnect(reason);\n        }\n      };\n      await this._peripheral.connectWait();\n    }\n  }\n\n  public async disconnectWait() {\n    if (this._peripheral && this._peripheral.connected) {\n      await this._peripheral.disconnectWait();\n    }\n  }\n\n  public async getAllWait(): Promise<Logtta_TH_Data | null> {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return null;\n    }\n\n    const c = this._peripheral!.getService(Logtta_TH.get_uuid(\"AA20\"))!.getCharacteristic(Logtta_TH.get_uuid(\"AA21\"));\n    const data: number[] = await c!.readWait();\n    return {\n      temperature: (((data[0] << 8) | data[1]) / 65536) * 175.72 - 46.85,\n      humidity: (((data[2] << 8) | data[3]) / 65536) * 125 - 6,\n    };\n  }\n\n  public async getTemperatureWait(): Promise<number> {\n    return (await this.getAllWait())!.temperature;\n  }\n\n  public async getHumidityWait(): Promise<number> {\n    return (await this.getAllWait())!.humidity;\n  }\n\n  public async startNotifyWait() {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return;\n    }\n\n    const c = this._peripheral!.getService(Logtta_TH.get_uuid(\"AA20\"))!.getCharacteristic(Logtta_TH.get_uuid(\"AA21\"));\n\n    await c!.registerNotifyWait((data: number[]) => {\n      if (this.onNotify) {\n        this.onNotify({\n          temperature: (((data[0] << 8) | data[1]) / 65536) * 175.72 - 46.85,\n          humidity: (((data[2] << 8) | data[3]) / 65536) * 125 - 6,\n        });\n      }\n    });\n  }\n\n  public async authPinCodeWait(code: string) {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return;\n    }\n\n    if (code.length !== 4) {\n      throw new Error(\"Invalid length auth code\");\n    }\n\n    const data: [number] = [0];\n    for (let i = 0; i < code.length; i += 2) {\n      data.push((this.checkNumber(code.charAt(i)) << 4) | this.checkNumber(code.charAt(i + 1)));\n    }\n    const c = this._peripheral!.getService(Logtta_TH.get_uuid(\"AA20\"))!.getCharacteristic(Logtta_TH.get_uuid(\"AA30\"));\n    await c!.writeWait(data);\n  }\n\n  // 有効にしたあと、切断するとビーコンが発信される\n  public async setBeaconMode(enable: boolean) {\n    if (!(this._peripheral && this._peripheral.connected)) {\n      return;\n    }\n\n    const c = this._peripheral!.getService(Logtta_TH.get_uuid(\"AA20\"))!.getCharacteristic(Logtta_TH.get_uuid(\"AA2D\"));\n    if (enable) {\n      await c!.writeWait([1]);\n    } else {\n      await c!.writeWait([0]);\n    }\n  }\n\n  private checkNumber(data: string) {\n    if (data >= \"0\" && data <= \"9\") {\n      return parseInt(data, 10);\n    } else {\n      throw new Error(`authorization code can only be entered from 0-9.input word : ${data}`);\n    }\n  }\n}\n"]}