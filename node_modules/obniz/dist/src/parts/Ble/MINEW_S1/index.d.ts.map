{"version":3,"sources":["../src/parts/Ble/MINEW_S1/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AAExF,OAAO,sBAAsB,MAAM,uCAAuC,CAAC;AAG3E,MAAM,WAAW,eAAe;IAC9B,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;IACtB,YAAY,EAAE,MAAM,CAAC;IACrB,WAAW,EAAE,MAAM,CAAC;IACpB,QAAQ,EAAE,MAAM,CAAC;IACjB,UAAU,EAAE,MAAM,CAAC;CACpB;AAED,MAAM,WAAW,iBAAiB;IAChC,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;IACtB,YAAY,EAAE,MAAM,CAAC;IACrB,UAAU,EAAE,MAAM,CAAC;IACnB,IAAI,EAAE,MAAM,CAAC;CACd;AAED,MAAM,WAAW,eAAe;CAAG;AAEnC,MAAM,CAAC,OAAO,OAAO,QAAS,YAAW,sBAAsB;WAC/C,IAAI;;;WAIJ,QAAQ,CAAC,UAAU,EAAE,mBAAmB,EAAE,UAAU,GAAE,MAAM,GAAG,IAAW,GAAG,OAAO;WAcpF,WAAW,CAAC,UAAU,EAAE,mBAAmB,GAAG,IAAI,GAAG,iBAAiB;WAiCtE,SAAS,CAAC,UAAU,EAAE,mBAAmB,GAAG,IAAI,GAAG,eAAe;IAuChF,OAAO,CAAC,MAAM,CAAC,UAAU;IA4BlB,WAAW,EAAE,IAAI,GAAG,mBAAmB,CAAQ;IAG/C,IAAI,EAAE,MAAM,EAAE,CAAM;IACpB,YAAY,EAAE,MAAM,EAAE,CAAM;IAC5B,MAAM,EAAE,GAAG,CAAM;IAEjB,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;CACjC","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.MINEW_S1_HT\n */\n\nimport Obniz from \"../../../obniz\";\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizUtil from \"../../../obniz/libs/utils/util\";\nimport ObnizPartsBleInterface from \"../../../obniz/ObnizPartsBleInterface\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface MINEW_S1_HTData {\n  frameType: number;\n  versionNumber: number;\n  batteryLevel: number;\n  temperature: number;\n  humidity: number;\n  macAddress: string;\n}\n\nexport interface MINEW_S1_InfoData {\n  frameType: number;\n  versionNumber: number;\n  batteryLevel: number;\n  macAddress: string;\n  name: string;\n}\n\nexport interface MINEW_S1Options {}\n\nexport default class MINEW_S1 implements ObnizPartsBleInterface {\n  public static info() {\n    return { name: \"MINEW_S1\" };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral, macAddress: string | null = null): boolean {\n    if (!this._hasPrefix(peripheral)) {\n      return false;\n    }\n    if (macAddress) {\n      const data = this.getInfoData(peripheral) || this.getHTData(peripheral);\n      if (data && data.macAddress === macAddress) {\n        return true;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  public static getInfoData(peripheral: BleRemotePeripheral): null | MINEW_S1_InfoData {\n    if (!this._hasPrefix(peripheral)) {\n      return null;\n    }\n    if (!peripheral.adv_data || peripheral.adv_data.length < 20) {\n      return null;\n    }\n    const frameType = peripheral.adv_data[11];\n    const versionNumber = peripheral.adv_data[12];\n    if (frameType !== 0xa1 || versionNumber !== 0x08) {\n      return null;\n    }\n\n    const batteryLevel = peripheral.adv_data[13];\n    const macAddress = peripheral.adv_data\n      .slice(14, 20)\n      .map((e: number) => (\"0\" + e.toString(16)).slice(-2))\n      .join(\"\")\n      .match(/.{1,2}/g)!\n      .reverse()\n      .join(\"\");\n\n    const name = ObnizUtil.dataArray2string(peripheral.adv_data.slice(20)) as string;\n\n    return {\n      frameType,\n      versionNumber,\n      batteryLevel,\n      name,\n      macAddress,\n    };\n  }\n\n  public static getHTData(peripheral: BleRemotePeripheral): null | MINEW_S1_HTData {\n    if (!this._hasPrefix(peripheral)) {\n      return null;\n    }\n    if (!peripheral.adv_data || peripheral.adv_data.length !== 24) {\n      return null;\n    }\n    const frameType = peripheral.adv_data[11];\n    const versionNumber = peripheral.adv_data[12];\n    if (frameType !== 0xa1 || versionNumber !== 0x01) {\n      return null;\n    }\n\n    const batteryLevel = peripheral.adv_data[13];\n    const temperatureH = peripheral.adv_data[14];\n    const temperatureL = peripheral.adv_data[15];\n    const temperature = temperatureH + (temperatureL * 1) / (1 << 8);\n    const humidityH = peripheral.adv_data[16];\n    const humidityL = peripheral.adv_data[17];\n    const humidity = humidityH + (humidityL * 1) / (1 << 8);\n\n    const macAddress = peripheral.adv_data\n      .splice(18)\n      .map((e: number) => (\"0\" + e.toString(16)).slice(-2))\n      .join(\"\")\n      .match(/.{1,2}/g)!\n      .reverse()\n      .join(\"\");\n\n    return {\n      frameType,\n      versionNumber,\n      batteryLevel,\n      temperature,\n      humidity,\n      macAddress,\n    };\n  }\n\n  private static _hasPrefix(peripheral: BleRemotePeripheral): boolean {\n    if (!peripheral.adv_data || peripheral.adv_data.length < 10) {\n      return false;\n    }\n    const target = [\n      // flag\n      0x02,\n      0x01,\n      0x06,\n      // 16bit uuid\n      0x03,\n      0x03,\n      0xe1,\n      0xff,\n      // service data\n      -1,\n      0x16,\n      0xe1,\n      0xff,\n    ];\n    for (const index in target) {\n      if (target[index] >= 0 && target[index] !== peripheral.adv_data[index]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public _peripheral: null | BleRemotePeripheral = null;\n\n  // non-wired device\n  public keys: string[] = [];\n  public requiredKeys: string[] = [];\n  public params: any = {};\n\n  public wired(obniz: Obniz): void {}\n}\n"]}