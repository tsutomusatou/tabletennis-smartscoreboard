{"version":3,"sources":["../src/parts/Ble/2jcie/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,MAAM,uCAAuC,CAAC;AAC3E,OAA4B,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,MAAM,WAAW,kBAAkB;CAAG;AAEtC,MAAM,WAAW,gBAAgB;IAC/B,UAAU,EAAE,MAAM,CAAC;IACnB,WAAW,EAAE,MAAM,CAAC;IACpB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,KAAK,EAAE,MAAM,CAAC;IACd,QAAQ,EAAE,MAAM,CAAC;IACjB,mBAAmB,EAAE,MAAM,CAAC;IAC5B,UAAU,EAAE,MAAM,CAAC;IACnB,gBAAgB,EAAE,MAAM,CAAC;IACzB,sBAAsB,EAAE,MAAM,CAAC;IAC/B,eAAe,EAAE,MAAM,CAAC;CACzB;AAED,MAAM,WAAW,mBAAmB;IAClC,WAAW,EAAE,MAAM,CAAC;IACpB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,KAAK,EAAE,MAAM,CAAC;IACd,QAAQ,EAAE,MAAM,CAAC;IACjB,mBAAmB,EAAE,MAAM,CAAC;IAC5B,UAAU,EAAE,MAAM,CAAC;CACpB;AAED,MAAM,CAAC,OAAO,OAAO,WAAY,YAAW,sBAAsB;WAClD,IAAI,IAAI,cAAc;WAMtB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;IAOtD;;OAEG;WACW,OAAO,CAAC,UAAU,EAAE,mBAAmB,GAAG,mBAAmB,GAAG,IAAI;IAe3E,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAQ;IAC/C,KAAK,EAAG,KAAK,CAAC;IACd,MAAM,EAAE,GAAG,CAAC;IACZ,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;gBAEhC,UAAU,EAAE,mBAAmB,GAAG,IAAI;IAO3C,KAAK,CAAC,KAAK,EAAE,KAAK;IAIZ,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC;IAW9B,UAAU,CAAC,IAAI,EAAE,MAAM,GAAG,MAAM;IAI1B,WAAW;IAiBX,cAAc;IAMpB,sBAAsB,CAAC,IAAI,EAAE,MAAM,EAAE;IAYrC,wBAAwB,CAAC,IAAI,EAAE,MAAM,EAAE;IASjC,aAAa,IAAI,OAAO,CAAC,gBAAgB,CAAC;CAoBxD","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.OMRON_2JCIE\n */\n\nimport Obniz from \"../../../obniz\";\nimport bleRemoteCharacteristic from \"../../../obniz/libs/embeds/bleHci/bleRemoteCharacteristic\";\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface from \"../../../obniz/ObnizPartsBleInterface\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface OMRON_2JCIEOptions {}\n\nexport interface OMRON_2JCIE_Data {\n  row_number: number;\n  temperature: number;\n  relative_humidity: number;\n  light: number;\n  uv_index: number;\n  barometric_pressure: number;\n  soud_noise: number;\n  discomfort_index: number;\n  heatstroke_risk_factor: number;\n  battery_voltage: number;\n}\n\nexport interface OMRON_2JCIE_AdvData {\n  temperature: number;\n  relative_humidity: number;\n  light: number;\n  uv_index: number;\n  barometric_pressure: number;\n  soud_noise: number;\n}\n\nexport default class OMRON_2JCIE implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"2JCIE\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    return (\n      (peripheral.localName && peripheral.localName.indexOf(\"Env\") >= 0) ||\n      (peripheral.localName && peripheral.localName.indexOf(\"IM\") >= 0)\n    );\n  }\n\n  /**\n   * Get a datas from advertisement mode of OMRON 2JCIE\n   */\n  public static getData(peripheral: BleRemotePeripheral): OMRON_2JCIE_AdvData | null {\n    if (peripheral.localName && peripheral.localName.indexOf(\"IM\") >= 0) {\n      const adv_data = peripheral.adv_data;\n      return {\n        temperature: ObnizPartsBleInterface.signed16FromBinary(adv_data[8], adv_data[9]) * 0.01,\n        relative_humidity: ObnizPartsBleInterface.signed16FromBinary(adv_data[10], adv_data[11]) * 0.01,\n        light: ObnizPartsBleInterface.signed16FromBinary(adv_data[12], adv_data[13]) * 1,\n        uv_index: ObnizPartsBleInterface.signed16FromBinary(adv_data[14], adv_data[15]) * 0.01,\n        barometric_pressure: ObnizPartsBleInterface.signed16FromBinary(adv_data[16], adv_data[17]) * 0.1,\n        soud_noise: ObnizPartsBleInterface.signed16FromBinary(adv_data[18], adv_data[18]) * 0.01,\n      };\n    }\n    return null;\n  }\n\n  public _peripheral: BleRemotePeripheral | null = null;\n  public obniz!: Obniz;\n  public params: any;\n  public ondisconnect?: (reason: any) => void;\n\n  constructor(peripheral: BleRemotePeripheral | null) {\n    if (peripheral && !OMRON_2JCIE.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not RS_BTIREX2\");\n    }\n    this._peripheral = peripheral;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n  }\n\n  public async findWait(): Promise<any> {\n    const target: any = {\n      localName: \"Env\",\n    };\n\n    await this.obniz.ble!.initWait();\n    this._peripheral = await this.obniz.ble!.scan.startOneWait(target);\n\n    return this._peripheral;\n  }\n\n  public omron_uuid(uuid: string): string {\n    return `0C4C${uuid}-7700-46F4-AA96D5E974E32A54`;\n  }\n\n  public async connectWait() {\n    if (!this._peripheral) {\n      await this.findWait();\n    }\n    if (!this._peripheral) {\n      throw new Error(\"2JCIE not found\");\n    }\n    if (!this._peripheral.connected) {\n      this._peripheral.ondisconnect = (reason: any) => {\n        if (typeof this.ondisconnect === \"function\") {\n          this.ondisconnect(reason);\n        }\n      };\n      await this._peripheral.connectWait();\n    }\n  }\n\n  public async disconnectWait() {\n    if (this._peripheral && this._peripheral.connected) {\n      await this._peripheral.disconnectWait();\n    }\n  }\n\n  public signedNumberFromBinary(data: number[]) {\n    // little adian\n    let val: number = data[data.length - 1] & 0x7f;\n    for (let i = data.length - 2; i >= 0; i--) {\n      val = val * 256 + data[i];\n    }\n    if ((data[data.length - 1] & 0x80) !== 0) {\n      val = val - Math.pow(2, data.length * 8 - 1);\n    }\n    return val;\n  }\n\n  public unsignedNumberFromBinary(data: number[]) {\n    // little adian\n    let val: number = data[data.length - 1];\n    for (let i = data.length - 2; i >= 0; i--) {\n      val = val * 256 + data[i];\n    }\n    return val;\n  }\n\n  public async getLatestData(): Promise<OMRON_2JCIE_Data> {\n    await this.connectWait();\n\n    const c = this._peripheral!.getService(this.omron_uuid(\"3000\"))!.getCharacteristic(this.omron_uuid(\"3001\"))!;\n    const data: number[] = await c.readWait();\n    const json: any = {\n      row_number: data[0],\n      temperature: this.signedNumberFromBinary(data.slice(1, 3)) * 0.01,\n      relative_humidity: this.signedNumberFromBinary(data.slice(3, 5)) * 0.01,\n      light: this.signedNumberFromBinary(data.slice(5, 7)) * 1,\n      uv_index: this.signedNumberFromBinary(data.slice(7, 9)) * 0.01,\n      barometric_pressure: this.signedNumberFromBinary(data.slice(9, 11)) * 0.1,\n      soud_noise: this.signedNumberFromBinary(data.slice(11, 13)) * 0.01,\n      discomfort_index: this.signedNumberFromBinary(data.slice(13, 15)) * 0.01,\n      heatstroke_risk_factor: this.signedNumberFromBinary(data.slice(15, 17)) * 0.01,\n      battery_voltage: this.unsignedNumberFromBinary(data.slice(17, 19)) * 0.001,\n    };\n\n    return json;\n  }\n}\n"]}