{"version":3,"sources":["../src/parts/Ble/ENERTALK/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AAExF,OAAO,sBAAsB,MAAM,uCAAuC,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEpE,MAAM,WAAW,qBAAqB;CAAG;AAEzC,MAAM,CAAC,OAAO,OAAO,cAAe,YAAW,sBAAsB;WACrD,IAAI,IAAI,cAAc;WAMtB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;IAO/C,IAAI,EAAE,MAAM,EAAE,CAAM;IACpB,YAAY,EAAE,MAAM,EAAE,CAAM;IAC5B,MAAM,EAAE,GAAG,CAAC;IACZ,eAAe,EAAE,CAAC,CAAC,OAAO,EAAE,OAAO,KAAK,IAAI,CAAC,GAAG,IAAI,CAAQ;IAC5D,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAQ;IAC/C,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,KAAK,IAAI,CAAC;IAE5C,OAAO,CAAC,MAAM,CAMZ;IACF,OAAO,CAAC,QAAQ,CAAiC;IACjD,OAAO,CAAC,gBAAgB,CAAwC;IAChE,OAAO,CAAC,aAAa,CAAwC;IAC7D,OAAO,CAAC,gBAAgB,CAAwC;IAChE,OAAO,CAAC,kBAAkB,CAAwC;gBAEtD,UAAU,EAAE,mBAAmB,GAAG,IAAI;IAOrC,WAAW;IAiBX,cAAc;IAId,kBAAkB;IAUlB,eAAe;IAUf,mBAAmB;IAWnB,oBAAoB;;;;;CAalC","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.ENERTALK_TOUCH\n */\n\nimport Obniz from \"../../../obniz\";\nimport BleRemoteCharacteristic from \"../../../obniz/libs/embeds/bleHci/bleRemoteCharacteristic\";\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport BleRemoteService from \"../../../obniz/libs/embeds/bleHci/bleRemoteService\";\nimport ObnizPartsBleInterface from \"../../../obniz/ObnizPartsBleInterface\";\nimport { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface ENERTALK_TOUCHOptions {}\n\nexport default class ENERTALK_TOUCH implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"ENERTALK_TOUCH\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    if (peripheral.localName && peripheral.localName.startsWith(\"ensensor_\")) {\n      return true;\n    }\n    return false;\n  }\n\n  public keys: string[] = [];\n  public requiredKeys: string[] = [];\n  public params: any;\n  public onbuttonpressed: ((pressed: boolean) => void) | null = null;\n  public _peripheral: BleRemotePeripheral | null = null;\n  public ondisconnect?: (reason: any) => void;\n\n  private _uuids = {\n    service: \"3526797e-448b-4bbb-9145-c5083e0e09dc\",\n    temperatureChar: \"2A6E\",\n    humidityChar: \"2A6F\",\n    illuminanceChar: \"74c3fe9d-25b2-4903-8dcd-680e5ef0a6b3\",\n    accelerometerChar: \"71ef0979-0e2c-4a55-8d3c-78083869fae6\",\n  };\n  private _service: BleRemoteService | null = null;\n  private _temperatureChar: BleRemoteCharacteristic | null = null;\n  private _humidityChar: BleRemoteCharacteristic | null = null;\n  private _illuminanceChar: BleRemoteCharacteristic | null = null;\n  private _accelerometerChar: BleRemoteCharacteristic | null = null;\n\n  constructor(peripheral: BleRemotePeripheral | null) {\n    if (peripheral && !ENERTALK_TOUCH.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not RS_BTIREX2\");\n    }\n    this._peripheral = peripheral;\n  }\n\n  public async connectWait() {\n    if (!this._peripheral) {\n      throw new Error(\"RS_BTIREX2 is not find.\");\n    }\n    this._peripheral.ondisconnect = (reason: any) => {\n      if (typeof this.ondisconnect === \"function\") {\n        this.ondisconnect(reason);\n      }\n    };\n    await this._peripheral.connectWait();\n    this._service = this._peripheral.getService(this._uuids.service)!;\n    this._temperatureChar = this._service.getCharacteristic(this._uuids.temperatureChar);\n    this._humidityChar = this._service.getCharacteristic(this._uuids.humidityChar);\n    this._illuminanceChar = this._service.getCharacteristic(this._uuids.illuminanceChar);\n    this._accelerometerChar = this._service.getCharacteristic(this._uuids.accelerometerChar);\n  }\n\n  public async disconnectWait() {\n    await this._peripheral?.disconnectWait();\n  }\n\n  public async getTemperatureWait() {\n    if (!this._temperatureChar) {\n      throw new Error(\"device is not connected\");\n    }\n    const tempData = await this._temperatureChar.readWait();\n    const buf = Buffer.from(tempData);\n    const temp = buf.readInt16BE(0) / 100;\n    return temp;\n  }\n\n  public async getHumidityWait() {\n    if (!this._humidityChar) {\n      throw new Error(\"device is not connected\");\n    }\n\n    const humidityData = await this._humidityChar.readWait();\n    const humidity = humidityData[0];\n    return humidity;\n  }\n\n  public async getIlluminationWait() {\n    if (!this._illuminanceChar) {\n      throw new Error(\"device is not connected\");\n    }\n    const illuminanceData = await this._illuminanceChar.readWait();\n    const buf = Buffer.from(illuminanceData);\n    const illuminance = buf.readInt16BE(0);\n\n    return illuminance;\n  }\n\n  public async getAccelerometerWait() {\n    if (!this._accelerometerChar) {\n      throw new Error(\"device is not connected\");\n    }\n\n    const accelerometerData = await this._accelerometerChar.readWait();\n    const buf = Buffer.from(accelerometerData);\n    const x = buf.readInt16BE(0) / 1000;\n    const y = buf.readInt16BE(2) / 1000;\n    const z = buf.readInt16BE(4) / 1000;\n\n    return { x, y, z };\n  }\n}\n"]}