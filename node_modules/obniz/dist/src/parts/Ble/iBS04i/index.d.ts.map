{"version":3,"sources":["../src/parts/Ble/iBS04i/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,EAAE,EAAE,iBAAiB,EAAE,MAAM,uCAAuC,CAAC;AAElG,MAAM,WAAW,aAAa;CAAG;AAEjC,MAAM,WAAW,WAAW;IAC1B,OAAO,EAAE,MAAM,CAAC;IAChB,MAAM,EAAE,OAAO,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,MAAM,CAAC;IACd,IAAI,EAAE,MAAM,CAAC;IACb,OAAO,EAAE,MAAM,CAAC;CACjB;AAED,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,sBAAsB;WAC7C,IAAI,IAAI,iBAAiB;WAMzB,QAAQ,CAAC,UAAU,EAAE,mBAAmB,GAAG,OAAO;WAIlD,OAAO,CAAC,UAAU,EAAE,mBAAmB,GAAG,WAAW,GAAG,IAAI;IAkB1E,OAAO,CAAC,MAAM,CAAC,SAAS,CAmBtB;IAEF,OAAO,CAAC,MAAM,CAAC,cAAc;IA8BtB,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAQ;;CAGvD","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.iBS04i\n */\n\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface, { ObnizPartsBleInfo } from \"../../../obniz/ObnizPartsBleInterface\";\n\nexport interface IBS04IOptions {}\n\nexport interface IBS04I_Data {\n  battery: number;\n  button: boolean;\n  uuid: string;\n  major: number;\n  minor: number;\n  power: number;\n  rssi: number;\n  address: string;\n}\n\nexport default class IBS04I implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsBleInfo {\n    return {\n      name: \"iBS04i\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral): boolean {\n    return IBS04I.getDeviceArray(peripheral) !== null;\n  }\n\n  public static getData(peripheral: BleRemotePeripheral): IBS04I_Data | null {\n    const adv = IBS04I.getDeviceArray(peripheral);\n    if (adv === null) {\n      return null;\n    }\n    const data: IBS04I_Data = {\n      battery: (adv[5] + adv[6] * 256) * 0.01,\n      button: Boolean(adv[7]),\n      uuid: peripheral.iBeacon!.uuid,\n      major: peripheral.iBeacon!.major,\n      minor: peripheral.iBeacon!.minor,\n      power: peripheral.iBeacon!.power,\n      rssi: peripheral.iBeacon!.rssi,\n      address: peripheral.address,\n    };\n    return data;\n  }\n\n  private static deviceAdv: number[] = [\n    0xff,\n    0x0d, // Manufacturer vendor code\n    0x00, // Manufacturer vendor code\n    0x83, // Magic code\n    0xbc, // Magic code\n    -1, // Battery\n    -1, // Battery\n    -1, // Event\n    0xff, // reserved\n    0xff, // reserved\n    0xff, // reserved\n    0xff, // reserved\n    0x00, // user\n    -1, // user\n    -1, // subType\n    -1, // reserved\n    -1, // reserved\n    -1, // reserved\n  ];\n\n  private static getDeviceArray(peripheral: BleRemotePeripheral): number[] | null {\n    const advertise = peripheral.advertise_data_rows.filter((adv: number[]) => {\n      let find = false;\n      if (this.deviceAdv.length > adv.length) {\n        return find;\n      }\n      for (let index = 0; index < this.deviceAdv.length; index++) {\n        if (this.deviceAdv[index] === -1) {\n          continue;\n        }\n        if (adv[index] === this.deviceAdv[index]) {\n          find = true;\n          continue;\n        }\n        find = false;\n        break;\n      }\n      return find;\n    });\n    if (advertise.length !== 1) {\n      return null;\n    }\n    const type = advertise[0][14];\n    if (type !== 24) {\n      // iBS04i以外\n      return null;\n    }\n    return advertise[0];\n  }\n\n  public _peripheral: BleRemotePeripheral | null = null;\n\n  constructor() {}\n}\n"]}