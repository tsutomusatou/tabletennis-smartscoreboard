{"version":3,"sources":["../src/parts/Ble/iBS03T/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,sBAAsB,EAAE,EAAE,iBAAiB,EAAE,MAAM,uCAAuC,CAAC;AAElG,MAAM,WAAW,aAAa;CAAG;AAEjC,MAAM,WAAW,WAAW;IAC1B,OAAO,EAAE,MAAM,CAAC;IAChB,MAAM,EAAE,OAAO,CAAC;IAChB,MAAM,EAAE,OAAO,CAAC;IAChB,WAAW,EAAE,OAAO,CAAC;IACrB,WAAW,EAAE,MAAM,CAAC;CACrB;AAED,MAAM,CAAC,OAAO,OAAO,MAAO,YAAW,sBAAsB;WAC7C,IAAI,IAAI,iBAAiB;WAMzB,QAAQ,CAAC,UAAU,EAAE,mBAAmB,GAAG,OAAO;WAgBlD,OAAO,CAAC,UAAU,EAAE,mBAAmB,GAAG,WAAW,GAAG,IAAI;IAwB1E,OAAO,CAAC,MAAM,CAAC,SAAS,CAuBtB;IAEK,WAAW,EAAE,mBAAmB,GAAG,IAAI,CAAQ;;CAGvD","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.iBS03T\n */\n\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsBleInterface, { ObnizPartsBleInfo } from \"../../../obniz/ObnizPartsBleInterface\";\n\nexport interface IBS03TOptions {}\n\nexport interface IBS03T_Data {\n  battery: number;\n  button: boolean;\n  moving: boolean;\n  hall_sensor: boolean;\n  temperature: number;\n}\n\nexport default class IBS03T implements ObnizPartsBleInterface {\n  public static info(): ObnizPartsBleInfo {\n    return {\n      name: \"iBS03T\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral): boolean {\n    if (this.deviceAdv.length > peripheral.adv_data.length) {\n      return false;\n    }\n    for (let index = 0; index < this.deviceAdv.length; index++) {\n      if (this.deviceAdv[index] === -1) {\n        continue;\n      }\n      if (peripheral.adv_data[index] === this.deviceAdv[index]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  public static getData(peripheral: BleRemotePeripheral): IBS03T_Data | null {\n    if (!IBS03T.isDevice(peripheral)) {\n      return null;\n    }\n    const data: IBS03T_Data = {\n      battery: (peripheral.adv_data[9] + peripheral.adv_data[10] * 256) * 0.01,\n      button: false,\n      moving: false,\n      hall_sensor: false,\n      temperature: ObnizPartsBleInterface.signed16FromBinary(peripheral.adv_data[13], peripheral.adv_data[12]) * 0.01,\n    };\n\n    if (Boolean(peripheral.adv_data[11] & 0b0001)) {\n      data.button = true;\n    }\n    if (Boolean(peripheral.adv_data[11] & 0b0010)) {\n      data.moving = true;\n    }\n    if (Boolean(peripheral.adv_data[11] & 0b0100)) {\n      data.hall_sensor = true;\n    }\n    return data;\n  }\n\n  private static deviceAdv: number[] = [\n    0x02,\n    0x01,\n    0x06,\n    0x12,\n    0xff,\n    0x0d, // Manufacturer vendor code\n    0x00, // Manufacturer vendor code\n    0x83, // Magic code\n    0xbc, // Magic code\n    -1, // Battery\n    -1, // Battery\n    -1, // Event\n    -1, // reserved\n    -1, // reserved\n    -1, // reserved\n    -1, // reserved\n    -1, // user\n    -1, // user\n    0x15, // subType\n    -1, // reserved\n    -1, // reserved\n    -1, // reserved\n  ];\n\n  public _peripheral: BleRemotePeripheral | null = null;\n\n  constructor() {}\n}\n"]}