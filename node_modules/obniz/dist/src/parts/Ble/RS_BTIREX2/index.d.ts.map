{"version":3,"sources":["../src/parts/Ble/RS_BTIREX2/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AAEnC,OAAO,mBAAmB,MAAM,uDAAuD,CAAC;AACxF,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,MAAM,WAAW,iBAAiB;CAAG;AAGrC,MAAM,CAAC,OAAO,OAAO,UAAW,YAAW,mBAAmB;WAC9C,IAAI,IAAI,cAAc;WAMtB,QAAQ,CAAC,UAAU,EAAE,mBAAmB;IAO/C,IAAI,EAAE,MAAM,EAAE,CAAM;IACpB,YAAY,EAAE,MAAM,EAAE,CAAM;IAC5B,MAAM,EAAE,GAAG,CAAC;IACZ,eAAe,EAAE,CAAC,CAAC,OAAO,EAAE,OAAO,KAAK,IAAI,CAAC,GAAG,IAAI,CAAQ;IAEnE,OAAO,CAAC,MAAM,CAIZ;IACF,OAAO,CAAC,WAAW,CAAoC;IACvD,OAAO,CAAC,iBAAiB,CAAwC;IACjE,OAAO,CAAC,iBAAiB,CAAwC;gBAErD,UAAU,EAAE,mBAAmB,GAAG,IAAI;IAQ3C,KAAK,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;IAEnB,WAAW;IAgBjB,mBAAmB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,GAAG,GAAE,MAAa,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;CAsBrF","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.RS_BTIREX2\n */\n\nimport Obniz from \"../../../obniz\";\nimport BleRemoteCharacteristic from \"../../../obniz/libs/embeds/bleHci/bleRemoteCharacteristic\";\nimport BleRemotePeripheral from \"../../../obniz/libs/embeds/bleHci/bleRemotePeripheral\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface RS_BTIREX2Options {}\n\n// not working\nexport default class RS_BTIREX2 implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"RS_BTIREX2\",\n    };\n  }\n\n  public static isDevice(peripheral: BleRemotePeripheral) {\n    if (peripheral.localName && peripheral.localName.startsWith(\"BTIR\")) {\n      return true;\n    }\n    return false;\n  }\n\n  public keys: string[] = [];\n  public requiredKeys: string[] = [];\n  public params: any;\n  public onbuttonpressed: ((pressed: boolean) => void) | null = null;\n\n  private _uuids = {\n    service: \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\",\n    rxChar: \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\",\n    txChar: \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\",\n  };\n  private _peripheral: BleRemotePeripheral | null = null;\n  private _rxCharacteristic: BleRemoteCharacteristic | null = null;\n  private _txCharacteristic: BleRemoteCharacteristic | null = null;\n\n  constructor(peripheral: BleRemotePeripheral | null) {\n    if (peripheral && !RS_BTIREX2.isDevice(peripheral)) {\n      throw new Error(\"peripheral is not RS_BTIREX2\");\n    }\n    this._peripheral = peripheral;\n  }\n\n  // @ts-ignore\n  public wired(obniz: Obniz): void {}\n\n  public async connectWait() {\n    if (!this._peripheral) {\n      throw new Error(\"RS_BTIREX2 is not find.\");\n    }\n    this._peripheral.ondisconnect = () => {\n      console.log(\"disconnect\");\n    };\n    await this._peripheral.connectWait();\n\n    console.error(\"encrypt start\");\n    // const handle = this._peripheral.obnizBle.centralBindings._handles[this._peripheral.address];\n    // this._peripheral.obnizBle.centralBindings._aclStreams[handle].encrypt();\n    this._rxCharacteristic = this._peripheral.getService(this._uuids.service)!.getCharacteristic(this._uuids.rxChar);\n    this._txCharacteristic = this._peripheral.getService(this._uuids.service)!.getCharacteristic(this._uuids.txChar);\n  }\n\n  public _sendAndReceiveWait(payload: number[], crc: number = 0xb6): Promise<number[]> {\n    if (!this._rxCharacteristic || !this._txCharacteristic) {\n      throw new Error(\"device is not connected\");\n    }\n    const data: number[] = new Array(payload.length + 4);\n    data[0] = 0xaa;\n    data[1] = 0;\n    data[2] = payload.length;\n    for (let index = 0; index < payload.length; index++) {\n      data[3 + index] = payload[index];\n    }\n    data[payload.length + 3] = crc;\n    const tx = this._txCharacteristic;\n    const p: Promise<number[]> = new Promise((resolve) => {\n      tx.registerNotify((resultData: number[]) => {\n        console.error(\"CRC \" + crc);\n        resolve(resultData);\n      });\n    });\n    this._rxCharacteristic.write(data);\n    return p;\n  }\n}\n"]}