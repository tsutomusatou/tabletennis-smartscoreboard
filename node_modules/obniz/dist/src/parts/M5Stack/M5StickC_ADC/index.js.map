{"version":3,"sources":["../src/parts/M5Stack/M5StickC_ADC/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.M5StickC_ADC\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\nimport { I2cPartsAbstractOptions } from \"../../i2cParts\";\n\nexport interface M5StickC_ADCOptions extends I2cPartsAbstractOptions {}\n\nexport default class M5StickC_ADC implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"M5StickC_ADC\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public address: number;\n  public conversionDelay: number;\n  public config_regs: any;\n  public config: any;\n  public os: number;\n  public mode: number;\n  public dataRate: number;\n  public pga: number;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n  private minCode: number;\n\n  constructor() {\n    this.keys = [\"vcc\", \"gnd\", \"sda\", \"scl\", \"i2c\"];\n    this.requiredKeys = [];\n\n    this.address = 0x48;\n    this.conversionDelay = 100;\n    this.config_regs = {\n      OS_MASK: 0x80, // Conversion\n      OS_NOEFFECT: 0x00, // Write: Bit = 0 No effect\n      OS_SINGLE: 0x80, // Write: Bit = 1 Begin a conversion (default)\n      OS_BUSY: 0x00, // Read: Bit = 0 Device is not performing a conversion\n      OS_NOTBUSY: 0x80, // Read: Bit = 1 Device is busy performing a conversion\n\n      MODE_MASK: 0x10, // Device operating mode\n      MODE_CONTIN: 0x00, // Continuous conversion mode (default)\n      MODE_SINGLE: 0x10, // Single-conversion mode\n\n      DR_MASK: 0x0c, // Data rate\n      DR_128SPS: 0x00, // 128 samples per second\n      DR_32SPS: 0x04, // 32 samples per second\n      DR_16SPS: 0x08, // 16 samples per second\n      DR_8SPS: 0x0c, // 8 samples per second (default)\n\n      PGA_MASK: 0x03, // Programmable gain amplifier configuration\n      PGA_1: 0x00, // Gain 1 (default)\n      PGA_2: 0x01, // Gain 2\n      PGA_4: 0x02, // Gain 4\n      PGA_8: 0x03, // Gain 8\n    };\n    this.os = this.config_regs.OS_SINGLE;\n    this.mode = this.config_regs.MODE_CONTIN;\n    this.dataRate = this.config_regs.DR_8SPS;\n    this.pga = this.config_regs.PGA_1;\n    this.minCode = 32768;\n    this.updateConfig();\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    if (!this.obniz.isValidIO(this.params.sda) && !this.obniz.isValidIO(this.params.scl) && !this.params.i2c) {\n      if (this.obniz.hasExtraInterface(\"m5stickc_hat\")) {\n        const hatI2c = this.obniz.getExtraInterface(\"m5stickc_hat\").i2c;\n        this.params.sda = hatI2c.sda;\n        this.params.scl = hatI2c.scl;\n      } else {\n        throw new Error(\"Cannot find m5stickc hat interface. Please set param 'sda'/'scl' or 'i2c'\");\n      }\n    }\n\n    this.obniz.setVccGnd(this.params.vcc, this.params.gnd, \"5v\");\n\n    this.params.mode = \"master\";\n    this.params.clock = 400000;\n    this.params.pull = \"5v\";\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\n    this.obniz.wait(100);\n  }\n\n  public async getVoltageWait() {\n    const raw = await this.getWait();\n    const voltage = ((raw * 3.3) / this.minCode) * 4;\n    return voltage;\n  }\n\n  public setRate(dataRate: number) {\n    switch (dataRate) {\n      case 8:\n        this.dataRate = this.config_regs.DR_8SPS;\n        this.minCode = 32768;\n        break;\n      case 16:\n        this.dataRate = this.config_regs.DR_16SPS;\n        this.minCode = 16384;\n        break;\n      case 32:\n        this.dataRate = this.config_regs.DR_32SPS;\n        this.minCode = 8192;\n        break;\n      case 128:\n        this.dataRate = this.config_regs.DR_128SPS;\n        this.minCode = 2048;\n        break;\n      default:\n        throw new Error(`argument must be selected from 8, 16, 32, 128.`);\n    }\n  }\n\n  public setGain(gain: number) {\n    switch (gain) {\n      case 1:\n        this.pga = this.config_regs.PGA_1;\n        break;\n      case 2:\n        this.pga = this.config_regs.PGA_2;\n        break;\n      case 4:\n        this.pga = this.config_regs.PGA_4;\n        break;\n      case 8:\n        this.pga = this.config_regs.PGA_8;\n        break;\n      default:\n        throw new Error(`argument must be selected from 1, 2, 4, 8.`);\n    }\n  }\n\n  public setMode(mode: string) {\n    switch (mode) {\n      case \"CONTIN\":\n        this.mode = this.config_regs.MODE_CONTIN;\n        break;\n      case \"SINGLE\":\n        this.mode = this.config_regs.MODE_SINGLE;\n        break;\n      default:\n        throw new Error(`argument must be selected from \"CONTIN\" or \"SINGLE\".`);\n    }\n  }\n\n  private async getWait() {\n    this.updateConfig();\n    this.i2c.write(this.address, [this.config]);\n    await this.obniz.wait(this.conversionDelay);\n    const ret = await this.i2c.readWait(this.address, 2);\n    return (ret[0] << 8) | ret[1];\n  }\n\n  private updateConfig() {\n    this.config = 0x00;\n    this.config |= this.os;\n    this.config |= this.mode;\n    this.config |= this.dataRate;\n    this.config |= this.pga;\n  }\n}\n"]}