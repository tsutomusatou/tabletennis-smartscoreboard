{"version":3,"sources":["../src/parts/M5Stack/M5StickC_Yun/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * @packageDocumentation\r\n * @module Parts.M5StickC_Yun\r\n */\r\n\r\nimport Obniz from \"../../../obniz\";\r\nimport PeripheralI2C from \"../../../obniz/libs/io_peripherals/i2c\";\r\nimport ObnizUtil from \"../../../obniz/libs/utils/util\";\r\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\r\nimport { I2cPartsAbstractOptions } from \"../../i2cParts\";\r\nimport BMP280 from \"../../PressureSensor/BMP280\";\r\nimport SHT20 from \"../../TemperatureSensor/i2c/SHT20\";\r\n\r\nexport interface M5StickC_YunOptions extends I2cPartsAbstractOptions {}\r\n\r\nexport default class M5StickC_Yun implements ObnizPartsInterface {\r\n  public static info(): ObnizPartsInfo {\r\n    return {\r\n      name: \"M5StickC_Yun\",\r\n    };\r\n  }\r\n\r\n  private static _generateHsvColor(h: number, s: number, v: number) {\r\n    const C: number = v * s;\r\n    const Hp: number = h / 60;\r\n    const X: number = C * (1 - Math.abs((Hp % 2) - 1));\r\n\r\n    let R: number = 0;\r\n    let G: number = 0;\r\n    let B: number = 0;\r\n    if (0 <= Hp && Hp < 1) {\r\n      [R, G, B] = [C, X, 0];\r\n    }\r\n    if (1 <= Hp && Hp < 2) {\r\n      [R, G, B] = [X, C, 0];\r\n    }\r\n    if (2 <= Hp && Hp < 3) {\r\n      [R, G, B] = [0, C, X];\r\n    }\r\n    if (3 <= Hp && Hp < 4) {\r\n      [R, G, B] = [0, X, C];\r\n    }\r\n    if (4 <= Hp && Hp < 5) {\r\n      [R, G, B] = [X, 0, C];\r\n    }\r\n    if (5 <= Hp && Hp < 6) {\r\n      [R, G, B] = [C, 0, X];\r\n    }\r\n\r\n    const m: number = v - C;\r\n    [R, G, B] = [R + m, G + m, B + m];\r\n\r\n    R = Math.floor(R * 255);\r\n    G = Math.floor(G * 255);\r\n    B = Math.floor(B * 255);\r\n\r\n    return { red: R, green: G, blue: B };\r\n  }\r\n\r\n  public requiredKeys: string[];\r\n  public keys: string[];\r\n  public params: any;\r\n\r\n  public ioKeys: string[];\r\n\r\n  protected obniz!: Obniz;\r\n  protected i2c!: PeripheralI2C;\r\n  protected sht20!: SHT20;\r\n  protected bmp280!: BMP280;\r\n\r\n  private LED_LEN = 14;\r\n\r\n  constructor() {\r\n    this.requiredKeys = [];\r\n    this.keys = [\"sda\", \"scl\", \"i2c\"];\r\n\r\n    this.ioKeys = [\"sda\", \"scl\"];\r\n  }\r\n\r\n  public wired(obniz: Obniz) {\r\n    this.obniz = obniz;\r\n\r\n    if (!this.obniz.isValidIO(this.params.sda) && !this.obniz.isValidIO(this.params.scl) && !this.params.i2c) {\r\n      if (this.obniz.hasExtraInterface(\"m5stickc_hat\")) {\r\n        const hatI2c = this.obniz.getExtraInterface(\"m5stickc_hat\").i2c;\r\n        this.params.sda = hatI2c.sda;\r\n        this.params.scl = hatI2c.scl;\r\n      } else {\r\n        throw new Error(\"Cannot find m5stickc hat interface. Please set param 'sda'/'scl' or 'i2c'\");\r\n      }\r\n    }\r\n\r\n    this.params.clock = 100 * 1000; // for i2c\r\n    this.params.mode = \"master\"; // for i2c\r\n    this.params.pull = \"3v\"; // for i2c\r\n    this.i2c = obniz.getI2CWithConfig(this.params);\r\n    this.sht20 = obniz.wired(\"SHT20\", { i2c: this.i2c });\r\n    this.bmp280 = obniz.wired(\"BMP280\", { i2c: this.i2c });\r\n    this.bmp280.applyCalibration();\r\n  }\r\n\r\n  // public setColorCode(ledNum: number, colorCode: string) {\r\n  //   const hexConvert = (hex: string) => {\r\n  //     if (hex.slice(0, 1) === \"#\") {\r\n  //       hex = hex.slice(1);\r\n  //     }\r\n  //     if (hex.length === 3) {\r\n  //       hex = hex.slice(0, 1) + hex.slice(0, 1) + hex.slice(1, 2) + hex.slice(1, 2) + hex.slice(2, 3) + hex.slice(2, 3);\r\n  //     }\r\n  //\r\n  //     return [hex.slice(0, 2), hex.slice(2, 4), hex.slice(4, 6)].map((str) => {\r\n  //       return parseInt(str, 16);\r\n  //     });\r\n  //   };\r\n  //   const color: number[] = hexConvert(colorCode);\r\n  //   this.rgb(color[0], color[1], color[2]);\r\n  // }\r\n\r\n  public rgb(red: number, green: number, blue: number): void {\r\n    ObnizUtil.assertNumber(0, 255, \"red\", red);\r\n    ObnizUtil.assertNumber(0, 255, \"green\", green);\r\n    ObnizUtil.assertNumber(0, 255, \"blue\", blue);\r\n    const leds: Array<[number, number, number]> = [];\r\n    for (let i = 0; i < this.LED_LEN; i++) {\r\n      leds.push([red, green, blue]);\r\n    }\r\n    this.rgbs(leds);\r\n  }\r\n\r\n  public hsv(hue: number, saturation: number, value: number) {\r\n    ObnizUtil.assertNumber(0, 300, \"hue\", hue);\r\n    ObnizUtil.assertNumber(0, 1, \"saturation\", saturation);\r\n    ObnizUtil.assertNumber(0, 1, \"value\", value);\r\n    const color = M5StickC_Yun._generateHsvColor(hue, saturation, value);\r\n    this.rgb(color.red, color.green, color.blue);\r\n  }\r\n\r\n  public rgbs(array: Array<[number, number, number]>) {\r\n    if (array.length <= this.LED_LEN) {\r\n      array.forEach((value, index) => {\r\n        this.i2c.write(0x38, [0x01, index, Math.floor(value[0]), Math.floor(value[1]), Math.floor(value[2])]);\r\n      });\r\n    }\r\n  }\r\n\r\n  public hsvs(array: Array<[number, number, number]>) {\r\n    const leds: Array<[number, number, number]> = array.map((value, index) => {\r\n      const color = M5StickC_Yun._generateHsvColor(value[0], value[1], value[2]);\r\n      return [color.red, color.green, color.blue];\r\n    });\r\n    this.rgbs(leds);\r\n  }\r\n\r\n  public async getLightWait(): Promise<number> {\r\n    this.i2c.write(0x38, [0x00]);\r\n    const d = await this.i2c.readWait(0x38, 2);\r\n    return (d[1] << 8) | d[0];\r\n  }\r\n\r\n  public async getTempWait(): Promise<number> {\r\n    return await this.sht20.getTempWait();\r\n  }\r\n\r\n  public async getHumidWait(): Promise<number> {\r\n    return await this.sht20.getHumidWait();\r\n  }\r\n\r\n  public async getPressureWait(): Promise<number> {\r\n    return await this.bmp280.getPressureWait();\r\n  }\r\n}\r\n"]}