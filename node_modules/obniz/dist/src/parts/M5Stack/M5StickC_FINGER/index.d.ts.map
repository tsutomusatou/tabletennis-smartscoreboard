{"version":3,"sources":["../src/parts/M5Stack/M5StickC_FINGER/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,KAAK,MAAM,gBAAgB,CAAC;AACnC,OAAO,cAAc,MAAM,yCAAyC,CAAC;AAErE,OAAO,mBAAmB,EAAE,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEzF,MAAM,WAAW,sBAAsB;IACrC,EAAE,EAAE,MAAM,CAAC;IACX,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,CAAC,EAAE,MAAM,CAAC;CACd;AAED,MAAM,CAAC,OAAO,OAAO,eAAgB,YAAW,mBAAmB;WACnD,IAAI,IAAI,cAAc;IAM7B,YAAY,EAAE,MAAM,EAAE,CAAC;IACvB,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,MAAM,EAAE,GAAG,CAAC;IAEZ,GAAG,EAAE,GAAG,CAAC;IACT,GAAG,EAAE,GAAG,CAAC;IACT,IAAI,SAAK;IACT,GAAG,SAAK;IACR,GAAG,SAAK;IACR,IAAI,SAAK;IACT,EAAE,SAAK;IACP,EAAE,SAAK;IACP,EAAE,SAAK;IACP,EAAE,SAAK;IACP,EAAE,SAAK;IACP,EAAE,SAAK;IAEP,KAAK,WAA+B;IACpC,KAAK,WAA+B;IAE3C,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,IAAI,EAAG,cAAc,CAAC;;IAoCzB,KAAK,CAAC,KAAK,EAAE,KAAK;IAqBZ,cAAc;IAcd,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM;IA2BnD,iBAAiB;IAoBjB,SAAS;IAeT,cAAc,CAAC,IAAI,EAAE,MAAM;IAe3B,eAAe;IAef,iBAAiB;IAejB,cAAc,CAAC,OAAO,EAAE,MAAM;IAe9B,qBAAqB,CAAC,OAAO,EAAE,MAAM;IAWrC,oBAAoB,CAAC,KAAK,EAAE,MAAM;IAmBlC,oBAAoB;YAenB,kBAAkB;CA0CjC","file":"index.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.M5StickC_FINGER\n */\nimport Obniz from \"../../../obniz\";\nimport PeripheralUART from \"../../../obniz/libs/io_peripherals/uart\";\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface M5StickC_FINGEROptions {\n  tx: number;\n  rx: number;\n  gnd?: number;\n}\n\nexport default class M5StickC_FINGER implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"M5StickC_FINGER\",\n    };\n  }\n\n  public requiredKeys: string[];\n  public keys: string[];\n  public params: any;\n\n  public ack: any;\n  public cmd: any;\n  public HEAD = 0;\n  public CMD = 1;\n  public CHK = 6;\n  public TAIL = 7;\n  public P1 = 2;\n  public P2 = 3;\n  public P3 = 4;\n  public Q1 = 2;\n  public Q2 = 3;\n  public Q3 = 4;\n\n  public TxBuf = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  public RxBuf = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n  protected obniz!: Obniz;\n  protected uart!: PeripheralUART;\n\n  constructor() {\n    this.requiredKeys = [];\n    this.keys = [\"tx\", \"rx\", \"gnd\"];\n    this.ack = {\n      SUCCESS: 0x00,\n      FAIL: 0x01,\n      FULL: 0x04,\n      NOUSER: 0x05,\n      USER_EXIST: 0x07,\n      TIMEOUT: 0x08,\n      GO_OUT: 0x0f,\n      ALL_USER: 0x00,\n      GUEST_USER: 0x01,\n      NORMAL_USER: 0x02,\n      MASTER_USER: 0x03,\n    };\n    this.cmd = {\n      HEAD: 0xf5,\n      TAIL: 0xf5,\n      ADD_1: 0x01,\n      ADD_2: 0x02,\n      ADD_3: 0x03,\n      GET_PERMISSION: 0x0a,\n      MATCH: 0x0c,\n      DEL: 0x04,\n      DEL_ALL: 0x05,\n      USER_CNT: 0x09,\n      SECURITY_LEVEL: 0x28,\n      SLEEP_MODE: 0x2c,\n      ADD_MODE: 0x2d,\n      FINGER_DETECTED: 0x14,\n    };\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    this.obniz.setVccGnd(null, this.params.gnd, \"3v\");\n    if (!this.obniz.isValidIO(this.params.tx) && !this.obniz.isValidIO(this.params.rx)) {\n      if (this.obniz.hasExtraInterface(\"m5stickc_hat\")) {\n        const hatI2c = this.obniz.getExtraInterface(\"m5stickc_hat\").uart;\n        this.params.tx = hatI2c.tx;\n        this.params.rx = hatI2c.rx;\n      } else {\n        throw new Error(\"Cannot find m5stickc hat interface. Please set param 'tx'/'rx'\");\n      }\n    }\n\n    this.uart = this.obniz.getFreeUart();\n    this.uart.start({\n      tx: this.params.tx,\n      rx: this.params.rx,\n      baud: 19200,\n    });\n  }\n\n  public async getUserNumWait() {\n    this.TxBuf[this.CMD] = this.cmd.USER_CNT;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = 0;\n    this.TxBuf[this.P3] = 0;\n\n    const res = await this.sendAndReceiveWait(200);\n    if (res === this.ack.SUCCESS && this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n      return this.RxBuf[this.Q2];\n    } else {\n      return 0xff;\n    }\n  }\n\n  public async addUserWait(userNum: number, userPermission: number) {\n    this.TxBuf[this.CMD] = this.cmd.ADD_1;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = userNum;\n    this.TxBuf[this.P3] = userPermission;\n\n    let res = await this.sendAndReceiveWait(3000);\n\n    if (res === this.ack.SUCCESS) {\n      if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n        this.TxBuf[this.CMD] = this.cmd.ADD_2;\n        res = await this.sendAndReceiveWait(3000);\n\n        if (res === this.ack.SUCCESS) {\n          this.TxBuf[this.CMD] = this.cmd.ADD_3;\n          res = await this.sendAndReceiveWait(3000);\n\n          if (this.ack.SUCCESS) {\n            return this.RxBuf[this.Q3];\n          }\n        }\n      }\n    }\n\n    return res;\n  }\n\n  public async compareFingerWait() {\n    this.TxBuf[this.CMD] = this.cmd.MATCH;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = 0;\n    this.TxBuf[this.P3] = 0;\n\n    const res = await this.sendAndReceiveWait(3000);\n\n    if (res === this.ack.SUCCESS) {\n      if (this.RxBuf[this.Q3] === this.ack.NOUSER) {\n        return this.ack.NOUSER;\n      }\n      if (this.RxBuf[this.Q3] === this.ack.TIMEOUT) {\n        return this.ack.TIMEOUT;\n      }\n      return this.RxBuf[this.Q3];\n    }\n    return res;\n  }\n\n  public async sleepWait() {\n    this.TxBuf[this.CMD] = this.cmd.SLEEP_MODE;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = 0;\n    this.TxBuf[this.P3] = 0;\n\n    const res = await this.sendAndReceiveWait(500);\n\n    if (res === this.ack.SUCCESS) {\n      return this.ack.SUCCESS;\n    } else {\n      return this.ack.FAIL;\n    }\n  }\n\n  public async setAddModeWait(mode: number) {\n    this.TxBuf[this.CMD] = this.cmd.ADD_MODE;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = mode;\n    this.TxBuf[this.P3] = 0;\n\n    await this.sendAndReceiveWait(200);\n\n    if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n      return this.ack.SUCCESS;\n    }\n\n    throw Error(\"failed to set add mode.\");\n  }\n\n  public async readAddModeWait() {\n    this.TxBuf[this.CMD] = this.cmd.ADD_MODE;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = 0;\n    this.TxBuf[this.P3] = 0x01;\n\n    await this.sendAndReceiveWait(200);\n\n    if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n      return this.RxBuf[this.Q2];\n    }\n\n    throw Error(\"failed to read add mode.\");\n  }\n\n  public async deleteAllUserWait() {\n    this.TxBuf[this.CMD] = this.cmd.DEL_ALL;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = 0;\n    this.TxBuf[this.P3] = 0;\n\n    await this.sendAndReceiveWait(200);\n\n    if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n      return this.ack.SUCCESS;\n    }\n\n    throw Error(\"failed to delete all users.\");\n  }\n\n  public async deleteUserWait(userNum: number) {\n    this.TxBuf[this.CMD] = this.cmd.DEL;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = userNum;\n    this.TxBuf[this.P3] = 0;\n\n    await this.sendAndReceiveWait(200);\n\n    if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n      return this.ack.SUCCESS;\n    }\n\n    throw Error(\"failed to delete user: \" + userNum);\n  }\n\n  public async getUserPermissionWait(userNum: number) {\n    this.TxBuf[this.CMD] = this.cmd.GET_PERMISSION;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = userNum;\n    this.TxBuf[this.P3] = 0;\n\n    await this.sendAndReceiveWait(200);\n\n    return this.RxBuf[this.Q3];\n  }\n\n  public async setSecurityLevelWait(level: number) {\n    if (level < 0 || level > 9) {\n      throw Error(\"security level argument must be between 0 and 9\");\n    }\n\n    this.TxBuf[this.CMD] = this.cmd.SECURITY_LEVEL;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = level;\n    this.TxBuf[this.P3] = 0x00;\n\n    await this.sendAndReceiveWait(200);\n\n    if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n      return this.ack.SUCCESS;\n    }\n\n    throw Error(\"failed to set security level.\");\n  }\n\n  public async getSecurityLevelWait() {\n    this.TxBuf[this.CMD] = this.cmd.SECURITY_LEVEL;\n    this.TxBuf[this.P1] = 0;\n    this.TxBuf[this.P2] = 0;\n    this.TxBuf[this.P3] = 0x01;\n\n    await this.sendAndReceiveWait(200);\n\n    if (this.RxBuf[this.Q3] === this.ack.SUCCESS) {\n      return this.RxBuf[this.Q2];\n    }\n\n    throw Error(\"failed to get security level.\");\n  }\n\n  private async sendAndReceiveWait(timeout: number) {\n    let checkSum = 0;\n\n    this.TxBuf[5] = 0;\n    this.uart.send(this.cmd.HEAD);\n    for (let i = 1; i < 6; i++) {\n      this.uart.send(this.TxBuf[i]);\n      checkSum ^= this.TxBuf[i];\n    }\n    this.uart.send(checkSum);\n    this.uart.send(this.cmd.TAIL);\n\n    await this.obniz.wait(timeout);\n\n    if (!this.uart.isDataExists()) {\n      return this.ack.TIMEOUT;\n    }\n    this.RxBuf = this.uart.readBytes();\n    // console.log(\"RxBuf: \" + this.RxBuf);\n    if (this.RxBuf.length !== 8) {\n      return this.ack.TIMEOUT;\n    }\n    if (this.RxBuf[this.HEAD] !== this.cmd.HEAD) {\n      throw Error(\"communication failed.\");\n    }\n    if (this.RxBuf[this.TAIL] !== this.cmd.TAIL) {\n      throw Error(\"communication failed.\");\n    }\n    if (this.RxBuf[this.CMD] !== this.TxBuf[this.CMD]) {\n      throw Error(\"communication failed.\");\n    }\n\n    checkSum = 0;\n    for (let i = 1; i < this.CHK; i++) {\n      checkSum ^= this.RxBuf[i];\n    }\n    if (checkSum !== this.RxBuf[this.CHK]) {\n      throw Error(\"communication failed.\");\n    }\n\n    return this.ack.SUCCESS;\n  }\n}\n"]}