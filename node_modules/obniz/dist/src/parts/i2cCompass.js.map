{"version":3,"sources":["../src/parts/i2cCompass.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;AAEH,0DAAoE;AAMpE,MAA8B,kBAAmB,SAAQ,kBAAQ;IACxD,MAAM,CAAC,KAAK,CAAC,aAAa;QAC/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,WAAW;QAC7B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAkBM,KAAK,CAAC,OAAO;QAClB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QACpC,OAAO;YACL,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YACtB,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YACtB,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;SACvB,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,eAAe;QAC1B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACjC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,OAAO,CAAC,QAAqB;QAClC,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACjE,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC;SACpB;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,0CAA0C,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAChH;IACH,CAAC;IAEO,OAAO,CAAC,IAAY;QAC1B,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,GAAG,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrH,CAAC;;AA9DH,qCA+DC;AAtDkB,6BAAU,GAAG;IAC5B,CAAC,EAAE,CAAC;IACJ,EAAE,EAAE,GAAG;IACP,EAAE,EAAE,GAAG;IACP,CAAC,EAAE,MAAM;IACT,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,IAAI,GAAG,IAAI;CAChB,CAAC","file":"i2cCompass.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts\n */\n\nimport i2cParts, { I2cPartsAbstractOptions, Xyz } from \"./i2cParts\";\n\nexport type compassUnit = \"uT\" | \"G\" | \"mT\" | \"T\" | \"mG\" | \"kG\" | \"uG\";\n\nexport interface I2cCompassAbstractOptions extends I2cPartsAbstractOptions {}\n\nexport default abstract class I2cCompassAbstract extends i2cParts {\n  public static async calibrateWait() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  public static async headingWait() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  protected static unitScales = {\n    G: 1,\n    uT: 100,\n    mT: 0.1,\n    T: 0.0001,\n    mG: 1000,\n    kG: 0.001,\n    uG: 1000 * 1000,\n  };\n  protected abstract so: number;\n  protected abstract sf: compassUnit;\n  protected abstract range: string;\n  protected abstract defaultUnit: compassUnit;\n\n  public abstract async getAdcWait(): Promise<Xyz>;\n\n  public async getWait(): Promise<Xyz> {\n    const adc = await this.getAdcWait();\n    return {\n      x: this.calcMag(adc.x),\n      y: this.calcMag(adc.y),\n      z: this.calcMag(adc.z),\n    };\n  }\n\n  public async getAdcArrayWait(): Promise<number[]> {\n    const obj = await this.getAdcWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public async getArrayWait(): Promise<number[]> {\n    const obj = await this.getWait();\n    return [obj.x, obj.y, obj.z];\n  }\n\n  public getUnit(): compassUnit {\n    return this.sf;\n  }\n\n  public getRange(): string {\n    return this.range;\n  }\n\n  public setUnit(new_unit: compassUnit) {\n    if (Object.keys(I2cCompassAbstract.unitScales).includes(new_unit)) {\n      this.sf = new_unit;\n    } else {\n      throw new Error(`Invalid compass unit. Valid values are ${Object.keys(I2cCompassAbstract.unitScales).join()}`);\n    }\n  }\n\n  private calcMag(data: number): number {\n    return (data * this.so * I2cCompassAbstract.unitScales[this.sf]) / I2cCompassAbstract.unitScales[this.defaultUnit];\n  }\n}\n"]}