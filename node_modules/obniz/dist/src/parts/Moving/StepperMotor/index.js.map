{"version":3,"sources":["../src/parts/Moving/StepperMotor/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts.StepperMotor\n */\n\nimport Obniz from \"../../../obniz\";\nimport PeripheralIO from \"../../../obniz/libs/io_peripherals/io\";\n\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../../../obniz/ObnizPartsInterface\";\n\nexport interface StepperMotorOptions {\n  a: number;\n  b: number;\n  aa: number;\n  bb: number;\n  common?: number;\n}\n\nexport type StepType = \"1\" | \"2\" | \"1-2\";\n\nexport default class StepperMotor implements ObnizPartsInterface {\n  public static info(): ObnizPartsInfo {\n    return {\n      name: \"StepperMotor\",\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public params: any;\n\n  public type?: string;\n  public currentStep = 0;\n  public frequency = 100;\n  public rotationStepCount = 100;\n  public milliMeterStepCount = 1;\n  public common: any;\n  public ios: PeripheralIO[] = [];\n\n  protected obniz!: Obniz;\n\n  private _stepInstructions = {\n    \"1\": [\n      [0, 1, 1, 1],\n      [1, 0, 1, 1],\n      [1, 1, 0, 1],\n      [1, 1, 1, 0],\n    ],\n    \"2\": [\n      [0, 0, 1, 1],\n      [1, 0, 0, 1],\n      [1, 1, 0, 0],\n      [0, 1, 1, 0],\n    ],\n    \"1-2\": [\n      [0, 1, 1, 1],\n      [0, 0, 1, 1],\n      [1, 0, 1, 1],\n      [1, 0, 0, 1],\n      [1, 1, 0, 1],\n      [1, 1, 0, 0],\n      [1, 1, 1, 0],\n      [0, 1, 1, 0],\n    ],\n  };\n  private _stepType: StepType = \"2\";\n\n  constructor() {\n    this.keys = [\"a\", \"b\", \"aa\", \"bb\", \"common\"];\n    this.requiredKeys = [\"a\", \"b\", \"aa\", \"bb\"];\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n\n    if (obniz.isValidIO(this.params.common)) {\n      this.common = obniz.getIO(this.params.common);\n      this.common.output(true);\n      this.type = \"unipolar\";\n    } else {\n      this.type = \"bipolar\";\n    }\n    this.ios = [];\n    this.ios.push(obniz.getIO(this.params.a));\n    this.ios.push(obniz.getIO(this.params.b));\n    this.ios.push(obniz.getIO(this.params.aa));\n    this.ios.push(obniz.getIO(this.params.bb));\n  }\n\n  public async stepWait(step_count: number) {\n    if (typeof step_count !== \"number\") {\n      throw new Error(\"must provide number\");\n    }\n    step_count = Math.round(step_count);\n    if (step_count === 0) {\n      return;\n    }\n    const step_count_abs = Math.abs(step_count);\n    const instructions = this._getStepInstructions();\n    const instruction_length = instructions.length;\n    const array: any = [];\n    // set instructions\n    let currentPhase = this.currentStep % instruction_length;\n    if (currentPhase < 0) {\n      currentPhase = instruction_length - currentPhase * -1;\n    }\n    if (step_count > 0) {\n      for (let i = 0; i < instructions.length; i++) {\n        if (++currentPhase >= instruction_length) {\n          currentPhase = 0;\n        }\n        array.push(instructions[currentPhase]);\n      }\n    } else {\n      for (let i = 0; i < instructions.length; i++) {\n        if (--currentPhase < 0) {\n          currentPhase = instruction_length - 1;\n        }\n        array.push(instructions[currentPhase]);\n      }\n    }\n    // prepare animation\n    let msec = 1000 / this.frequency;\n    msec = parseInt(msec as any);\n    if (msec < 1) {\n      msec = 1;\n    }\n    const state = (index: number) => {\n      const instruction = array[index];\n      for (let i = 0; i < this.ios.length; i++) {\n        this.ios[i].output(instruction[i]);\n      }\n    };\n    const states = [];\n    for (let i = 0; i < instruction_length; i++) {\n      states.push({\n        duration: msec,\n        state,\n      });\n    }\n    // execute and wait\n    await this.obniz.io!.repeatWait(states, step_count_abs);\n    this.currentStep += step_count;\n  }\n\n  public async stepToWait(destination: number) {\n    const mustmove = destination - this.currentStep;\n    await this.stepWait(mustmove);\n  }\n\n  public async holdWait() {\n    const instructions = this._getStepInstructions();\n    const instruction_length = instructions.length;\n    // set instructions\n    let currentPhase = this.currentStep % instruction_length;\n    if (currentPhase < 0) {\n      currentPhase = instruction_length - currentPhase * -1;\n    }\n\n    for (let i = 0; i < this.ios.length; i++) {\n      this.ios[i].output(instructions[currentPhase][i] === 1);\n    }\n    await this.obniz.pingWait();\n  }\n\n  public async freeWait() {\n    for (let i = 0; i < this.ios.length; i++) {\n      this.ios[i].output(true);\n    }\n    await this.obniz.pingWait();\n  }\n\n  public stepType(stepType: StepType) {\n    const newType = this._stepInstructions[stepType];\n    if (!newType) {\n      throw new Error(\"unknown step type \" + stepType);\n    }\n    this._stepType = stepType;\n  }\n\n  public speed(step_per_sec: number) {\n    this.frequency = step_per_sec;\n  }\n\n  public currentRotation() {\n    // => degree\n    return (this.currentStep / this.rotationStepCount) * 360;\n  }\n\n  public currentAngle() {\n    // => degree\n    let angle = (Math.floor(this.currentRotation() * 1000) % 360000) / 1000;\n    if (angle < 0) {\n      angle = 360 - angle;\n    }\n    return angle;\n  }\n\n  public async rotateWait(rotation: number) {\n    rotation /= 360;\n    const needed = rotation * this.rotationStepCount;\n    await this.stepWait(needed);\n  }\n\n  public async rotateToWait(angle: number) {\n    let needed = angle - this.currentAngle();\n    if (Math.abs(needed) > 180) {\n      needed = needed > 0 ? needed - 360 : 360 + needed;\n    }\n    needed = (needed / 360) * this.rotationStepCount;\n    await this.stepWait(needed);\n  }\n\n  public currentDistance() {\n    // => mm\n    return this.currentStep / this.milliMeterStepCount;\n  }\n\n  public async moveWait(distance: number) {\n    const needed = distance * this.milliMeterStepCount;\n    await this.stepWait(needed);\n  }\n\n  public async moveToWait(destination: number) {\n    const needed = (destination - this.currentDistance()) * this.milliMeterStepCount;\n    await this.stepWait(needed);\n  }\n\n  public _getStepInstructions() {\n    return this._stepInstructions[this._stepType];\n  }\n}\n"]}