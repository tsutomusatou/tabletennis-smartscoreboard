{"version":3,"sources":["../src/parts/i2cParts.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,UAAU,CAAC;AAC7B,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAC1E,OAAO,aAAa,MAAM,kCAAkC,CAAC;AAC7D,OAAO,mBAAuC,MAAM,8BAA8B,CAAC;AAEnF,MAAM,WAAW,GAAG;IAClB,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;IACV,CAAC,EAAE,MAAM,CAAC;CACX;AAED,MAAM,WAAW,uBAAuB;IACtC,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,GAAG,CAAC,EAAE,MAAM,CAAC;IACb,IAAI,CAAC,EAAE,QAAQ,CAAC;IAChB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,GAAG,CAAC,EAAE,aAAa,CAAC;IACpB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,OAAO,CAAC,EAAE,MAAM,CAAC;CAClB;AAED,MAAM,WAAW,OAAO;IACtB,OAAO,EAAE,MAAM,CAAC;IAChB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,SAAS,CAAC;IACnB,IAAI,EAAE,QAAQ,CAAC;CAChB;AAED,MAAM,CAAC,OAAO,CAAC,QAAQ,OAAO,gBAAiB,YAAW,mBAAmB;WAC7D,gBAAgB,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,SAAM,GAAG,MAAM;WAQhE,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,SAAM,EAAE,SAAS,wBAA2B,GAAG,GAAG;IAQ9F,IAAI,EAAE,MAAM,EAAE,CAAC;IACf,YAAY,EAAE,MAAM,EAAE,CAAC;IAC9B,SAAgB,OAAO,EAAE,OAAO,CAAC;IAC1B,OAAO,EAAE,GAAG,CAAC;IACb,MAAM,EAAE,GAAG,CAAC;IAEnB,SAAS,CAAC,KAAK,EAAG,KAAK,CAAC;IACxB,SAAS,CAAC,GAAG,EAAG,aAAa,CAAC;;IAQvB,OAAO,IAAI,OAAO;IAIlB,KAAK,CAAC,KAAK,EAAE,KAAK;IAgBlB,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAQ/B,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAKlE,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAOtB,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;IAM5C,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;cAMzC,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,GAAE,MAAY,GAAG,OAAO,CAAC,MAAM,CAAC;cAKtE,kBAAkB,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,GAAE,MAAY,GAAG,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;CAQ9G","file":"i2cParts.d.ts","sourcesContent":["/**\n * @packageDocumentation\n * @module Parts\n */\n\nimport Obniz from \"../obniz\";\nimport { DriveType, PullType } from \"../obniz/libs/io_peripherals/common\";\nimport PeripheralI2C from \"../obniz/libs/io_peripherals/i2c\";\nimport ObnizPartsInterface, { ObnizPartsInfo } from \"../obniz/ObnizPartsInterface\";\n\nexport interface Xyz {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface I2cPartsAbstractOptions {\n  vcc?: number;\n  gnd?: number;\n  sda?: number;\n  scl?: number;\n  pull?: PullType;\n  clock?: number;\n  i2c?: PeripheralI2C;\n  voltage?: number;\n  address?: number;\n}\n\nexport interface I2cInfo {\n  address: number;\n  clock: number;\n  voltage: DriveType;\n  pull: PullType;\n}\n\nexport default abstract class I2cPartsAbstract implements ObnizPartsInterface {\n  public static charArrayToInt16(values: [number, number], endian = \"b\"): number {\n    const buffer = new ArrayBuffer(2);\n    const dv = new DataView(buffer);\n    dv.setUint8(0, values[0]);\n    dv.setUint8(1, values[1]);\n    return dv.getInt16(0, endian !== \"b\");\n  }\n\n  public static charArrayToXyz(data: number[], endian = \"b\", scaleFunc = (d: number): number => d): Xyz {\n    return {\n      x: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(0, 2) as [number, number], endian)),\n      y: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(2, 4) as [number, number], endian)),\n      z: scaleFunc(I2cPartsAbstract.charArrayToInt16(data.slice(4, 6) as [number, number], endian)),\n    };\n  }\n\n  public keys: string[];\n  public requiredKeys: string[];\n  public abstract i2cinfo: I2cInfo;\n  public address: any;\n  public params: any;\n\n  protected obniz!: Obniz;\n  protected i2c!: PeripheralI2C;\n\n  constructor() {\n    this.keys = [\"gnd\", \"vcc\", \"sda\", \"scl\", \"i2c\", \"pull\", \"clock\", \"voltage\", \"address\"];\n    this.requiredKeys = [];\n  }\n\n  // public abstract info(): ObnizPartsInfo;\n  public i2cInfo(): I2cInfo {\n    return this.i2cinfo;\n  }\n\n  public wired(obniz: Obniz) {\n    this.obniz = obniz;\n    (Object.keys(this.i2cinfo) as Array<keyof I2cInfo>).map((k) => {\n      if (typeof this.params[k] === \"undefined\") {\n        this.params[k] = this.i2cinfo[k];\n      } else {\n        // @ts-ignore\n        this.i2cinfo[k] = this.params[k];\n      }\n    });\n    obniz.setVccGnd(this.params.vcc, this.params.gnd, this.params.voltage);\n    this.params.mode = \"master\";\n    this.i2c = this.obniz.getI2CWithConfig(this.params);\n    this.address = this.i2cinfo.address;\n  }\n\n  public char2short(val1: number, val2: number) {\n    const buffer: any = new ArrayBuffer(2);\n    const dv: any = new DataView(buffer);\n    dv.setUint8(0, val1);\n    dv.setUint8(1, val2);\n    return dv.getInt16(0, false);\n  }\n\n  public async readWait(command: number, length: number): Promise<number[]> {\n    this.i2c.write(this.address, [command]);\n    return await this.i2c.readWait(this.address, length);\n  }\n\n  public write(command: any, buf: any) {\n    if (!Array.isArray(buf)) {\n      buf = [buf];\n    }\n    this.i2c.write(this.address, [command, ...buf]);\n  }\n\n  public async writeFlagWait(address: number, index: number) {\n    const tempdata = await this.readWait(address, 1);\n    tempdata[0] = tempdata[0] | (0b1 << index);\n    this.write(address, tempdata);\n  }\n\n  public async clearFlagWait(address: number, index: number) {\n    const tempdata = await this.readWait(address, 1);\n    tempdata[0] = tempdata[0] & (0xff - (0b1 << index));\n    this.write(address, tempdata);\n  }\n\n  protected async readInt16Wait(register: number, endian: string = \"b\"): Promise<number> {\n    const data = (await this.readWait(register, 2)) as [number, number];\n    return I2cPartsAbstract.charArrayToInt16(data, endian);\n  }\n\n  protected async readThreeInt16Wait(register: number, endian: string = \"b\"): Promise<[number, number, number]> {\n    const data: number[] = await this.readWait(register, 6);\n    const results: [number, number, number] = [0, 0, 0];\n    results[0] = I2cPartsAbstract.charArrayToInt16(data.slice(0, 2) as [number, number], endian);\n    results[1] = I2cPartsAbstract.charArrayToInt16(data.slice(2, 4) as [number, number], endian);\n    results[2] = I2cPartsAbstract.charArrayToInt16(data.slice(4, 6) as [number, number], endian);\n    return results;\n  }\n}\n"]}